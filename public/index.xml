<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryan Yang</title>
    <link>https://www.yangcs.net/</link>
    <description>Recent content on Ryan Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 23 Jan 2018 08:26:58 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Linux全局智能分流方案</title>
      <link>https://www.yangcs.net/posts/linux-circumvent/</link>
      <pubDate>Tue, 23 Jan 2018 08:26:58 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/linux-circumvent/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p id=&#34;div-border-left-red&#34;&gt;Github 地址：&lt;a href=&#34;https://github.com/yangchuansheng/love-gfw&#34; target=&#34;_blank&#34;&gt;Linux 和 MacOS 设备智能分流方案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本来我是决定不再写这样的文章了的。但是呢，最近连续配置了两次 &lt;code&gt;ArchLinux&lt;/code&gt;，在配置这种东西的时候连续撞到了同样的坑，加上这段时间经常有人问我关于 &lt;code&gt;Linux&lt;/code&gt; 下的 &lt;code&gt;shadowsocks&lt;/code&gt; 的问题，所以我想了想还是写一篇记录一下吧，也免得自己以后再忘记了。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这里有两种方案，都可以实现全局智能分流。第一种方案的思路是使用 &lt;code&gt;ipset&lt;/code&gt; 载入 &lt;code&gt;chnroute&lt;/code&gt; 的 &lt;code&gt;IP&lt;/code&gt; 列表并使用 &lt;code&gt;iptables&lt;/code&gt; 实现带自动分流国内外流量的全局代理。为什么不用 &lt;code&gt;PAC&lt;/code&gt; 呢？因为 &lt;code&gt;PAC&lt;/code&gt; 这种东西只对浏览器有用。难道你在浏览器之外就不需要科学上网了吗？反正我是不信的……&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=Blue&gt;本教程所用系统为 &lt;code&gt;Archlinux&lt;/code&gt;，其他发型版类似，请自行参考相关资料。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-通过-iptables-实现智能分流&#34;&gt;1. 通过 iptables 实现智能分流&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;安装相关软件&#34;&gt;安装相关软件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;shadowsocks-libev&lt;/li&gt;
&lt;li&gt;ipset&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pacman -S shadowsocks-libev ipset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置shadowsocks-libev-略过&#34;&gt;配置shadowsocks-libev（略过）&lt;/h3&gt;

&lt;p&gt;假设shadowsocks配置文件为/etc/shadowsocks.json&lt;/p&gt;

&lt;h3 id=&#34;获取中国ip段&#34;&gt;获取中国IP段&lt;/h3&gt;

&lt;p&gt;将以下命令写入脚本保存执行（假设保存在/home/yang/bin/路由表/目录下）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
wget -c http://ftp.apnic.net/stats/apnic/delegated-apnic-latest
cat delegated-apnic-latest | awk -F &#39;|&#39; &#39;/CN/&amp;amp;&amp;amp;/ipv4/ {print $4 &amp;quot;/&amp;quot; 32-log($5)/log(2)}&#39; | cat &amp;gt; /home/yang/bin/路由表/cn_rules.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;创建启动和关闭脚本&#34;&gt;创建启动和关闭脚本&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /home/yang/bin/shadowsocks/ss-up.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

SOCKS_SERVER=$SERVER_IP # SOCKS 服务器的 IP 地址
# Setup the ipset
ipset -N chnroute hash:net maxelem 65536

for ip in $(cat &#39;/home/yang/bin/路由表/cn_rules.conf&#39;); do
  ipset add chnroute $ip
done

# 在nat表中新增一个链，名叫：SHADOWSOCKS
iptables -t nat -N SHADOWSOCKS

# Allow connection to the server
iptables -t nat -A SHADOWSOCKS -d $SOCKS_SERVER -j RETURN

# Allow connection to reserved networks
iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN

# Allow connection to chinese IPs
iptables -t nat -A SHADOWSOCKS -p tcp -m set --match-set chnroute dst -j RETURN
# 如果你想对 icmp 协议也实现智能分流，可以加上下面这一条
# iptables -t nat -A SHADOWSOCKS -p icmp -m set --match-set chnroute dst -j RETURN

# Redirect to Shadowsocks
# 把1081改成你的shadowsocks本地端口
iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-port 1081
# 如果你想对 icmp 协议也实现智能分流，可以加上下面这一条
# iptables -t nat -A SHADOWSOCKS -p icmp -j REDIRECT --to-port 1081

# 将SHADOWSOCKS链中所有的规则追加到OUTPUT链中
iptables -t nat -A OUTPUT -p tcp -j SHADOWSOCKS
# 如果你想对 icmp 协议也实现智能分流，可以加上下面这一条
# iptables -t nat -A OUTPUT -p icmp -j SHADOWSOCKS

# 内网流量流经 shadowsocks 规则链
iptables -t nat -A PREROUTING -s 192.168/16 -j SHADOWSOCKS
# 内网流量源NAT
iptables -t nat -A POSTROUTING -s 192.168/16 -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;这是在启动 &lt;code&gt;shadowsocks&lt;/code&gt; 之前执行的脚本，用来设置 &lt;code&gt;iptables&lt;/code&gt; 规则，对全局应用代理并将 &lt;code&gt;chnroute&lt;/code&gt; 导入 &lt;code&gt;ipset&lt;/code&gt; 来实现自动分流。注意要把服务器 &lt;code&gt;IP&lt;/code&gt; 和本地端口相关的代码全部替换成你自己的。
&amp;emsp;&amp;emsp;这里就有一个坑了，就是在把 &lt;code&gt;chnroute.txt&lt;/code&gt; 加入 &lt;code&gt;ipset&lt;/code&gt; 的时候。因为 &lt;code&gt;chnroute.txt&lt;/code&gt; 是一个 &lt;code&gt;IP&lt;/code&gt; 段列表，而中国持有的 &lt;code&gt;IP&lt;/code&gt; 数量上还是比较大的，所以如果使用 &lt;code&gt;hash:ip&lt;/code&gt; 来导入的话会使内存溢出。我在第二次重新配置的时候就撞进了这个大坑……
&amp;emsp;&amp;emsp;但是你也不能尝试把整个列表导入 &lt;code&gt;iptables&lt;/code&gt;。虽然导入 &lt;code&gt;iptables&lt;/code&gt; 不会导致内存溢出，但是 &lt;code&gt;iptables&lt;/code&gt; 是线性查表，即使你全部导入进去，也会因为低下的性能而抓狂。
&lt;br \&gt;
然后再创建 &lt;code&gt;/home/yang/bin/shadowsocks/ss-down.sh&lt;/code&gt;, 这是用来清除上述规则的脚本，比较简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# iptables -t nat -D OUTPUT -p icmp -j SHADOWSOCKS
iptables -t nat -D OUTPUT -p tcp -j SHADOWSOCKS
iptables -t nat -F SHADOWSOCKS
iptables -t nat -X SHADOWSOCKS
ipset destroy chnroute
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chmod +x ss-up.sh
$ chmod +x ss-down.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置ss-redir服务&#34;&gt;配置ss-redir服务&lt;/h3&gt;

&lt;p&gt;首先，默认的 &lt;code&gt;ss-local&lt;/code&gt; 并不能用来作为 &lt;code&gt;iptables&lt;/code&gt; 流量转发的目标，因为它是 &lt;code&gt;socks5&lt;/code&gt; 代理而非透明代理。我们至少要把 &lt;code&gt;systemd&lt;/code&gt; 执行的程序改成 &lt;code&gt;ss-redir&lt;/code&gt;。其次，上述两个脚本还不能自动执行，必须让 &lt;code&gt;systemd&lt;/code&gt; 分别在启动 &lt;code&gt;shadowsocks&lt;/code&gt; 之前和关闭之后将脚本执行，这样才能自动配置好 &lt;code&gt;iptables&lt;/code&gt; 规则。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /usr/lib/systemd/system/shadowsocks-libev@.service
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Unit]
Description=Shadowsocks-Libev Client Service
After=network.target

[Service]
User=root
CapabilityBoundingSet=~CAP_SYS_ADMIN
ExecStart=
ExecStartPre=/home/yang/bin/shadowsocks/ss-up.sh
ExecStart=/usr/bin/ss-redir -u -c /etc/%i.json
ExecStopPost=/home/yang/bin/shadowsocks/ss-down.sh

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl start shadowsocks-libev@shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开机自启&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl enable shadowsocks-libev@shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置智能-dns-服务&#34;&gt;配置智能 DNS 服务&lt;/h3&gt;

&lt;p&gt;完成了以上工作之后是不是就可以实现全局科学上网了呢？答案是否定的，我们还有最后一项工作需要完成，那就是解决 &lt;code&gt;DNS&lt;/code&gt; 污染问题。如果你不知道什么是 &lt;code&gt;DNS&lt;/code&gt; 污染，我可以简单地给你普及一下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 污染是一种让一般用户由于得到虚假目标主机 &lt;code&gt;IP&lt;/code&gt; 而不能与其通信的方法，是一种 &lt;code&gt;DNS&lt;/code&gt; 缓存投毒攻击（DNS cache poisoning）。其工作方式是：由于通常的 &lt;code&gt;DNS&lt;/code&gt; 查询没有任何认证机制，而且 &lt;code&gt;DNS&lt;/code&gt; 查询通常基于的 &lt;code&gt;UDP&lt;/code&gt; 是无连接不可靠的协议，因此 &lt;code&gt;DNS&lt;/code&gt; 的查询非常容易被篡改，通过对 &lt;code&gt;UDP&lt;/code&gt; 端口 53 上的 &lt;code&gt;DNS&lt;/code&gt; 查询进行入侵检测，一经发现与关键词相匹配的请求则立即伪装成目标域名的解析服务器（NS，Name Server）给查询者返回虚假结果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 污染症状：目前一些被禁止访问的网站很多就是通过 &lt;code&gt;DNS&lt;/code&gt; 污染来实现的，例如 &lt;code&gt;YouTube&lt;/code&gt;、&lt;code&gt;Facebook&lt;/code&gt; 等网站。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;应对dns污染的方法&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;DNS&lt;/code&gt; 污染，可以说，个人用户很难单单靠设置解决，通常可以使用 &lt;code&gt;VPN&lt;/code&gt; 或者域名远程解析的方法解决，但这大多需要购买付费的 &lt;code&gt;VPN&lt;/code&gt; 或 &lt;code&gt;SSH&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;Hosts&lt;/code&gt; 的方法，手动设置域名正确的 &lt;code&gt;IP&lt;/code&gt; 地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dns&lt;/code&gt; 加密解析：&lt;a href=&#34;https://dnscrypt.org/&#34; target=&#34;_blank&#34;&gt;DNSCrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;忽略 &lt;code&gt;DNS&lt;/code&gt; 投毒污染小工具：&lt;a href=&#34;https://github.com/chengr28/Pcap_DNSProxy&#34; target=&#34;_blank&#34;&gt;Pcap_DNSProxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们选择用 &lt;code&gt;Pcap_DNSProxy&lt;/code&gt; 来解决这个问题，以前用的是 &lt;code&gt;Pdnsd + Dnsmasq&lt;/code&gt; 组合， 后来发现 &lt;code&gt;TCP&lt;/code&gt; 请求效率太低加上家里网络与那些国外的 &lt;code&gt;DNS&lt;/code&gt; 丢包实在是严重， 所以打算用 &lt;code&gt;Pcap_DNSProxy&lt;/code&gt; 代替 &lt;code&gt;Pdnsd&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;关于 &lt;code&gt;Pcap_DNSProxy&lt;/code&gt; 的详细介绍，可以参考:
&lt;a href=&#34;https://github.com/chengr28/Pcap_DNSProxy&#34; target=&#34;_blank&#34;&gt;https://github.com/chengr28/Pcap_DNSProxy&lt;/a&gt;
安装过程可以参考：
&lt;a href=&#34;https://github.com/chengr28/Pcap_DNSProxy/blob/master/Documents/ReadMe_Linux.zh-Hans.txt&#34; target=&#34;_blank&#34;&gt;https://github.com/chengr28/Pcap_DNSProxy/blob/master/Documents/ReadMe_Linux.zh-Hans.txt&lt;/a&gt;
更详细的使用说明可以参考：
&lt;a href=&#34;https://github.com/chengr28/Pcap_DNSProxy/blob/master/Documents/ReadMe.zh-Hans.txt&#34; target=&#34;_blank&#34;&gt;https://github.com/chengr28/Pcap_DNSProxy/blob/master/Documents/ReadMe.zh-Hans.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里主要重点强调一些需要注意的配置项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DNS&lt;/code&gt; - 境外域名解析参数区域（这是最关键的一项配置）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[DNS]
# 这里一定要填 IPv4 + TCP！！！表示只使用 TCP 协议向境外远程 DNS 服务器发出请求
Outgoing Protocol = IPv4 + TCP
# 建议当系统使用全局代理功能时启用，程序将除境内服务器外的所有请求直接交给系统而不作任何过滤等处理，系统会将请求自动发往远程服务器进行解析
Direct Request = IPv4
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Local DNS&lt;/code&gt; - 境内域名解析参数区域&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Local DNS]
# 发送请求到境内 DNS 服务器时所使用的协议
Local Protocol = IPv4 + UDP
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Addresses&lt;/code&gt; - 普通模式地址区域&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Addresses]
...
...
# IPv4 主要境外 DNS 服务器地址
IPv4 Main DNS Address = 8.8.4.4:53
# IPv4 备用境外 DNS 服务器地址
IPv4 Alternate DNS Address = 8.8.8.8:53|208.67.220.220:443|208.67.222.222:5353
# IPv4 主要境内 DNS 服务器地址，用于境内域名解析，推荐使用 onedns
IPv4 Local Main DNS Address = 112.124.47.27:53
# IPv4 备用境内 DNS 服务器地址，用于境内域名解析
IPv4 Local Alternate DNS Address = 114.215.126.16:53
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置系统-dns-服务器设置&#34;&gt;配置系统 DNS 服务器设置&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可参见 &lt;a href=&#34;https://developers.google.com/speed/public-dns/docs/using&#34; target=&#34;_blank&#34;&gt;https://developers.google.com/speed/public-dns/docs/using&lt;/a&gt; 中 &lt;code&gt;Changing your DNS servers settings&lt;/code&gt; 中 &lt;code&gt;Linux&lt;/code&gt; 一节&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图形界面以 &lt;code&gt;GNOME 3&lt;/code&gt; 为例：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打开所有程序列表，并 -&amp;gt; 设置 – 硬件分类 – 网络&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果要对当前的网络配置进行编辑 -&amp;gt; 单击齿轮按钮&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;选中 &lt;code&gt;IPv4&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 栏目中，将自动拨向关闭&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在服务器中填入 &lt;code&gt;127.0.0.1&lt;/code&gt; （或103.214.195.99:7300）并应用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;选中 &lt;code&gt;IPv6&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 栏目中，将自动拨向关闭&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在服务器中填入 ::1 并应用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;请务必确保只填入这两个地址，填入其它地址可能会导致系统选择其它 DNS 服务器绕过程序的代理&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重启网络连接&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接修改系统文件修改 DNS 服务器设置：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自动获取地址(DHCP)时：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以 &lt;code&gt;root&lt;/code&gt; 权限进入 &lt;code&gt;/etc/dhcp&lt;/code&gt; 或 &lt;code&gt;/etc/dhcp3&lt;/code&gt; 目录（视乎 dhclient.conf 文件位置）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接修改 &lt;code&gt;dhclient.conf&lt;/code&gt; 文件，修改或添加 &lt;code&gt;prepend domain-name-servers&lt;/code&gt; 一项即可&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果 &lt;code&gt;prepend domain-name-servers&lt;/code&gt; 一项被 # 注释则需要把注释去掉以使配置生效，不需要添加新的条目&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dhclient.conf&lt;/code&gt; 文件可能存在多个 &lt;code&gt;prepend domain-name-servers&lt;/code&gt; 项，是各个网络接口的配置项目，直接修改总的配置项目即可&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;service network(/networking) restart&lt;/code&gt; 或 &lt;code&gt;ifdown/ifup&lt;/code&gt; 或 &lt;code&gt;ifconfig stop/start&lt;/code&gt; 重启网络服务/网络端口&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;非自动获取地址(DHCP)时：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以 &lt;code&gt;root&lt;/code&gt; 权限进入 &lt;code&gt;/etc&lt;/code&gt; 目录&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接修改 &lt;code&gt;resolv.conf&lt;/code&gt; 文件里的 &lt;code&gt;nameserver&lt;/code&gt; 即可&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果重启后配置被覆盖，则需要修改或新建 &lt;code&gt;/etc/resolvconf/resolv.conf.d&lt;/code&gt; 文件，内容和 &lt;code&gt;resolv.conf&lt;/code&gt; 一样&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;service network(/networking) restart&lt;/code&gt; 或 &lt;code&gt;ifdown/ifup&lt;/code&gt; 或 &lt;code&gt;ifconfig stop/start&lt;/code&gt; 重启网络服务/网络端口&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;打开流量转发&#34;&gt;打开流量转发&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/sysctl.d/30-ipforward.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;net.ipv4.ip_forward=1

net.ipv6.conf.all.forwarding = 1

net.ipv4.tcp_congestion_control=westwood

net.ipv4.tcp_syn_retries = 5

net.ipv4.tcp_synack_retries = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑完成后，执行以下命令使变动立即生效&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sysctl -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-通过-nftables-实现智能分流&#34;&gt;2. 通过 nftables 实现智能分流&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;安装相关软件-1&#34;&gt;安装相关软件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;shadowsocks-libev&lt;/li&gt;
&lt;li&gt;nftables&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pacman -S shadowsocks-libev nftables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置shadowsocks-libev-略过-1&#34;&gt;配置shadowsocks-libev（略过）&lt;/h3&gt;

&lt;p&gt;假设shadowsocks配置文件为/etc/shadowsocks.json&lt;/p&gt;

&lt;h3 id=&#34;获取中国ip段-1&#34;&gt;获取中国IP段&lt;/h3&gt;

&lt;p&gt;将以下命令写入脚本保存执行（假设保存在/home/yang/bin/路由表/目录下）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
wget -c http://ftp.apnic.net/stats/apnic/delegated-apnic-latest
cat delegated-apnic-latest | awk -F &#39;|&#39; &#39;/CN/&amp;amp;&amp;amp;/ipv4/ {print $4 &amp;quot;/&amp;quot; 32-log($5)/log(2)}&#39; | cat &amp;gt; /home/yang/bin/路由表/cn_rules.conf
cat cn_rules.conf|sed &#39;:label;N;s/\n/, /;b label&#39;|sed &#39;s/$/&amp;amp; }/g&#39;|sed &#39;s/^/{ &amp;amp;/g&#39; &amp;gt; /home/yang/bin/路由表/cn_rules1.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;创建启动和关闭脚本-1&#34;&gt;创建启动和关闭脚本&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /home/yang/bin/shadowsocks/nftables-up.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

nft_pre=&amp;quot;/usr/sbin/nft add rule nat prerouting&amp;quot;
nft_out=&amp;quot;/usr/sbin/nft add rule nat output&amp;quot;
chnroute=$(cat &#39;/home/yang/bin/路由表/cn_rules1.conf&#39;)

/usr/bin/nft -f /etc/nftables.conf

${nft_pre} tcp dport 8385 return
${nft_pre} ip daddr 139.162.87.98 return
${nft_pre} ip daddr { 0.0.0.0/8, 10.0.0.0/8, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.168.0.0/16, 224.0.0.0/4, 240.0.0.0/4, 172.16.39.0/24} return
${nft_pre} ip daddr $chnroute return
${nft_pre} tcp sport { 32768-61000} redirect to 1081
#${nft_pre} ip protocol icmp redirect to 1081
# 内网流量源NAT
nft add rule nat postrouting ip saddr 192.168.0.0/12 masquerade

${nft_out} tcp dport 8385 return
${nft_out} ip daddr 139.162.87.98 return
${nft_out} ip daddr { 0.0.0.0/8, 10.0.0.0/8, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.168.0.0/16, 224.0.0.0/4, 240.0.0.0/4, 172.16.39.0/24} return
${nft_out} ip daddr $chnroute return
# /proc/sys/net/ipv4/ip_local_port_range，本地发起的连接的端口范围
${nft_out} tcp sport { 32768-61000} redirect to 1081
${nft_out} ip protocol icmp redirect to 1081
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;这是在启动 &lt;code&gt;shadowsocks&lt;/code&gt; 之前执行的脚本，用来设置 &lt;code&gt;nftables&lt;/code&gt; 规则。
然后再创建 &lt;code&gt;/home/yang/bin/shadowsocks/nftables-down.sh&lt;/code&gt;, 这是用来清除上述规则的脚本，比较简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

sudo nft flush table nat
#sudo nft flush table filter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chmod +x nftables-up.sh
$ chmod +x nftables-down.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置ss-redir服务-1&#34;&gt;配置ss-redir服务&lt;/h3&gt;

&lt;p&gt;首先，默认的 &lt;code&gt;ss-local&lt;/code&gt; 并不能用来作为 &lt;code&gt;nftables&lt;/code&gt; 流量转发的目标，因为它是 &lt;code&gt;socks5&lt;/code&gt; 代理而非透明代理。我们至少要把 &lt;code&gt;systemd&lt;/code&gt; 执行的程序改成 &lt;code&gt;ss-redir&lt;/code&gt;。其次，上述两个脚本还不能自动执行，必须让 &lt;code&gt;systemd&lt;/code&gt; 分别在启动 &lt;code&gt;shadowsocks&lt;/code&gt; 之前和关闭之后将脚本执行，这样才能自动配置好 &lt;code&gt;nftables&lt;/code&gt; 规则。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /usr/lib/systemd/system/shadowsocks-libev@.service
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Unit]
Description=Shadowsocks-Libev Client Service
After=network.target

[Service]
User=root
CapabilityBoundingSet=~CAP_SYS_ADMIN
ExecStart=
ExecStartPre=/home/yang/bin/shadowsocks/nftables-up.sh
ExecStart=/usr/bin/ss-redir -u -c /etc/%i.json
ExecStopPost=/home/yang/bin/shadowsocks/nftables-down.sh

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl start nftables
$ systemctl start shadowsocks-libev@shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开机自启&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl enable nftables
$ systemctl enable shadowsocks-libev@shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置智能-dns-服务-1&#34;&gt;配置智能 DNS 服务&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h3 id=&#34;配置系统-dns-服务器设置-1&#34;&gt;配置系统 DNS 服务器设置&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h3 id=&#34;打开流量转发-1&#34;&gt;打开流量转发&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h2 id=&#34;3-通过策略路由实现智能分流&#34;&gt;3. 通过策略路由实现智能分流&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;安装相关软件-2&#34;&gt;安装相关软件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;badvpn&lt;/li&gt;
&lt;li&gt;shadowsocks&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pacman -S badvpn shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置shadowsocks-略过&#34;&gt;配置shadowsocks（略过）&lt;/h3&gt;

&lt;p&gt;假设shadowsocks配置文件为/etc/shadowsocks.json&lt;/p&gt;

&lt;h3 id=&#34;获取中国ip段-2&#34;&gt;获取中国IP段&lt;/h3&gt;

&lt;p&gt;将以下命令写入脚本保存执行（假设保存在/home/yang/bin/路由表/目录下）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
wget -c http://ftp.apnic.net/stats/apnic/delegated-apnic-latest
cat delegated-apnic-latest | awk -F &#39;|&#39; &#39;/CN/&amp;amp;&amp;amp;/ipv4/ {print $4 &amp;quot;/&amp;quot; 32-log($5)/log(2)}&#39; | cat &amp;gt; /home/yang/bin/路由表/cn_rules.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;配置智能-dns-服务-2&#34;&gt;配置智能 DNS 服务&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h3 id=&#34;配置系统-dns-服务器设置-2&#34;&gt;配置系统 DNS 服务器设置&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h3 id=&#34;编写路由表启动和终止脚本&#34;&gt;编写路由表启动和终止脚本&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /usr/local/bin/socksfwd
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
SOCKS_SERVER=$SERVER_IP # SOCKS 服务器的 IP 地址
SOCKS_PORT=1081 # 本地SOCKS 服务器的端口
GATEWAY_IP=$(ip route|grep &amp;quot;default&amp;quot;|awk &#39;{print $3}&#39;) # 家用网关（路由器）的 IP 地址，你也可以手动指定
TUN_NETWORK_DEV=tun0 # 选一个不冲突的 tun 设备号
TUN_NETWORK_PREFIX=10.0.0 # 选一个不冲突的内网 IP 段的前缀


start_fwd() {
ip tuntap del dev &amp;quot;$TUN_NETWORK_DEV&amp;quot; mode tun
# 添加虚拟网卡
ip tuntap add dev &amp;quot;$TUN_NETWORK_DEV&amp;quot; mode tun
# 给虚拟网卡绑定IP地址
ip addr add &amp;quot;$TUN_NETWORK_PREFIX.1/24&amp;quot; dev &amp;quot;$TUN_NETWORK_DEV&amp;quot;
# 启动虚拟网卡
ip link set &amp;quot;$TUN_NETWORK_DEV&amp;quot; up
ip route del default via &amp;quot;$GATEWAY_IP&amp;quot;
ip route add &amp;quot;$SOCKS_SERVER&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
# 特殊ip段走家用网关（路由器）的 IP 地址（如局域网联机）
# ip route add &amp;quot;172.16.39.0/24&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
# 国内网段走家用网关（路由器）的 IP 地址
for i in $(cat /home/yang/bin/路由表/cn_rules.conf)
do
ip route add &amp;quot;$i&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
done
# 将默认网关设为虚拟网卡的IP地址
ip route add 0.0.0.0/1 via &amp;quot;$TUN_NETWORK_PREFIX.1&amp;quot;
ip route add 128.0.0.0/1 via &amp;quot;$TUN_NETWORK_PREFIX.1&amp;quot;
# 将socks5转为vpn
badvpn-tun2socks --tundev &amp;quot;$TUN_NETWORK_DEV&amp;quot; --netif-ipaddr &amp;quot;$TUN_NETWORK_PREFIX.2&amp;quot; --netif-netmask 255.255.255.0 --socks-server-addr &amp;quot;127.0.0.1:$SOCKS_PORT&amp;quot;
TUN2SOCKS_PID=&amp;quot;$!&amp;quot;
}


stop_fwd() {
ip route del 128.0.0.0/1 via &amp;quot;$TUN_NETWORK_PREFIX.1&amp;quot;
ip route del 0.0.0.0/1 via &amp;quot;$TUN_NETWORK_PREFIX.1&amp;quot;
for i in $(cat /home/yang/bin/路由表/cn_rules.conf)
do
ip route del &amp;quot;$i&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
done
ip route del &amp;quot;172.16.39.0/24&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
ip route del &amp;quot;$SOCKS_SERVER&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
ip route add default via &amp;quot;$GATEWAY_IP&amp;quot;
ip link set &amp;quot;$TUN_NETWORK_DEV&amp;quot; down
ip addr del &amp;quot;$TUN_NETWORK_PREFIX.1/24&amp;quot; dev &amp;quot;$TUN_NETWORK_DEV&amp;quot;
ip tuntap del dev &amp;quot;$TUN_NETWORK_DEV&amp;quot; mode tun
}



start_fwd
trap stop_fwd INT TERM
wait &amp;quot;$TUN2SOCKS_PID&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /etc/systemd/system/socksfwd.service
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Unit]

Description=Transparent SOCKS5 forwarding

After=network-online.target

[Service]

Type=simple

ExecStart=/usr/local/bin/socksfwd

LimitNOFILE=1048576


[Install]

WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl start socksfwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开机自启&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl enable socksfwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;打开流量转发-2&#34;&gt;打开流量转发&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/sysctl.d/30-ipforward.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;net.ipv4.ip_forward=1

net.ipv6.conf.all.forwarding = 1

net.ipv4.tcp_congestion_control=westwood

net.ipv4.tcp_syn_retries = 5

net.ipv4.tcp_synack_retries = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑完成后，执行以下命令使变动立即生效&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sysctl -p
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;扫一扫关注微信公众号&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
h2 {
    display: block;
    font-size: 1.5em;
    margin-block-start: 0.83em;
    margin-block-end: 0.83em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    font-weight: bold;
}
h2::before {
    content: &#34;#&#34;;
    margin-right: 5px;
    color: #2d96bd;
}

#h2-another {
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Envoy 中的 xDS REST 和 gRPC 协议详解</title>
      <link>https://www.yangcs.net/posts/envoy-xds-protocol/</link>
      <pubDate>Wed, 10 Oct 2018 22:23:51 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/envoy-xds-protocol/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p id=&#34;div-border-left-red&#34;&gt;
&lt;strong&gt;转载自：&lt;/strong&gt;&lt;a href=&#34;http://www.servicemesher.com/blog/envoy-xds-protocol/&#34; target=&#34;_blank&#34;&gt;Envoy 中的 xDS REST 和 gRPC 协议详解&lt;/a&gt;
&lt;br /&gt;
&lt;strong&gt;原文地址：&lt;/strong&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/XDS_PROTOCOL.md&#34; target=&#34;_blank&#34;&gt;https://github.com/envoyproxy/data-plane-api/blob/master/XDS_PROTOCOL.md&lt;/a&gt;
&lt;br /&gt;
&lt;strong&gt;作者：&lt;/strong&gt;狄卫华
&lt;br /&gt;
&lt;strong&gt;修订：&lt;/strong&gt;杨传胜
&lt;/p&gt;

&lt;p&gt;Envoy 通过查询文件或管理服务器来动态发现资源。这些发现服务及其相应的 API 被统称为 &lt;code&gt;xDS&lt;/code&gt;。Envoy 通过订阅（&lt;code&gt;subscription&lt;/code&gt;）方式来获取资源，如监控指定路径下的文件、启动 gRPC 流（streaming）或轮询 REST-JSON URL。后两种方式会发送 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#discoveryrequest&#34; target=&#34;_blank&#34;&gt;DiscoveryRequest&lt;/a&gt; 请求消息，发现的对应资源则包含在响应消息 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#discoveryrequest&#34; target=&#34;_blank&#34;&gt;DiscoveryResponse&lt;/a&gt; 中。下面，我们将具体讨论每种订阅类型。&lt;/p&gt;

&lt;h2 id=&#34;1-文件订阅&#34;&gt;1. 文件订阅&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;发现动态资源的最简单方式就是将其保存于文件，并将路径配置在 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/config_source.proto#core-configsource&#34; target=&#34;_blank&#34;&gt;ConfigSource&lt;/a&gt; 中的 &lt;code&gt;path&lt;/code&gt; 参数中。Envoy 使用 &lt;code&gt;inotify&lt;/code&gt;（Mac OS X 上为 &lt;code&gt;kqueue&lt;/code&gt;）来监控文件的变化，在文件被更新时，Envoy 读取保存的 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 数据进行解析，数据格式可以为二进制 protobuf、JSON、YAML 和协议文本等。&lt;/p&gt;

&lt;p id=blockquote&gt;译者注：core.ConfigSource 配置格式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;path&amp;quot;: &amp;quot;...&amp;quot;,
  &amp;quot;api_config_source&amp;quot;: &amp;quot;{...}&amp;quot;,
  &amp;quot;ads&amp;quot;: &amp;quot;{...}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文件订阅方式可提供统计数据和日志信息，但是缺少 ACK/NACK 更新的机制。如果更新的配置被拒绝，xDS API 则继续使用最后一个有效配置。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;
&lt;li&gt;&lt;code&gt;ACK&lt;/code&gt; 在 TCP 连接中是数据包确认消息，在 TCP 连接中，数据接收端在接收到一个数据包的时候会立即发送一个 ACK 消息给发送端，通知已经接收到此数据包，然后发送端再继续发送下一个数据包。&lt;/li&gt;
&lt;li&gt;NACK 与 ACK 刚好相反，在 UDP 通信中，数据接收端接收到数据包后是不需要通知发送端的，发送端始终不断的发送数据包而不关心对方是否正确收到，亦不关心所发生的数据包是否有序到达。只有在接收端意识到有某个或某几个数据包没有接收到的情况下才会构造一个 &lt;code&gt;NACK&lt;/code&gt; 消息包发送给发送端。请求发送端重发丢失包。 &lt;/li&gt;
比如接收端收到数据包 100， 101， 103，105，然后发现 102， 104 丢了，会构造一个 NACK 包发送给发送端。
&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;2-grpc-流式订阅&#34;&gt;2. gRPC 流式订阅&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;单例资源类型发现&#34;&gt;单例资源类型发现&lt;/h3&gt;

&lt;p&gt;每个 xDS API 可以单独配置 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/config_source.proto#core-apiconfigsource&#34; target=&#34;_blank&#34;&gt;ApiConfigSource&lt;/a&gt;，指向对应的上游管理服务器的集群地址。每个 xDS 资源类型会启动一个独立的双向 gRPC 流（每个 xDS 资源类型对应的管理服务器可能不同）。API 交付方式采用最终一致性。可以参考后续聚合服务发现（ADS） 章节来了解必要的显式控制序列。&lt;/p&gt;

&lt;p id=blockquote&gt;译者注：core.ApiConfigSource 配置格式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;api_type&amp;quot;: &amp;quot;...&amp;quot;,
  &amp;quot;cluster_names&amp;quot;: [],
  &amp;quot;grpc_services&amp;quot;: [],
  &amp;quot;refresh_delay&amp;quot;: &amp;quot;{...}&amp;quot;,
  &amp;quot;request_timeout&amp;quot;: &amp;quot;{...}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;类型-url&#34;&gt;类型 URL&lt;/h4&gt;

&lt;p&gt;每个 xDS API 都与给定的资源类型一一对应。关系如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/lds.proto&#34; target=&#34;_blank&#34;&gt;LDS&lt;/a&gt; ： &lt;code&gt;envoy.api.v2.Listener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/rds.proto&#34; target=&#34;_blank&#34;&gt;RDS&lt;/a&gt; : &lt;code&gt;envoy.api.v2.RouteConfiguration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cds.proto&#34; target=&#34;_blank&#34;&gt;CDS&lt;/a&gt; : &lt;code&gt;envoy.api.v2.Cluster&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/eds.proto&#34; target=&#34;_blank&#34;&gt;EDS&lt;/a&gt; ： &lt;code&gt;envoy.api.v2.ClusterLoadAssignment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/auth/cert.proto&#34; target=&#34;_blank&#34;&gt;SDS&lt;/a&gt; ：&lt;code&gt;envoy.api.v2.Auth.Secret&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto3#any&#34; target=&#34;_blank&#34;&gt;类型 URL&lt;/a&gt; 的概念如下所示，其采用 &lt;code&gt;type.googleapis.com/&amp;lt;resource type&amp;gt;&lt;/code&gt; 的形式，例如 CDS 对应于 &lt;code&gt;type.googleapis.com/envoy.api.v2.Cluster&lt;/code&gt;。在 Envoy 发起的发现请求和管理服务器返回的发现响应中，都包括了资源类型 URL。&lt;/p&gt;

&lt;h4 id=&#34;ack-nack-和版本&#34;&gt;ACK/NACK 和版本&lt;/h4&gt;

&lt;p&gt;每个 Envoy 流以发送一个 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 开始，包括了列表订阅的资源、订阅资源对应的类型 URL、节点标识符和空的 &lt;code&gt;version_info&lt;/code&gt;。EDS 请求示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version_info:
node: { id: envoy }
resource_names:
- foo
- bar
type_url: type.googleapis.com/envoy.api.v2.ClusterLoadAssignment
response_nonce:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;管理服务器可立刻或等待资源就绪时发送 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 作为响应，示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version_info: X
resources:
- foo ClusterLoadAssignment proto encoding
- bar ClusterLoadAssignment proto encoding
type_url: type.googleapis.com/envoy.api.v2.ClusterLoadAssignment
nonce: A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Envoy 在处理 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 响应后，将通过流发送一个新的请求，请求包含应用成功的最后一个版本号和管理服务器提供的 &lt;code&gt;nonce&lt;/code&gt;。如果本次更新已成功应用，则 &lt;code&gt;version_info&lt;/code&gt;的值设置为 X，如下序列图所示：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/simple-ack.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;em&gt;ack 更新&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在此序列图及后续章节中，将统一使用以下缩写格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DiscoveryRequest&lt;/code&gt; ：(V=&lt;code&gt;version_info&lt;/code&gt;，R=&lt;code&gt;resource_names&lt;/code&gt;，N=&lt;code&gt;response_nonce&lt;/code&gt;，T=&lt;code&gt;type_url&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DiscoveryResponse&lt;/code&gt; ： (V=&lt;code&gt;version_info&lt;/code&gt;，R=&lt;code&gt;resources&lt;/code&gt;，N=&lt;code&gt;nonce&lt;/code&gt;，T=&lt;code&gt;type_url&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;
在&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8&#34;&gt;信息安全&lt;/a&gt;中，&lt;strong&gt;Nonce&lt;/strong&gt; 是一个在加密通信只能使用一次的数字。在认证协议中，它往往是一个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA&#34;&gt;随机&lt;/a&gt;或&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA&#34;&gt;伪随机&lt;/a&gt;数，以避免&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB&#34;&gt;重放攻击&lt;/a&gt;。Nonce 也用于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B5%81%E5%AF%86%E7%A0%81&#34;&gt;流密码&lt;/a&gt;以确保安全。如果需要使用相同的密钥加密一个以上的消息，就需要 Nonce 来确保不同的消息与该密钥加密的密钥流不同。（引用自&lt;a href=&#34;https://zh.wikipedia.org/wiki/Nonce&#34;&gt;维基百科&lt;/a&gt;）在本文中 &lt;code&gt;nonce&lt;/code&gt; 是每次更新的数据包的唯一标识。
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;有了版本（&lt;code&gt;version_info&lt;/code&gt;）这个概念，就可以为 Envoy 和管理服务器共享当前应用配置，以及提供了通过 ACK/NACK 来进行配置更新的机制。如果 Envoy 拒绝了配置更新 X，则回复 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#envoy-api-field-discoveryrequest-error-detail&#34; target=&#34;_blank&#34;&gt;error_detail&lt;/a&gt; 及前一个版本号，在本例中为空的初始版本号，&lt;code&gt;error_detail&lt;/code&gt; 包含了有关错误的更加详细的信息：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/simple-nack.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;&lt;em&gt;nack 更新&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;重新发送 DiscoveryRequest 后，API 更新可能会在新版本 Y 上成功应用：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/later-ack.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;每个流都有自己的版本概念，但不同的资源类型不能共享资源版本。在不使用 ADS 的情况下，每个资源类型可能具有不同的版本，因为 Envoy API 允许不同的 EDS/RDS 资源配置指向不同的 &lt;code&gt;ConfigSources&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&#34;何时发送更新&#34;&gt;何时发送更新&lt;/h4&gt;

&lt;p&gt;管理服务器应该只向 Envoy 客户端发送上次 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 后更新过的资源。Envoy 则会根据接受或拒绝 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 的情况，立即回复包含 ACK/NACK 的 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 请求。如果管理服务器不等待更新完成，每次返回相同的资源结果集合，则会导致 Envoy 和管理服务器通讯效率大打折扣。&lt;/p&gt;

&lt;p&gt;在同一个流中，新的 &lt;code&gt;DiscoveryRequests&lt;/code&gt; 将取代此前具有相同资源类型的 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 请求。&lt;strong&gt;这意味着管理服务器只需要响应给定资源类型最新的 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 请求即可。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;资源提示&#34;&gt;资源提示&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;DiscoveryRequest&lt;/code&gt; 中的 &lt;code&gt;resource_names&lt;/code&gt; 信息作为资源提示出现。一些资源类型，例如 &lt;code&gt;Cluster&lt;/code&gt; 和 &lt;code&gt;Listener&lt;/code&gt; 将使用一个空的 &lt;code&gt;resource_names&lt;/code&gt;，因为 Envoy 需要获取对应节点标识的管理服务器的所有 &lt;code&gt;Cluster&lt;/code&gt;（CDS）和 &lt;code&gt;Listener&lt;/code&gt;（LDS）。对于其他资源类型，如 &lt;code&gt;RouteConfigurations&lt;/code&gt;（RDS）和 &lt;code&gt;ClusterLoadAssignments&lt;/code&gt;（EDS），则遵循此前的 CDS/LDS 更新，Envoy 能够通过枚举这些资源找到明确的资源。&lt;/p&gt;

&lt;p&gt;LDS/CDS 资源提示信息将始终为空，并且期望管理服务器的每个响应都提供 &lt;code&gt;LDS/CDS&lt;/code&gt; 资源的完整状态。不存在的 &lt;code&gt;Listener&lt;/code&gt; 或 &lt;code&gt;Cluster&lt;/code&gt; 将被删除。如果 RDS 或 EDS 更新中缺少请求的资源，Envoy 将保留此资源的最后已知值。管理服务器能够从 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 中的节点标识（&lt;code&gt;node.id&lt;/code&gt;）推断出所有所需的 EDS/RDS 资源，在这种情况下，该提示信息可能被丢弃。从 Envoy 的资源角度来看，空的 EDS/RDS &lt;code&gt;DiscoveryResponse&lt;/code&gt; 响应实际上表示一个空的资源。&lt;/p&gt;

&lt;p&gt;当 &lt;code&gt;Listener&lt;/code&gt; 或 &lt;code&gt;Cluster&lt;/code&gt; 被删除时，其对应的 EDS 和 RDS 资源也会在 Envoy 实例中被删除。为使 EDS 资源能被 Envoy 获取或跟踪，就必须存在已经应用过的 &lt;code&gt;Cluster&lt;/code&gt; 定义（如通过 CDS 获取）。RDS 和 &lt;code&gt;Listeners&lt;/code&gt; 之间存在类似的关系（如通过 LDS 获取）。&lt;/p&gt;

&lt;p&gt;对于 EDS/RDS ，Envoy 可以为每个给定类型的资源生成不同的流（如每个 &lt;code&gt;ConfigSource&lt;/code&gt; 都有自己的上游管理服务器集群）或当指定资源类型的请求发送到同一个管理服务器的时候，允许将多个资源请求组合在一起发送。虽然可以单个实现，但管理服务器应具备为每个请求中的给定资源类型处理一个或多个 &lt;code&gt;resource_names&lt;/code&gt; 的能力。下面的两个序列图都可用于获取两个 EDS 资源 &lt;code&gt;{foo，bar}&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/eds-same-stream.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/eds-distinct-stream.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h4 id=&#34;资源更新&#34;&gt;资源更新&lt;/h4&gt;

&lt;p&gt;如上所述，Envoy 可能会更新 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 中出现的 &lt;code&gt;resource_names&lt;/code&gt; 列表，其中 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 是用来 ACK/NACK 管理服务器的特定的 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 。此外，Envoy 后续可能会在给定的 &lt;code&gt;version_info&lt;/code&gt; 上发送额外的 &lt;code&gt;DiscoveryRequests&lt;/code&gt; ，以使用新的资源提示来更新管理服务器。&lt;/p&gt;

&lt;p&gt;例如，如果 Envoy 在 EDS 版本 &lt;strong&gt;X&lt;/strong&gt; 时仅知道集群 &lt;code&gt;foo&lt;/code&gt;，但在随后收到的 CDS 更新时额外获取了集群 &lt;code&gt;bar&lt;/code&gt; ，它可能会为版本 &lt;strong&gt;X&lt;/strong&gt; 发出额外的 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 请求，并将 &lt;code&gt;{foo，bar}&lt;/code&gt; 作为请求的 &lt;code&gt;resource_names&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/cds-eds-resources.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这里可能会出现竞争状况；如果 Envoy 在版本 &lt;strong&gt;X&lt;/strong&gt; 上发布了资源提示更新请求，但在管理服务器处理该请求之前发送了新的版本号为 &lt;strong&gt;Y&lt;/strong&gt; 的响应，针对 &lt;code&gt;version_info&lt;/code&gt; 为 &lt;strong&gt;X&lt;/strong&gt; 的版本，资源提示更新可能会被解释为拒绝 &lt;strong&gt;Y&lt;/strong&gt; 。为避免这种情况，通过使用管理服务器提供的 &lt;code&gt;nonce&lt;/code&gt;，Envoy 可用来保证每个 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 对应到相应的 &lt;code&gt;DiscoveryResponse&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/update-race.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;管理服务器不应该为含有过期 &lt;code&gt;nonce&lt;/code&gt; 的 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 发送 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 响应。如果向 Envoy 发送的 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 中包含了的新 &lt;code&gt;nonce&lt;/code&gt;，则此前的 &lt;code&gt;nonce&lt;/code&gt; 将过期。在确定新版本可用之前，管理服务器不需要向 Envoy 发送更新。同版本的早期请求将会过期。在新版本就绪时，管理服务器可能会处理同一个版本号的多个 &lt;code&gt;DiscoveryRequests&lt;/code&gt; 请求。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/stale-requests.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;上述资源更新序列表明 Envoy 并不能期待其发出的每个 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 都得到 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 响应。&lt;/p&gt;

&lt;h4 id=&#34;最终一致性考虑&#34;&gt;最终一致性考虑&lt;/h4&gt;

&lt;p&gt;由于 Envoy 的 xDS API 采用最终一致性，因此在更新期间可能导致流量被丢弃。例如，如果通过 CDS/EDS 仅获取到了集群 &lt;strong&gt;X&lt;/strong&gt;，而且 &lt;code&gt;RouteConfiguration&lt;/code&gt; 引用了集群 &lt;strong&gt;X&lt;/strong&gt;；在 CDS/EDS 更新集群 &lt;strong&gt;Y&lt;/strong&gt; 配置之前，如果将 &lt;code&gt;RouteConfiguration&lt;/code&gt; 将引用的集群调整为 &lt;strong&gt;Y&lt;/strong&gt; ，那么流量将被吸入黑洞而丢弃，直至集群 &lt;strong&gt;Y&lt;/strong&gt; 被 Envoy 实例获取。&lt;/p&gt;

&lt;p&gt;对某些应用程序，可接受临时的流量丢弃，客户端或其他 Envoy sidecar 的重试可以解决该问题，并不影响业务逻辑。那些对流量丢弃不能容忍的场景，可以通过以下方式避免流量丢失，CDS/EDS 更新同时携带 &lt;strong&gt;X&lt;/strong&gt; 和 &lt;strong&gt;Y&lt;/strong&gt; ，然后发送 RDS 更新从 &lt;strong&gt;X&lt;/strong&gt; 切换到 &lt;strong&gt;Y&lt;/strong&gt; ，此后发送丢弃 &lt;strong&gt;X&lt;/strong&gt; 的 CDS/EDS 更新。&lt;/p&gt;

&lt;p&gt;一般来说，为避免流量丢弃，更新的顺序应该遵循 &lt;code&gt;make before break&lt;/code&gt; 模型，其中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CDS&lt;/code&gt; 首先更新 &lt;code&gt;Cluster&lt;/code&gt; 数据（如果有变化）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EDS&lt;/code&gt; 更新相应 Cluster 的 &lt;code&gt;Endpoint&lt;/code&gt; 信息（如果有变化）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LDS&lt;/code&gt; 更新 CDS/EDS 相应的 &lt;code&gt;Listener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RDS&lt;/code&gt; 最后更新新增 Listener 相关的 &lt;code&gt;Route&lt;/code&gt; 配置&lt;/li&gt;
&lt;li&gt;删除不再使用的 CDS cluster 和 EDS endpoints（不再被引用的 endpoint）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果没有添加新的集群/路由/监听器，或者在更新期间暂时丢弃流量，则可以独立推送 xDS 更新。请注意，在 LDS 更新的情况下，监听器须在接收流量之前被预热，例如如其配置了依赖的路由，则需要先从 RDS 中获取。添加/删除/更新集群信息时，集群也需要进行预热。另一方面，如果管理平面确保路由更新时所引用的集群已经准备就绪，则路由可以不用预热。&lt;/p&gt;

&lt;h3 id=&#34;聚合服务发现-ads&#34;&gt;聚合服务发现（ADS）&lt;/h3&gt;

&lt;p&gt;当管理服务器进行资源分发时，通过上述保证交互顺序的方式来避免流量被丢弃是一项很有挑战的工作。ADS 允许单一管理服务器通过单个 gRPC 流来提供所有的 API 更新。配合仔细规划的更新顺序，ADS 可规避更新过程中的流量丢失。使用 ADS，在单个流上可通过类型 URL 来进行复用多个独立的 &lt;code&gt;DiscoveryRequest&lt;/code&gt;/&lt;code&gt;DiscoveryResponse&lt;/code&gt; 序列。对于任何给定类型的 URL，以上 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 和 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 消息序列都适用。 更新序列可能如下所示：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/ads.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;每个 Envoy 实例可使用单独的 ADS 流。&lt;/p&gt;

&lt;p&gt;最小化 ADS 配置的 &lt;code&gt;bootstrap.yaml&lt;/code&gt; 片段示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;node:
  id: &amp;lt;node identifier&amp;gt;
dynamic_resources:
  cds_config: {ads: {}}
  lds_config: {ads: {}}
  ads_config:
    api_type: GRPC
    grpc_services:
      envoy_grpc:
        cluster_name: ads_cluster
static_resources:
  clusters:
  - name: ads_cluster
    connect_timeout: { seconds: 5 }
    type: STATIC
    hosts:
    - socket_address:
        address: &amp;lt;ADS management server IP address&amp;gt;
        port_value: &amp;lt;ADS management server port&amp;gt;
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
admin:
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;增量-xds&#34;&gt;增量 xDS&lt;/h3&gt;

&lt;p&gt;增量 xDS 是可用于 ADS、CDS 和 RDS 的单独 xDS 端点，允许以下操作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xDS 客户端对跟踪资源列表进行增量更新。这支持 Envoy 按需/惰性地请求额外资源（例如，当与未知集群相对应的请求到达时）。&lt;/li&gt;
&lt;li&gt;xDS 服务器可以增量更新客户端上的资源。这可以实现 xDS 资源可伸缩性的目标。管理服务器只需交付更改的单个集群，而不是在修改单个集群时交付所有上万个集群。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;xDS 增量 &lt;code&gt;session&lt;/code&gt; 始终位于 gRPC 双向流的上下文中。这允许 xDS 服务器能够跟踪到连接的 xDS 客户端的状态。xDS REST 版本（v1）不支持增量。在增量 xDS 中，nonce 字段是必需的，用于将 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#incrementaldiscoveryresponse&#34; target=&#34;_blank&#34;&gt;IncrementalDiscoveryResponse&lt;/a&gt; 与关联的 ACK 或 NACK &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#incrementaldiscoveryrequest&#34; target=&#34;_blank&#34;&gt;IncrementalDiscoveryRequest&lt;/a&gt; 进行匹配。IncrementalDiscoveryResponse 中的响应消息级别（system_version_info）仅用于调试目的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IncrementalDiscoveryRequest&lt;/code&gt; 可在以下 3 种情况下发送：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;xDS 双向 gRPC 流的初始消息。&lt;/li&gt;
&lt;li&gt;作为对先前的 &lt;code&gt;IncrementalDiscoveryResponse&lt;/code&gt; 的 ACK 或 NACK 响应。在这种情况下，&lt;code&gt;response_nonce&lt;/code&gt; 被设置为响应中的 nonce 值。到底是 ACK 还是 NACK 可由 &lt;code&gt;error_detail&lt;/code&gt; 字段是否出现来区分。&lt;/li&gt;
&lt;li&gt;客户端自发的 &lt;code&gt;IncrementalDiscoveryRequest&lt;/code&gt;。此场景下可以从跟踪的 resource_names 集合中动态添加或删除元素。此时必须忽略 &lt;code&gt;response_nonce&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在下面的示例中，客户端连接并接收它的第一个更新并 ACK。第二次更新失败，客户端发送 NACK 拒绝更新。xDS客户端后续会自发地请求 &lt;code&gt;wc&lt;/code&gt; 相关资源。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/incremental.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在下面的示例中，当 xDS 客户端断开重新连接时，支持增量的 xDS 客户端可能会告诉服务器其已经获取的资源从而避免服务端通过网络重新发送它们。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/incremental-reconnect.svg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-rest-json-轮询订阅&#34;&gt;3. REST-JSON 轮询订阅&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;单个 xDS API 可以通过 REST 端点进行同步（长）轮询。除了无持久流与管理服务器交互外，消息交互顺序与上述两个订阅方式相似。在任何时间点，只存在一个未完成的请求，因此响应消息中的 &lt;code&gt;nonce&lt;/code&gt; 在 REST-JSON 中是可选的。&lt;code&gt;DiscoveryRequest&lt;/code&gt; 和 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 的消息编码遵循 &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto3#json&#34; target=&#34;_blank&#34;&gt;JSON 变换 proto3&lt;/a&gt; 规范。ADS 不支持 REST-JSON 轮询订阅。&lt;/p&gt;

&lt;p&gt;当轮询周期设置为较小的值时，为了进行长轮询，这时要求避免发送 &lt;code&gt;DiscoveryResponse&lt;/code&gt;，&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/XDS_PROTOCOL.md#when-to-send-an-update&#34; target=&#34;_blank&#34;&gt;除非发生了对请求的资源的更改&lt;/a&gt;。&lt;/p&gt;

&lt;style&gt;
h1,h2,h3,h4,h5,h6 {
    font-family: &#39;Open Sans&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif;
    font-weight: 800;
    margin-top: 35px;
}
h2 {
    display: block;
    font-size: 1.5em;
    margin-block-start: 0.83em;
    margin-block-end: 0.83em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    font-weight: bold;
}
h2::before {
    content: &#34;#&#34;;
    margin-right: 5px;
    color: #2d96bd;
}
li {
    line-height: 2;
}
#blockquote {
    padding: 10px 20px;
    margin: 0 0 20px;
    font-size: 14px;
    border-left: 5px solid #986dbd;
}
#blue {
color: #2780e3;
font-size: 17px
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Istio 流量管理实现机制深度解析</title>
      <link>https://www.yangcs.net/posts/istio-traffic-management-impl-intro/</link>
      <pubDate>Tue, 09 Oct 2018 20:00:17 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/istio-traffic-management-impl-intro/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p id=&#34;div-border-left-red&#34;&gt;本文转载自 &lt;a href=&#34;https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/&#34; target=&#34;_blank&#34;&gt;赵化冰的博客&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Istio 作为一个 service mesh 开源项目,其中最重要的功能就是对网格中微服务之间的流量进行管理,包括服务发现,请求路由和服务间的可靠通信。Istio 实现了 service mesh 的控制平面，并整合 Envoy 开源项目作为数据平面的 sidecar，一起对流量进行控制。&lt;/p&gt;

&lt;p&gt;Istio 体系中流量管理配置下发以及流量规则如何在数据平面生效的机制相对比较复杂，通过官方文档容易管中窥豹，难以了解其实现原理。本文尝试结合系统架构、配置文件和代码对 Istio 流量管理的架构和实现机制进行分析，以达到从整体上理解 Pilot 和 Envoy 的流量管理机制的目的。&lt;/p&gt;

&lt;h2 id=&#34;pilot高层架构&#34;&gt;Pilot高层架构&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Istio 控制平面中负责流量管理的组件为 &lt;code&gt;Pilot&lt;/code&gt;，Pilot 的高层架构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zhaohuabing.com/img/2018-09-25-istio-traffic-management-impl-intro/pilot-architecture.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;Pilot Architecture（来自 &lt;a href=&#34;https://istio.io/docs/concepts/traffic-management/&#34; target=&#34;_blank&#34;&gt;Isio官网文档&lt;/a&gt;)&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;根据上图,Pilot 主要实现了下述功能：&lt;/p&gt;

&lt;h3 id=&#34;统一的服务模型&#34;&gt;统一的服务模型&lt;/h3&gt;

&lt;p&gt;Pilot 定义了网格中服务的标准模型，这个标准模型独立于各种底层平台。由于有了该标准模型，各个不同的平台可以通过适配器和 Pilot 对接，将自己特有的服务数据格式转换为标准格式，填充到 Pilot 的标准模型中。&lt;/p&gt;

&lt;p&gt;例如 Pilot 中的 Kubernetes 适配器通过 &lt;code&gt;Kubernetes API&lt;/code&gt; 服务器得到 kubernetes 中 service 和 pod 的相关信息，然后翻译为标准模型提供给 Pilot 使用。通过适配器模式，Pilot 还可以从 &lt;code&gt;Mesos&lt;/code&gt;, &lt;code&gt;Cloud Foundry&lt;/code&gt;, &lt;code&gt;Consul&lt;/code&gt; 等平台中获取服务信息，还可以开发适配器将其他提供服务发现的组件集成到 Pilot 中。&lt;/p&gt;

&lt;h3 id=&#34;标准数据平面-api&#34;&gt;标准数据平面 API&lt;/h3&gt;

&lt;p&gt;Pilo 使用了一套起源于 Envoy 项目的标准数据平面 API 来将服务信息和流量规则下发到数据平面的 &lt;code&gt;sidecar&lt;/code&gt; 中。&lt;/p&gt;

&lt;p&gt;通过采用该标准 API，Istio 将控制平面和数据平面进行了解耦，为多种数据平面 sidecar 实现提供了可能性。事实上基于该标准 API 已经实现了多种 Sidecar 代理和 Istio 的集成，除 Istio 目前集成的 Envoy 外，还可以和 &lt;code&gt;Linkerd&lt;/code&gt;, &lt;code&gt;Nginmesh&lt;/code&gt; 等第三方通信代理进行集成，也可以基于该 API 自己编写 Sidecar 实现。&lt;/p&gt;

&lt;p&gt;控制平面和数据平面解耦是 Istio 后来居上，风头超过 Service mesh 鼻祖 &lt;code&gt;Linkerd&lt;/code&gt; 的一招妙棋。Istio 站在了控制平面的高度上，而 Linkerd 则成为了可选的一种 sidecar 实现，可谓&lt;strong&gt;降维打击&lt;/strong&gt;的一个典型成功案例！&lt;/p&gt;

&lt;p&gt;数据平面标准 API 也有利于生态圈的建立，开源，商业的各种 sidecar 以后可能百花齐放，用户也可以根据自己的业务场景选择不同的 sidecar 和控制平面集成，如高吞吐量的，低延迟的，高安全性的等等。有实力的大厂商可以根据该 API 定制自己的 sidecar，例如蚂蚁金服开源的 Golang 版本的 Sidecar &lt;code&gt;MOSN&lt;/code&gt;(Modular Observable Smart Netstub)（&lt;code&gt;SOFAMesh&lt;/code&gt; 中 Golang 版本的 Sidecar)；小厂商则可以考虑采用成熟的开源项目或者提供服务的商业 sidecar 实现。&lt;/p&gt;

&lt;p id=&#34;blockquote&#34;&gt;Istio 和 Envoy 项目联合制定了 &lt;code&gt;Envoy V2 API&lt;/code&gt;,并采用该 API 作为 Istio 控制平面和数据平面流量管理的标准接口。&lt;/p&gt;

&lt;h3 id=&#34;业务-dsl-语言&#34;&gt;业务 DSL 语言&lt;/h3&gt;

&lt;p&gt;Pilot 还定义了一套 &lt;code&gt;DSL&lt;/code&gt;（Domain Specific Language）语言，DSL 语言提供了面向业务的高层抽象，可以被运维人员理解和使用。运维人员使用该 DSL 定义流量规则并下发到 Pilot，这些规则被 Pilot 翻译成数据平面的配置，再通过标准 API 分发到 Envoy 实例，可以在运行期对微服务的流量进行控制和调整。&lt;/p&gt;

&lt;p&gt;Pilot 的规则 DSL 是采用 K8S API Server 中的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34;&gt;Custom Resource (CRD)&lt;/a&gt; 实现的，因此和其他资源类型如 Service，Pod 和 Deployment 的创建和使用方法类似，都可以用 &lt;code&gt;Kubectl&lt;/code&gt; 进行创建。&lt;/p&gt;

&lt;p&gt;通过运用不同的流量规则，可以对网格中微服务进行精细化的流量控制，如按版本分流，断路器，故障注入，灰度发布等。&lt;/p&gt;

&lt;h2 id=&#34;istio-流量管理相关组件&#34;&gt;Istio 流量管理相关组件&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;我们可以通过下图了解 Istio 流量管理涉及到的相关组件。虽然该图来自 &lt;code&gt;Istio Github old pilot repo&lt;/code&gt;, 但图中描述的组件及流程和目前 Pilot 的最新代码的架构基本是一致的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ws1.sinaimg.cn/large/006tKfTcgy1ftppxdcmwvj31kw0vvtdl.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;Pilot Design Overview (来自 &lt;a href=&#34;https://github.com/istio/old_pilot_repo/blob/master/doc/design.md&#34; target=&#34;_blank&#34;&gt;Istio old_pilot_repo&lt;/a&gt;)&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;图例说明：图中&lt;font color=red&gt;红色&lt;/font&gt;的线表示控制流，&lt;strong&gt;黑色&lt;/strong&gt;的线表示数据流。&lt;font color=blue&gt;蓝色&lt;/font&gt;部分为和Pilot相关的组件。&lt;/p&gt;

&lt;p&gt;从上图可以看到，Istio 中和流量管理相关的有以下组件：&lt;/p&gt;

&lt;h3 id=&#34;控制平面组件&#34;&gt;控制平面组件&lt;/h3&gt;

&lt;h4 id=&#34;discovery-services&#34;&gt;Discovery Services&lt;/h4&gt;

&lt;p&gt;对应的 docker 镜像为 &lt;code&gt;gcr.io/istio-release/pilot&lt;/code&gt;,进程为 &lt;code&gt;pilot-discovery&lt;/code&gt;，该组件的功能包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从 &lt;code&gt;Service provider&lt;/code&gt;（如kubernetes或者consul）中获取服务信息&lt;/li&gt;
&lt;li&gt;从 K8S API Server 中获取流量规则（K8S CRD Resource）&lt;/li&gt;
&lt;li&gt;将服务信息和流量规则转化为数据平面可以理解的格式，通过标准的数据平面 API 下发到网格中的各个 sidecar 中&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;k8s-api-server&#34;&gt;K8S API Server&lt;/h4&gt;

&lt;p&gt;提供 Pilot 相关的 CRD Resource 的增、删、改、查。和 Pilot 相关的 &lt;code&gt;CRD&lt;/code&gt; 有以下几种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id=&#34;inline-blue&#34;&gt;Virtualservice&lt;/span&gt; : 用于定义路由规则，如根据来源或 Header 制定规则，或在不同服务版本之间分拆流量。&lt;/li&gt;
&lt;li&gt;&lt;span id=&#34;inline-blue&#34;&gt;DestinationRule&lt;/span&gt; : 定义目的服务的配置策略以及可路由子集。策略包括断路器、负载均衡以及 TLS 等。&lt;/li&gt;
&lt;li&gt;&lt;span id=&#34;inline-blue&#34;&gt;ServiceEntry&lt;/span&gt; : 用 &lt;a href=&#34;https://istio.io/docs/reference/config/istio.networking.v1alpha3/#ServiceEntry&#34; target=&#34;_blank&#34;&gt;ServiceEntry&lt;/a&gt; 可以向 Istio 中加入附加的服务条目，以使网格内可以向 Istio 服务网格之外的服务发出请求。&lt;/li&gt;
&lt;li&gt;&lt;span id=&#34;inline-blue&#34;&gt;Gateway&lt;/span&gt; : 为网格配置网关，以允许一个服务可以被网格外部访问。&lt;/li&gt;
&lt;li&gt;&lt;span id=&#34;inline-blue&#34;&gt;EnvoyFilter&lt;/span&gt; : 可以为 Envoy 配置过滤器。由于 Envoy 已经支持 &lt;code&gt;Lua&lt;/code&gt; 过滤器，因此可以通过 &lt;code&gt;EnvoyFilter&lt;/code&gt; 启用 Lua 过滤器，动态改变 Envoy 的过滤链行为。我之前一直在考虑如何才能动态扩展 Envoy 的能力，EnvoyFilter 提供了很灵活的扩展性。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;数据平面组件&#34;&gt;数据平面组件&lt;/h3&gt;

&lt;p&gt;在数据平面有两个进程 &lt;code&gt;Pilot-agent&lt;/code&gt; 和 &lt;code&gt;envoy&lt;/code&gt;，这两个进程被放在一个 docker 容器 &lt;code&gt;gcr.io/istio-release/proxyv2&lt;/code&gt; 中。&lt;/p&gt;

&lt;h4 id=&#34;pilot-agent&#34;&gt;Pilot-agent&lt;/h4&gt;

&lt;p&gt;该进程根据 K8S API Server 中的配置信息生成 Envoy 的配置文件，并负责启动 Envoy 进程。注意 Envoy 的大部分配置信息都是通过 &lt;code&gt;xDS&lt;/code&gt; 接口从 Pilot 中动态获取的，因此 Agent 生成的只是用于初始化 Envoy 的少量静态配置。在后面的章节中，本文将对 Agent 生成的 Envoy 配置文件进行进一步分析。&lt;/p&gt;

&lt;h4 id=&#34;envoy&#34;&gt;Envoy&lt;/h4&gt;

&lt;p&gt;Envoy 由 &lt;code&gt;Pilot-agent&lt;/code&gt; 进程启动，启动后，Envoy 读取 Pilot-agent 为它生成的配置文件，然后根据该文件的配置获取到 Pilot 的地址，通过数据平面标准 API 的 xDS 接口从 pilot 拉取动态配置信息，包括路由（route），监听器（listener），服务集群（cluster）和服务端点（endpoint）。Envoy 初始化完成后，就根据这些配置信息对微服务间的通信进行寻址和路由。&lt;/p&gt;

&lt;h3 id=&#34;命令行工具&#34;&gt;命令行工具&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;kubectl&lt;/code&gt; 和 &lt;code&gt;istioctl&lt;/code&gt;，由于 Istio 的配置是基于 K8S 的 &lt;code&gt;CRD&lt;/code&gt;，因此可以直接采用 kubectl 对这些资源进行操作。Istioctl 则针对 Istio 对 CRD 的操作进行了一些封装。Istioctl 支持的功能参见该 &lt;a href=&#34;https://istio.io/docs/reference/commands/istioctl&#34; target=&#34;_blank&#34;&gt;表格&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;数据平面标准-api&#34;&gt;数据平面标准 API&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;前面讲到，Pilot 采用了一套标准的 API 来向数据平面 Sidecar 提供服务发现，负载均衡池和路由表等流量管理的配置信息。该标准 API 的文档参见 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/overview/v2_overview&#34; target=&#34;_blank&#34;&gt;Envoy v2 API&lt;/a&gt;。&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/tree/master/envoy/api/v2&#34; target=&#34;_blank&#34;&gt;Data Plane API Protocol Buffer Definition&lt;/a&gt; 给出了 &lt;code&gt;v2 grpc&lt;/code&gt; 接口相关的数据结构和接口定义。&lt;/p&gt;

&lt;p id=&#34;blockquote&#34;&gt;Istio 早期采用了 Envoy v1 API，目前的版本中则使用 V2 API，V1 已被废弃。&lt;/p&gt;

&lt;h3 id=&#34;基本概念和术语&#34;&gt;基本概念和术语&lt;/h3&gt;

&lt;p&gt;首先我们需要了解数据平面 API 中涉及到的一些基本概念：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Host&lt;/code&gt; ：能够进行网络通信的实体（如移动设备、服务器上的应用程序）。在此文档中，主机是逻辑网络应用程序。一块物理硬件上可能运行有多个主机，只要它们是可以独立寻址的。在 EDS 接口中，也使用 &lt;code&gt;Endpoint&lt;/code&gt; 来表示一个应用实例，对应一个 IP+Port 的组合。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Downstream&lt;/code&gt; : 下游主机连接到 Envoy，发送请求并接收响应。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Upstream&lt;/code&gt; : 上游主机接收来自 Envoy 的连接和请求，并返回响应。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Listener&lt;/code&gt; : 监听器是命名网地址（例如，端口、unix domain socket 等)，可以被下游客户端连接。Envoy 暴露一个或者多个监听器给下游主机连接。在 Envoy 中，Listener 可以绑定到端口上直接对外服务，也可以不绑定到端口上，而是接收其他 listener 转发的请求。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cluster&lt;/code&gt; : 集群是指 Envoy 连接到的逻辑上相同的一组上游主机。Envoy 通过服务发现来发现集群的成员。可以选择通过主动健康检查来确定集群成员的健康状态。Envoy 通过负载均衡策略决定将请求路由到哪个集群成员。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;xds-服务接口&#34;&gt;XDS 服务接口&lt;/h3&gt;

&lt;p&gt;Istio 数据平面 API 定义了 xDS 服务接口，Pilot 通过该接口向数据平面 sidecar 下发动态配置信息，以对 Mesh 中的数据流量进行控制。xDS 中的 DS 表示 &lt;code&gt;discovery service&lt;/code&gt;，即发现服务，表示 &lt;code&gt;xDS&lt;/code&gt; 接口使用动态发现的方式提供数据平面所需的配置数据。而 x 则是一个代词，表示有多种 discover service。这些发现服务及对应的数据结构如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LDS&lt;/code&gt; (Listener Discovery Service) : &lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/lds.proto&#34; target=&#34;_blank&#34;&gt;envoy.api.v2.Listener&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CDS&lt;/code&gt; (Cluster Discovery Service) : &lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/rds.proto&#34; target=&#34;_blank&#34;&gt;envoy.api.v2.RouteConfiguration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EDS&lt;/code&gt; (Endpoint Discovery Service) : &lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cds.proto&#34; target=&#34;_blank&#34;&gt;envoy.api.v2.Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RDS&lt;/code&gt; (Route Discovery Service) : &lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/eds.proto&#34; target=&#34;_blank&#34;&gt;envoy.api.v2.ClusterLoadAssignment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;xds-服务接口的最终一致性考虑&#34;&gt;XDS 服务接口的最终一致性考虑&lt;/h3&gt;

&lt;p&gt;xDS 的几个接口是相互独立的，接口下发的配置数据是最终一致的。但在配置更新过程中，可能暂时出现各个接口的数据不匹配的情况，从而导致部分流量在更新过程中丢失。&lt;/p&gt;

&lt;p&gt;设想这种场景：在 &lt;code&gt;CDS/EDS&lt;/code&gt; 只知道 cluster X 的情况下，&lt;code&gt;RDS&lt;/code&gt; 的一条路由配置将指向Cluster X 的流量调整到了 Cluster Y。在 CDS/EDS 向 Mesh 中 Envoy 提供 Cluster Y 的更新前，这部分导向 Cluster Y 的流量将会因为 Envoy 不知道 Cluster Y 的信息而被丢弃。&lt;/p&gt;

&lt;p&gt;对于某些应用来说，短暂的部分流量丢失是可以接受的，例如客户端重试可以解决该问题，并不影响业务逻辑。对于另一些场景来说，这种情况可能无法容忍。可以通过调整 xDS 接口的更新逻辑来避免该问题，对上面的情况，可以先通过 CDS/EDS 更新 Y Cluster，然后再通过 RDS 将 X 的流量路由到Y。&lt;/p&gt;

&lt;p&gt;一般来说，为了避免 Envoy 配置数据更新过程中出现流量丢失的情况，xDS 接口应采用下面的顺序：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CDS&lt;/code&gt; 首先更新 &lt;code&gt;Cluster&lt;/code&gt; 数据（如果有变化）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EDS&lt;/code&gt; 更新相应 Cluster 的 &lt;code&gt;Endpoint&lt;/code&gt; 信息（如果有变化）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LDS&lt;/code&gt; 更新 CDS/EDS 相应的 &lt;code&gt;Listener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RDS&lt;/code&gt; 最后更新新增 Listener 相关的 &lt;code&gt;Route&lt;/code&gt; 配置&lt;/li&gt;
&lt;li&gt;删除不再使用的 CDS cluster 和 EDS endpoints&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ads-聚合发现服务&#34;&gt;ADS 聚合发现服务&lt;/h3&gt;

&lt;p&gt;保证控制平面下发数据一致性，避免流量在配置更新过程中丢失的另一个方式是使用 ADS(Aggregated Discovery Services)，即聚合的发现服务。&lt;code&gt;ADS&lt;/code&gt; 通过一个 gRPC 流来发布所有的配置更新，以保证各个 xDS 接口的调用顺序，避免由于 xDS 接口更新顺序导致的配置数据不一致问题。&lt;/p&gt;

&lt;p&gt;关于 XDS 接口的详细介绍可参考 &lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/XDS_PROTOCOL.md&#34; target=&#34;_blank&#34;&gt;xDS REST and gRPC protocol&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;bookinfo-示例程序分析&#34;&gt;Bookinfo 示例程序分析&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;下面我们以 &lt;code&gt;Bookinfo&lt;/code&gt; 为例对 Istio 中的流量管理实现机制，以及控制平面和数据平面的交互进行进一步分析。&lt;/p&gt;

&lt;h3 id=&#34;bookinfo-程序结构&#34;&gt;Bookinfo 程序结构&lt;/h3&gt;

&lt;p&gt;下图显示了 Bookinfo 示例程序中各个组件的 IP 地址，端口和调用关系，以用于后续的分析。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zhaohuabing.com/img/2018-09-25-istio-traffic-management-impl-intro/bookinfo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;xds-接口调试方法&#34;&gt;xDS 接口调试方法&lt;/h3&gt;

&lt;p&gt;首先我们看看如何对 xDS 接口的相关数据进行查看和分析。Envoy v2 接口采用了 &lt;code&gt;gRPC&lt;/code&gt;，由于 gRPC 是基于二进制的 RPC 协议，无法像 V1 的 &lt;code&gt;REST&lt;/code&gt; 接口一样通过 curl 和浏览器进行进行分析。但我们还是可以通过 Pilot 和 Envoy 的调试接口查看 xDS 接口的相关数据。&lt;/p&gt;

&lt;h4 id=&#34;pilot-调试方法&#34;&gt;Pilot 调试方法&lt;/h4&gt;

&lt;p&gt;Pilot 在 &lt;code&gt;9093&lt;/code&gt; 端口提供了下述 &lt;a href=&#34;https://github.com/istio/istio/tree/master/pilot/pkg/proxy/envoy/v2&#34; target=&#34;_blank&#34;&gt;调试接口&lt;/a&gt; 下述方法查看 xDS 接口相关数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PILOT=istio-pilot.istio-system:9093

# What is sent to envoy
# Listeners and routes
curl $PILOT/debug/adsz

# Endpoints
curl $PILOT/debug/edsz

# Clusters
curl $PILOT/debug/cdsz
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;envoy-调试方法&#34;&gt;Envoy 调试方法&lt;/h4&gt;

&lt;p&gt;Envoy 提供了管理接口，缺省为 localhost 的 &lt;code&gt;15000&lt;/code&gt; 端口，可以获取 listener，cluster 以及完整的配置数据导出功能。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec productpage-v1-54b8b9f55-bx2dq -c istio-proxy curl http://127.0.0.1:15000/help

  /: Admin home page
  /certs: print certs on machine
  /clusters: upstream cluster status
  /config_dump: dump current Envoy configs (experimental)
  /cpuprofiler: enable/disable the CPU profiler
  /healthcheck/fail: cause the server to fail health checks
  /healthcheck/ok: cause the server to pass health checks
  /help: print out list of admin commands
  /hot_restart_version: print the hot restart compatibility version
  /listeners: print listener addresses
  /logging: query/change logging levels
  /quitquitquit: exit the server
  /reset_counters: reset all counters to zero
  /runtime: print runtime values
  /runtime_modify: modify runtime values
  /server_info: print server version/status information
  /stats: print server stats
  /stats/prometheus: print server stats in prometheus format
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入 productpage pod 中的 istio-proxy(Envoy) container，可以看到有下面的监听端口：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;9080&lt;/code&gt; : productpage 进程对外提供的服务端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;15001&lt;/code&gt; : Envoy 的入口监听器，iptable 会将 pod 的流量导入该端口中由 Envoy 进行处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;15000&lt;/code&gt; : Envoy 管理端口，该端口绑定在本地环回地址上，只能在 Pod 内访问。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec productpage-v1-76474f6fb7-j8fm4 -c istio-proxy -- ss -tulnp

Netid  State      Recv-Q Send-Q Local Address:Port               Peer Address:Port
tcp    LISTEN     0      128    127.0.0.1:15000                 *:*                   users:((&amp;quot;envoy&amp;quot;,pid=12,fd=9))
tcp    LISTEN     0      128       *:9080                  *:*
tcp    LISTEN     0      128       *:15001                 *:*                   users:((&amp;quot;envoy&amp;quot;,pid=12,fd=85))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;envoy-启动过程分析&#34;&gt;Envoy 启动过程分析&lt;/h3&gt;

&lt;p&gt;Istio 通过 K8s 的 &lt;a href=&#34;https://www.yangcs.net/posts/kubernetes-extensible-admission/&#34; target=&#34;_blank&#34;&gt;Admission webhook&lt;/a&gt; 机制实现了 sidecar 的自动注入，Mesh 中的每个微服务会被加入 Envoy 相关的容器。下面是 &lt;code&gt;Productpage&lt;/code&gt; 微服务的 Pod 内容，可见除 productpage 之外，Istio 还在该 Pod 中注入了两个容器 &lt;code&gt;gcr.io/istio-release/proxy_init&lt;/code&gt; 和 &lt;code&gt;gcr.io/istio-release/proxyv2&lt;/code&gt;。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;下面 Pod description 中只保留了需要关注的内容，删除了其它不重要的部分。为方便查看，本文中后续的其它配置文件以及命令行输出也会进行类似处理。&lt;/p&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl describe pod productpage-v1-54b8b9f55-bx2dq

Name:               productpage-v1-54b8b9f55-bx2dq
Namespace:          default
Init Containers:
  istio-init:
    Image:         gcr.io/istio-release/proxy_init:1.0.0
      Args:
      -p
      15001
      -u
      1337
      -m
      REDIRECT
      -i
      *
      -x

      -b
      9080,
      -d

Containers:
  productpage:
    Image:          istio/examples-bookinfo-productpage-v1:1.8.0
    Port:           9080/TCP

  istio-proxy:
    Image:         gcr.io/istio-release/proxyv2:1.0.0
    Args:
      proxy
      sidecar
      --configPath
      /etc/istio/proxy
      --binaryPath
      /usr/local/bin/envoy
      --serviceCluster
      productpage
      --drainDuration
      45s
      --parentShutdownDuration
      1m0s
      --discoveryAddress
      istio-pilot.istio-system:15007
      --discoveryRefreshDelay
      1s
      --zipkinAddress
      zipkin.istio-system:9411
      --connectTimeout
      10s
      --statsdUdpAddress
      istio-statsd-prom-bridge.istio-system:9125
      --proxyAdminPort
      15000
      --controlPlaneAuthPolicy
      NONE
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;proxy-init&#34;&gt;Proxy_init&lt;/h4&gt;

&lt;p&gt;Productpage 的 Pod 中有一个 InitContainer &lt;code&gt;proxy_init&lt;/code&gt;，&lt;code&gt;InitContrainer&lt;/code&gt; 是 K8S 提供的机制，用于在 Pod 中执行一些初始化任务.在 Initialcontainer 执行完毕并退出后，才会启动 Pod 中的其它 container。&lt;/p&gt;

&lt;p&gt;我们看一下 proxy_init 容器中的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker image inspect gcr.io/istio-release/proxy_init:1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;RepoTags&amp;quot;: [
            &amp;quot;gcr.io/istio-release/proxy_init:1.0.0&amp;quot;
        ],

        &amp;quot;ContainerConfig&amp;quot;: {
            &amp;quot;Env&amp;quot;: [
                &amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;quot;
            ],
            &amp;quot;Cmd&amp;quot;: [
                &amp;quot;/bin/sh&amp;quot;,
                &amp;quot;-c&amp;quot;,
                &amp;quot;#(nop) &amp;quot;,
                &amp;quot;ENTRYPOINT [\&amp;quot;/usr/local/bin/istio-iptables.sh\&amp;quot;]&amp;quot;
            ],
            &amp;quot;Entrypoint&amp;quot;: [
                &amp;quot;/usr/local/bin/istio-iptables.sh&amp;quot;
            ],
        },
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上面的命令行输出可以看到，Proxy_init 中执行的命令是 &lt;code&gt;istio-iptables.sh&lt;/code&gt;，该脚本源码较长，就不列出来了，有兴趣可以在 Istio 源码仓库的 &lt;a href=&#34;https://github.com/istio/istio/blob/master/tools/deb/istio-iptables.sh&#34; target=&#34;_blank&#34;&gt;tools/deb/istio-iptables.sh&lt;/a&gt; 查看。&lt;/p&gt;

&lt;p&gt;该脚本的作用是通过配置 iptables 来劫持 Pod 中的流量。结合前面 Pod 中该容器的命令行参数 &lt;code&gt;-p 15001&lt;/code&gt;，可以得知 Pod 中的数据流量被 iptables 拦截，并发向 Envoy 的 15001 端口。 &lt;code&gt;-u 1337&lt;/code&gt; 参数用于排除用户 ID 为 1337，即 Envoy 自身的流量，以避免 Iptables 把 Envoy 发出的数据又重定向到 Envoy，形成死循环。&lt;/p&gt;

&lt;h4 id=&#34;proxyv2&#34;&gt;Proxyv2&lt;/h4&gt;

&lt;p&gt;前面提到，该容器中有两个进程 Pilot-agent 和 envoy。我们进入容器中看看这两个进程的相关信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec productpage-v1-54b8b9f55-bx2dq -c istio-proxy -- ps -ef

UID        PID  PPID  C STIME TTY          TIME CMD
istio-p+     1     0  0 Sep06 ?        00:00:00 /usr/local/bin/pilot-agent proxy sidecar --configPath /etc/istio/proxy --binaryPath /usr/local/bin/envoy --serviceCluster productpage --drainDuration 45s --parentShutdownDuration 1m0s --discoveryAddress istio-pilot.istio-system:15007 --discoveryRefreshDelay 1s --zipkinAddress zipkin.istio-system:9411 --connectTimeout 10s --statsdUdpAddress istio-statsd-prom-bridge.istio-system:9125 --proxyAdminPort 15000 --controlPlaneAuthPolicy NONE
istio-p+    13     1  0 Sep06 ?        00:47:37 /usr/local/bin/envoy -c /etc/istio/proxy/envoy-rev0.json --restart-epoch 0 --drain-time-s 45 --parent-shutdown-time-s 60 --service-cluster productpage --service-node sidecar~192.168.206.23~productpage-v1-54b8b9f55-bx2dq.default~default.svc.cluster.local --max-obj-name-len 189 -l warn --v2-config-only
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Envoy 的大部分配置都是 &lt;code&gt;dynamic resource&lt;/code&gt;，包括网格中服务相关的 service cluster, listener, route 规则等。这些 dynamic resource 是通过 xDS 接口从 Istio 控制平面中动态获取的。但 Envoy 如何知道 xDS server 的地址呢？这是在 Envoy 初始化配置文件中以 &lt;code&gt;static resource&lt;/code&gt; 的方式配置的。&lt;/p&gt;

&lt;h4 id=&#34;envoy-初始配置文件&#34;&gt;Envoy 初始配置文件&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Pilot-agent&lt;/code&gt; 进程根据启动参数和 K8S API Server 中的配置信息生成 Envoy 的初始配置文件，并负责启动 Envoy 进程。从 ps 命令输出可以看到 Pilot-agent 在启动 Envoy 进程时传入了 &lt;code&gt;pilot&lt;/code&gt; 地址和 &lt;code&gt;zipkin&lt;/code&gt; 地址，并为 Envoy 生成了一个初始化配置文件 &lt;code&gt;envoy-rev0.json&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Pilot agent 生成初始化配置文件的代码： &lt;a href=&#34;https://github.com/istio/istio/blob/release-1.0/pkg/bootstrap/bootstrap_config.go&#34; target=&#34;_blank&#34;&gt;https://github.com/istio/istio/blob/release-1.0/pkg/bootstrap/bootstrap_config.go&lt;/a&gt; 137行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// WriteBootstrap generates an envoy config based on config and epoch, and returns the filename.
// TODO: in v2 some of the LDS ports (port, http_port) should be configured in the bootstrap.
func WriteBootstrap(config *meshconfig.ProxyConfig, node string, epoch int, pilotSAN []string, opts map[string]interface{}) (string, error) {
	if opts == nil {
		opts = map[string]interface{}{}
	}
	if err := os.MkdirAll(config.ConfigPath, 0700); err != nil {
		return &amp;quot;&amp;quot;, err
	}
	// attempt to write file
	fname := configFile(config.ConfigPath, epoch)

	cfg := config.CustomConfigFile
	if cfg == &amp;quot;&amp;quot; {
		cfg = config.ProxyBootstrapTemplatePath
	}
	if cfg == &amp;quot;&amp;quot; {
		cfg = DefaultCfgDir
	}
	......

	if config.StatsdUdpAddress != &amp;quot;&amp;quot; {
		h, p, err = GetHostPort(&amp;quot;statsd UDP&amp;quot;, config.StatsdUdpAddress)
		if err != nil {
			return &amp;quot;&amp;quot;, err
		}
		StoreHostPort(h, p, &amp;quot;statsd&amp;quot;, opts)
	}

	fout, err := os.Create(fname)
	if err != nil {
		return &amp;quot;&amp;quot;, err
	}

	// Execute needs some sort of io.Writer
	err = t.Execute(fout, opts)
	return fname, err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以使用下面的命令将 productpage pod 中该文件导出来查看其中的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec productpage-v1-54b8b9f55-bx2dq -c istio-proxy -- cat /etc/istio/proxy/envoy-rev0.json &amp;gt; envoy-rev0.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置文件的结构如图所示：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://zhaohuabing.com/img/2018-09-25-istio-traffic-management-impl-intro/envoy-rev0.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;其中各个配置节点的内容如下：&lt;/p&gt;

&lt;p id=blue&gt;Node&lt;/p&gt;

&lt;p&gt;包含了 Envoy 所在节点相关信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;node&amp;quot;: {
    &amp;quot;id&amp;quot;: &amp;quot;sidecar~192.168.206.23~productpage-v1-54b8b9f55-bx2dq.default~default.svc.cluster.local&amp;quot;,
    //用于标识 envoy 所代理的 node（在k8s中对应为Pod）上的 service cluster，来自于 Envoy 进程启动时的 service-cluster 参数
    &amp;quot;cluster&amp;quot;: &amp;quot;productpage&amp;quot;,  
    &amp;quot;metadata&amp;quot;: {
          &amp;quot;INTERCEPTION_MODE&amp;quot;: &amp;quot;REDIRECT&amp;quot;,
          &amp;quot;ISTIO_PROXY_SHA&amp;quot;: &amp;quot;istio-proxy:6166ae7ebac7f630206b2fe4e6767516bf198313&amp;quot;,
          &amp;quot;ISTIO_PROXY_VERSION&amp;quot;: &amp;quot;1.0.0&amp;quot;,
          &amp;quot;ISTIO_VERSION&amp;quot;: &amp;quot;1.0.0&amp;quot;,
          &amp;quot;POD_NAME&amp;quot;: &amp;quot;productpage-v1-54b8b9f55-bx2dq&amp;quot;,
          &amp;quot;istio&amp;quot;: &amp;quot;sidecar&amp;quot;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=blue&gt;Admin&lt;/p&gt;

&lt;p&gt;配置 Envoy 的日志路径以及管理端口。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;admin&amp;quot;: {
    &amp;quot;access_log_path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;,
    &amp;quot;address&amp;quot;: {
      &amp;quot;socket_address&amp;quot;: {
        &amp;quot;address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
        &amp;quot;port_value&amp;quot;: 15000
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=blue&gt;Dynamic_resources&lt;/p&gt;

&lt;p&gt;配置动态资源,这里配置了 &lt;code&gt;ADS&lt;/code&gt; 服务器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;dynamic_resources&amp;quot;: {
    &amp;quot;lds_config&amp;quot;: {
        &amp;quot;ads&amp;quot;: {}
    },
    &amp;quot;cds_config&amp;quot;: {
        &amp;quot;ads&amp;quot;: {}
    },
    &amp;quot;ads_config&amp;quot;: {
      &amp;quot;api_type&amp;quot;: &amp;quot;GRPC&amp;quot;,
      &amp;quot;refresh_delay&amp;quot;: {&amp;quot;seconds&amp;quot;: 1, &amp;quot;nanos&amp;quot;: 0},
      &amp;quot;grpc_services&amp;quot;: [
        {
          &amp;quot;envoy_grpc&amp;quot;: {
            &amp;quot;cluster_name&amp;quot;: &amp;quot;xds-grpc&amp;quot;
          }
        }
      ]
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=blue&gt;Static_resources&lt;/p&gt;

&lt;p&gt;配置静态资源，包括了 &lt;code&gt;xds-grpc&lt;/code&gt; 和 &lt;code&gt;zipkin&lt;/code&gt; 两个 cluster。其中 xds-grpc cluster 对应前面 dynamic_resources 中 ADS 配置，指明了 Envoy 用于获取动态资源的服务器地址。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;static_resources&amp;quot;: {
  &amp;quot;clusters&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;xds-grpc&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;STRICT_DNS&amp;quot;,
      &amp;quot;connect_timeout&amp;quot;: {
        &amp;quot;seconds&amp;quot;: 10,
        &amp;quot;nanos&amp;quot;: 0
      },
      &amp;quot;lb_policy&amp;quot;: &amp;quot;ROUND_ROBIN&amp;quot;,
      &amp;quot;hosts&amp;quot;: [
        {
          &amp;quot;socket_address&amp;quot;: {
            &amp;quot;address&amp;quot;: &amp;quot;istio-pilot.istio-system&amp;quot;,
            &amp;quot;port_value&amp;quot;: 15010
          }
        }
      ],
      &amp;quot;circuit_breakers&amp;quot;: {
        &amp;quot;thresholds&amp;quot;: [
          {
            &amp;quot;priority&amp;quot;: &amp;quot;default&amp;quot;,
            &amp;quot;max_connections&amp;quot;: &amp;quot;100000&amp;quot;,
            &amp;quot;max_pending_requests&amp;quot;: &amp;quot;100000&amp;quot;,
            &amp;quot;max_requests&amp;quot;: &amp;quot;100000&amp;quot;
          },
          {
            &amp;quot;priority&amp;quot;: &amp;quot;high&amp;quot;,
            &amp;quot;max_connections&amp;quot;: &amp;quot;100000&amp;quot;,
            &amp;quot;max_pending_requests&amp;quot;: &amp;quot;100000&amp;quot;,
            &amp;quot;max_requests&amp;quot;: &amp;quot;100000&amp;quot;
          }
        ]
      },
      &amp;quot;upstream_connection_options&amp;quot;: {
        &amp;quot;tcp_keepalive&amp;quot;: {
          &amp;quot;keepalive_time&amp;quot;: 300
        }
      },
      &amp;quot;http2_protocol_options&amp;quot;: {}
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;zipkin&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;STRICT_DNS&amp;quot;,
      &amp;quot;connect_timeout&amp;quot;: {
        &amp;quot;seconds&amp;quot;: 1
      },
      &amp;quot;lb_policy&amp;quot;: &amp;quot;ROUND_ROBIN&amp;quot;,
      &amp;quot;hosts&amp;quot;: [
        {
          &amp;quot;socket_address&amp;quot;: {
            &amp;quot;address&amp;quot;: &amp;quot;zipkin.istio-system&amp;quot;,
            &amp;quot;port_value&amp;quot;: 9411
          }
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=blue&gt;Tracing&lt;/p&gt;

&lt;p&gt;配置分布式链路跟踪。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;tracing&amp;quot;: {
  &amp;quot;http&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;envoy.zipkin&amp;quot;,
    &amp;quot;config&amp;quot;: {
      &amp;quot;collector_cluster&amp;quot;: &amp;quot;zipkin&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=blue&gt;Stats_sinks&lt;/p&gt;

&lt;p&gt;这里配置的是和 Envoy 直连的 &lt;code&gt;metrics&lt;/code&gt; 收集 sink,和 &lt;code&gt;Mixer telemetry&lt;/code&gt; 没有关系。Envoy 自带 stats 格式的 metrics 上报。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;stats_sinks&amp;quot;: [
  {
    &amp;quot;name&amp;quot;: &amp;quot;envoy.statsd&amp;quot;,
    &amp;quot;config&amp;quot;: {
      &amp;quot;address&amp;quot;: {
        &amp;quot;socket_address&amp;quot;: {
          &amp;quot;address&amp;quot;: &amp;quot;10.254.238.237&amp;quot;,
          &amp;quot;port_value&amp;quot;: 9125
        }
      }
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Gist &lt;a href=&#34;https://gist.github.com/zhaohuabing/14191bdcf72e37bf700129561c3b41ae&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/zhaohuabing/14191bdcf72e37bf700129561c3b41ae&lt;/a&gt; 中可以查看该配置文件的完整内容。&lt;/p&gt;

&lt;h3 id=&#34;envoy-配置分析&#34;&gt;Envoy 配置分析&lt;/h3&gt;

&lt;h4 id=&#34;通过管理接口获取完整配置&#34;&gt;通过管理接口获取完整配置&lt;/h4&gt;

&lt;p&gt;从 Envoy 初始化配置文件中，我们可以大致看到 Istio 通过 Envoy 来实现服务发现和流量管理的基本原理。即控制平面将 xDS server 信息通过 &lt;code&gt;static resource&lt;/code&gt; 的方式配置到 Envoy 的初始化配置文件中，Envoy 启动后通过 xDS server 获取到 &lt;code&gt;dynamic resource&lt;/code&gt;，包括网格中的 service 信息及路由规则。&lt;/p&gt;

&lt;p&gt;Envoy 配置初始化流程：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://zhaohuabing.com/img/2018-09-25-istio-traffic-management-impl-intro/envoy-config-init.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pilot-agent 根据启动参数和 K8S API Server 中的配置信息生成 Envoy 的初始配置文件 &lt;code&gt;envoy-rev0.json&lt;/code&gt;，该文件告诉 Envoy 从 &lt;code&gt;xDS server&lt;/code&gt; 中获取动态配置信息，并配置了 xDS server 的地址信息，即控制平面的 &lt;code&gt;Pilot&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Pilot-agent 使用 envoy-rev0.json 启动 Envoy 进程。&lt;/li&gt;
&lt;li&gt;Envoy 根据初始配置获得 Pilot 地址，采用 xDS 接口从 Pilot 获取到 &lt;code&gt;Listener&lt;/code&gt;，&lt;code&gt;Cluster&lt;/code&gt;，&lt;code&gt;Route&lt;/code&gt; 等动态配置信息。&lt;/li&gt;
&lt;li&gt;Envoy 根据获取到的动态配置启动 Listener，并根据 Listener 的配置，结合 Route 和 Cluster 对拦截到的流量进行处理。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以看到，Envoy 中实际生效的配置是由初始化配置文件中的静态配置和从 Pilot 获取的动态配置一起组成的。因此只对 envoy-rev0.json 进行分析并不能看到 Mesh 中流量管理的全貌。那么有没有办法可以看到 Envoy 中实际生效的完整配置呢？答案是可以的，我们可以通过 Envoy 的管理接口来获取 Envoy 的完整配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec -it productpage-v1-54b8b9f55-bx2dq -c istio-proxy curl http://127.0.0.1:15000/config_dump &amp;gt; config_dump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该文件内容长达近7000行，本文中就不贴出来了，在Gist &lt;a href=&#34;https://gist.github.com/zhaohuabing/034ef87786d290a4e89cd6f5ad6fcc97&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/zhaohuabing/034ef87786d290a4e89cd6f5ad6fcc97&lt;/a&gt; 中可以查看到全文。&lt;/p&gt;

&lt;h4 id=&#34;envoy-配置文件结构&#34;&gt;Envoy 配置文件结构&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://zhaohuabing.com/img/2018-09-25-istio-traffic-management-impl-intro/envoy-config.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;文件中的配置节点包括：&lt;/p&gt;

&lt;h5 id=&#34;bootstrap&#34;&gt;Bootstrap&lt;/h5&gt;

&lt;p&gt;从名字可以大致猜出这是 Envoy 的初始化配置，打开该节点，可以看到文件中的内容和前一章节中介绍的 envoy-rev0.json 是一致的，这里不再赘述。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://zhaohuabing.com/img/2018-09-25-istio-traffic-management-impl-intro/envoy-config-bootstrap.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h5 id=&#34;clusters&#34;&gt;Clusters&lt;/h5&gt;

&lt;p&gt;在 Envoy 中，Cluster 是一个服务集群，Cluster 中包含一个到多个 endpoint，每个 endpoint 都可以提供服务，Envoy 根据负载均衡算法将请求发送到这些 endpoint 中。&lt;/p&gt;

&lt;p&gt;在 Productpage 的 clusters 配置中包含 &lt;code&gt;static_clusters&lt;/code&gt; 和 &lt;code&gt;dynamic_active_clusters&lt;/code&gt; 两部分，其中 static_clusters 是来自于 envoy-rev0.json 的 xDS server 和 zipkin server 信息。dynamic_active_clusters 是通过 xDS 接口从 Istio 控制平面获取的动态服务信息。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://zhaohuabing.com/img/2018-09-25-istio-traffic-management-impl-intro/envoy-config-clusters.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Dynamic Cluster 中有以下几类 Cluster：&lt;/p&gt;

&lt;p id=blue&gt;Outbound Cluster&lt;/p&gt;

&lt;p&gt;这部分的 Cluster 占了绝大多数，该类 Cluster 对应于 Envoy 所在节点的外部服务。以 &lt;code&gt;details&lt;/code&gt; 为例，对于 Productpage 来说，details 是一个外部服务，因此其 Cluster 名称中包含 &lt;code&gt;outbound&lt;/code&gt; 字样。&lt;/p&gt;

&lt;p&gt;从 details 服务对应的 cluster 配置中可以看到，其类型为 &lt;code&gt;EDS&lt;/code&gt;，即表示该 Cluster 的 endpoint 来自于动态发现，动态发现中 &lt;code&gt;eds_config&lt;/code&gt; 则指向了 &lt;code&gt;ads&lt;/code&gt;，最终指向 static Resource 中配置的 xds-grpc cluster，即 Pilot 的地址。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
 &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-06T09:34:19Z&amp;quot;,
 &amp;quot;cluster&amp;quot;: {
  &amp;quot;name&amp;quot;: &amp;quot;outbound|9080||details.default.svc.cluster.local&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;EDS&amp;quot;,
  &amp;quot;eds_cluster_config&amp;quot;: {
   &amp;quot;eds_config&amp;quot;: {
    &amp;quot;ads&amp;quot;: {}
   },
   &amp;quot;service_name&amp;quot;: &amp;quot;outbound|9080||details.default.svc.cluster.local&amp;quot;
  },
  &amp;quot;connect_timeout&amp;quot;: &amp;quot;1s&amp;quot;,
  &amp;quot;circuit_breakers&amp;quot;: {
   &amp;quot;thresholds&amp;quot;: [
    {}
   ]
  }
 },
 &amp;quot;last_updated&amp;quot;: &amp;quot;2018-09-06T09:34:20.404Z&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以通过 Pilot 的调试接口获取该 Cluster 的 endpoint：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://10.96.8.103:9093/debug/edsz &amp;gt; pilot_eds_dump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出的文件长达 1300 多行，本文只贴出 details 服务相关的 &lt;code&gt;endpoint&lt;/code&gt; 配置，完整文件参见: &lt;a href=&#34;https://gist.github.com/zhaohuabing/a161d2f64746acd18097b74e6a5af551&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/zhaohuabing/a161d2f64746acd18097b74e6a5af551&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;从下面的文件内容可以看到，details cluster 配置了 1 个 endpoint 地址，是 details 的 &lt;code&gt;pod ip&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;clusterName&amp;quot;: &amp;quot;outbound|9080||details.default.svc.cluster.local&amp;quot;,
  &amp;quot;endpoints&amp;quot;: [
    {
      &amp;quot;locality&amp;quot;: {

      },
      &amp;quot;lbEndpoints&amp;quot;: [
        {
          &amp;quot;endpoint&amp;quot;: {
            &amp;quot;address&amp;quot;: {
              &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;192.168.206.21&amp;quot;,
                &amp;quot;portValue&amp;quot;: 9080
              }
            }
          },
          &amp;quot;metadata&amp;quot;: {
            &amp;quot;filterMetadata&amp;quot;: {
              &amp;quot;istio&amp;quot;: {
                  &amp;quot;uid&amp;quot;: &amp;quot;kubernetes://details-v1-6764bbc7f7-qwzdg.default&amp;quot;
                }
            }
          }
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=blue&gt;Inbound Cluster&lt;/p&gt;

&lt;p&gt;该类 Cluster 对应于 Envoy 所在节点上的服务。如果该服务接收到请求，当然就是一个入站请求。对于 Productpage Pod 上的 Envoy，其对应的 Inbound Cluster 只有一个，即 productpage。该 cluster 对应的 host 为 &lt;code&gt;127.0.0.1&lt;/code&gt;，即环回地址上 productpage 的监听端口。由于 iptables 规则中排除了 127.0.0.1,入站请求通过该 Inbound cluster 处理后将跳过 Envoy，直接发送给 Productpage 进程处理。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
   &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-14T01:44:05Z&amp;quot;,
   &amp;quot;cluster&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;inbound|9080||productpage.default.svc.cluster.local&amp;quot;,
    &amp;quot;connect_timeout&amp;quot;: &amp;quot;1s&amp;quot;,
    &amp;quot;hosts&amp;quot;: [
     {
      &amp;quot;socket_address&amp;quot;: {
       &amp;quot;address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,
       &amp;quot;port_value&amp;quot;: 9080
      }
     }
    ],
    &amp;quot;circuit_breakers&amp;quot;: {
     &amp;quot;thresholds&amp;quot;: [
      {}
     ]
    }
   },
   &amp;quot;last_updated&amp;quot;: &amp;quot;2018-09-14T01:44:05.291Z&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=blue&gt;BlackHoleCluster&lt;/p&gt;

&lt;p&gt;这是一个特殊的 Cluster，并没有配置后端处理请求的 Host。如其名字所暗示的一样，请求进入后将被直接丢弃掉。如果一个请求没有找到其对的目的服务，则被发到 BlackHoleCluster。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
   &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-06T09:34:19Z&amp;quot;,
   &amp;quot;cluster&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;BlackHoleCluster&amp;quot;,
    &amp;quot;connect_timeout&amp;quot;: &amp;quot;5s&amp;quot;
   },
   &amp;quot;last_updated&amp;quot;: &amp;quot;2018-09-06T09:34:20.408Z&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;listeners&#34;&gt;Listeners&lt;/h5&gt;

&lt;p&gt;Envoy 采用 listener 来接收并处理 &lt;code&gt;downstream&lt;/code&gt; 发过来的请求，listener 的处理逻辑是插件式的，可以通过配置不同的 &lt;code&gt;filter&lt;/code&gt; 来插入不同的处理逻辑。Istio 就在 Envoy 中加入了用于 &lt;code&gt;policy check&lt;/code&gt; 和 &lt;code&gt;metric report&lt;/code&gt; 的 Mixer filter。&lt;/p&gt;

&lt;p&gt;Listener 可以绑定到 &lt;code&gt;IP Socket&lt;/code&gt; 或者 &lt;code&gt;Unix Domain Socket&lt;/code&gt; 上，也可以不绑定到一个具体的端口上，而是接收从其他 listener 转发来的数据。Istio 就是利用了 Envoy listener 的这一特点实现了将来发向不同服务的请求转交给不同的 listener 处理。&lt;/p&gt;

&lt;p id=blue&gt;Virtual Listener&lt;/p&gt;

&lt;p&gt;Envoy 创建了一个在 &lt;code&gt;15001&lt;/code&gt; 端口监听的入口监听器。Iptables 将请求截取后发向 15001 端口，该监听器接收后并不进行业务处理，而是根据请求目的地分发给其他监听器处理。该监听器取名为 &lt;code&gt;virtual&lt;/code&gt;（虚拟）监听器也是这个原因。&lt;/p&gt;

&lt;p&gt;Envoy 是如何做到按服务分发的呢？ 可以看到该 Listener 的配置项 &lt;code&gt;use_original_dest&lt;/code&gt; 设置为 true,该配置要求监听器将接收到的请求转交给和请求原目的地址关联的 listener 进行处理。&lt;/p&gt;

&lt;p&gt;从其 filter 配置可以看到，如果找不到和请求目的地配置的 listener 进行转交，则请求将被发送到 &lt;code&gt;BlackHoleCluster&lt;/code&gt;,由于 BlackHoleCluster 并没有配置 host，因此找不到对应目的地对应监听器的请求实际上会被丢弃。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
 &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-06T09:34:19Z&amp;quot;,
 &amp;quot;listener&amp;quot;: {
  &amp;quot;name&amp;quot;: &amp;quot;virtual&amp;quot;,
  &amp;quot;address&amp;quot;: {
   &amp;quot;socket_address&amp;quot;: {
    &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
    &amp;quot;port_value&amp;quot;: 15001
   }
  },
  &amp;quot;filter_chains&amp;quot;: [
   {
    &amp;quot;filters&amp;quot;: [
     {
      &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
      &amp;quot;config&amp;quot;: {
       &amp;quot;stat_prefix&amp;quot;: &amp;quot;BlackHoleCluster&amp;quot;,
       &amp;quot;cluster&amp;quot;: &amp;quot;BlackHoleCluster&amp;quot;
      }
     }
    ]
   }
  ],
  &amp;quot;use_original_dst&amp;quot;: true
 },
 &amp;quot;last_updated&amp;quot;: &amp;quot;2018-09-06T09:34:26.262Z&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=blue&gt;Inbound Listener&lt;/p&gt;

&lt;p&gt;在 Productpage Pod 上的 Envoy 创建了 &lt;code&gt;Listener 192.168.206.23_9080&lt;/code&gt;，当外部调用 Productpage 服务的请求到达 Pod 上 15001 的 &lt;code&gt;Virtual Listener&lt;/code&gt; 时，Virtual Listener 根据请求目的地匹配到该 Listener,请求将被转发过来。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
 &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-14T01:44:05Z&amp;quot;,
 &amp;quot;listener&amp;quot;: {
  &amp;quot;name&amp;quot;: &amp;quot;192.168.206.23_9080&amp;quot;,
  &amp;quot;address&amp;quot;: {
   &amp;quot;socket_address&amp;quot;: {
    &amp;quot;address&amp;quot;: &amp;quot;192.168.206.23&amp;quot;,
    &amp;quot;port_value&amp;quot;: 9080
   }
  },
  &amp;quot;filter_chains&amp;quot;: [
   {
    &amp;quot;filters&amp;quot;: [
     {
      &amp;quot;name&amp;quot;: &amp;quot;mixer&amp;quot;,
      &amp;quot;config&amp;quot;: {
       &amp;quot;transport&amp;quot;: {
        &amp;quot;check_cluster&amp;quot;: &amp;quot;outbound|9091||istio-policy.istio-system.svc.cluster.local&amp;quot;,
        &amp;quot;network_fail_policy&amp;quot;: {
         &amp;quot;policy&amp;quot;: &amp;quot;FAIL_CLOSE&amp;quot;
        },
        &amp;quot;report_cluster&amp;quot;: &amp;quot;outbound|9091||istio-telemetry.istio-system.svc.cluster.local&amp;quot;,
        &amp;quot;attributes_for_mixer_proxy&amp;quot;: {
         &amp;quot;attributes&amp;quot;: {
          &amp;quot;source.uid&amp;quot;: {
           &amp;quot;string_value&amp;quot;: &amp;quot;kubernetes://productpage-v1-54b8b9f55-bx2dq.default&amp;quot;
          }
         }
        }
       },
       &amp;quot;mixer_attributes&amp;quot;: {
        &amp;quot;attributes&amp;quot;: {
         &amp;quot;destination.port&amp;quot;: {
          &amp;quot;int64_value&amp;quot;: &amp;quot;9080&amp;quot;
         },
         &amp;quot;context.reporter.uid&amp;quot;: {
          &amp;quot;string_value&amp;quot;: &amp;quot;kubernetes://productpage-v1-54b8b9f55-bx2dq.default&amp;quot;
         },
         &amp;quot;destination.namespace&amp;quot;: {
          &amp;quot;string_value&amp;quot;: &amp;quot;default&amp;quot;
         },
         &amp;quot;destination.ip&amp;quot;: {
          &amp;quot;bytes_value&amp;quot;: &amp;quot;AAAAAAAAAAAAAP//wKjOFw==&amp;quot;
         },
         &amp;quot;destination.uid&amp;quot;: {
          &amp;quot;string_value&amp;quot;: &amp;quot;kubernetes://productpage-v1-54b8b9f55-bx2dq.default&amp;quot;
         },
         &amp;quot;context.reporter.kind&amp;quot;: {
          &amp;quot;string_value&amp;quot;: &amp;quot;inbound&amp;quot;
         }
        }
       }
      }
     },
     {
      &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
      &amp;quot;config&amp;quot;: {
       &amp;quot;stat_prefix&amp;quot;: &amp;quot;inbound|9080||productpage.default.svc.cluster.local&amp;quot;,
       &amp;quot;cluster&amp;quot;: &amp;quot;inbound|9080||productpage.default.svc.cluster.local&amp;quot;
      }
     }
    ]
   }
  ],
  &amp;quot;deprecated_v1&amp;quot;: {
   &amp;quot;bind_to_port&amp;quot;: false
  }
 },
 &amp;quot;last_updated&amp;quot;: &amp;quot;2018-09-14T01:44:05.754Z&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上面的配置 &lt;code&gt;”bind_to_port”: false&lt;/code&gt; 可以得知该 listener 创建后并不会被绑定到 tcp 端口上直接接收网络上的数据，因此其所有请求都转发自 15001 端口。&lt;/p&gt;

&lt;p&gt;该 listener 配置的 &lt;code&gt;envoy.tcp_proxy filter&lt;/code&gt; 对应的 cluster为 &lt;code&gt;inbound|9080||productpage.default.svc.cluster.local&lt;/code&gt;,该 cluster 配置的 host 为 127.0.0.1:9080，因此 Envoy 会将该请求发向 &lt;code&gt;127.0.0.1:9080&lt;/code&gt;。由于 iptables 设置中 127.0.0.1 不会被拦截,该请求将发送到 Productpage 进程的 9080 端口进行业务处理。&lt;/p&gt;

&lt;p&gt;除此以外，Listenter 中还包含 &lt;code&gt;Mixer filter&lt;/code&gt; 的配置信息，配置了策略检查(Mixer check)和 Metrics 上报(Mixer report)服务器地址，以及 Mixer上 报的一些 attribute 取值。&lt;/p&gt;

&lt;p id=blue&gt;Outbound Listener&lt;/p&gt;

&lt;p&gt;Envoy 为网格中的外部服务按端口创建多个 Listener，以用于处理出向请求。&lt;/p&gt;

&lt;p&gt;Productpage Pod 中的 Envoy 创建了多个 Outbound Listener：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0_9080&lt;/code&gt; : 处理对 details，reviews 和 rating 服务的出向请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0_9411&lt;/code&gt; : 处理对 &lt;code&gt;zipkin&lt;/code&gt; 的出向请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0_15031&lt;/code&gt; :处理对 &lt;code&gt;ingressgateway&lt;/code&gt; 的出向请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0_3000&lt;/code&gt; : 处理对 &lt;code&gt;grafana&lt;/code&gt; 的出向请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0_9093&lt;/code&gt; :处理对 citadel、galley、pilot、(Mixer)policy、(Mixer)telemetry 的出向请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0_15004&lt;/code&gt; : 处理对 (Mixer)policy、(Mixer)telemetry 的出向请求&lt;/li&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了 9080 这个 Listener 用于处理应用的业务之外，其他 listener 都是 Istio 用于处理自身组件之间通信使用的，有的控制平面组件如 Pilot，Mixer 对应多个 listener，是因为该组件有多个端口提供服务。&lt;/p&gt;

&lt;p&gt;我们这里主要分析一下 &lt;code&gt;9080&lt;/code&gt; 这个业务端口的 Listenrer。和 Outbound Listener 一样，该 Listener 同样配置了 &lt;code&gt;”bind_to_port”: false&lt;/code&gt; 属性，因此该 listener 也没有被绑定到 tcp 端口上，其接收到的所有请求都转发自 15001 端口的 Virtual listener。&lt;/p&gt;

&lt;p&gt;监听器 name 为 &lt;code&gt;0.0.0.0_9080&lt;/code&gt;，推测其含义应为匹配发向任意 IP 的 9080 的请求，从 bookinfo 程序结构可以看到该程序中的 productpage，revirews，ratings，details 四个 service 都是 9080 端口，那么 Envoy 如何区别处理这四个 service 呢？&lt;/p&gt;

&lt;p&gt;首先需要区分&lt;strong&gt;入向&lt;/strong&gt;（发送给productpage）请求和&lt;strong&gt;出向&lt;/strong&gt;（发送给其他几个服务）请求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;发给 productpage 的入向请求，virtual listener 根据其目的 IP 和 Port 首先匹配到 &lt;code&gt;192.168.206.23_9080&lt;/code&gt; 这个 listener 上，不会进入 &lt;code&gt;0.0.0.0_9080&lt;/code&gt; listener处理。&lt;/li&gt;
&lt;li&gt;从 productpage 外发给 reviews、details 和 ratings 的出向请求，virtual listener 无法找到和其目的 IP 完全匹配的 listener，因此根据通配原则转交给 &lt;code&gt;0.0.0.0_9080&lt;/code&gt; 处理。&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=blockquote&gt;备注：&lt;br /&gt;
1. 该转发逻辑为根据 Envoy 配置进行的推测，并未分析 Envoy 代码进行验证。欢迎了解 Envoy 代码和实现机制的朋友指正。
&lt;br /&gt;
2. 根据业务逻辑，实际上 productpage 并不会调用 ratings 服务，但 Istio 并不知道各个业务之间会如何调用，因此将所有的服务信息都下发到了 Envoy 中。这样做对效率和性能理论上有一定影响，存在一定的优化空间。&lt;/p&gt;

&lt;p&gt;由于对应到 reviews、details 和 Ratings 三个服务，当 0.0.0.0_9080 接收到出向请求后，并不能直接发送到一个 downstream cluster 中，而是需要根据请求目的地进行不同的路由。&lt;/p&gt;

&lt;p&gt;在该 listener 的配置中，我们可以看到并没有像 inbound listener 那样通过 envoy.tcp_proxy 直接指定一个 downstream 的 cluster，而是通过 &lt;code&gt;rds&lt;/code&gt; 配置了一个路由规则 &lt;code&gt;9080&lt;/code&gt;，在路由规则中再根据不同的请求目的地对请求进行处理。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
     &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-06T09:34:19Z&amp;quot;,
     &amp;quot;listener&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_9080&amp;quot;,
      &amp;quot;address&amp;quot;: {
       &amp;quot;socket_address&amp;quot;: {
        &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
        &amp;quot;port_value&amp;quot;: 9080
       }
      },
      &amp;quot;filter_chains&amp;quot;: [
       {
        &amp;quot;filters&amp;quot;: [
         {
          &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
          &amp;quot;config&amp;quot;: {
           &amp;quot;access_log&amp;quot;: [
            {
             &amp;quot;name&amp;quot;: &amp;quot;envoy.file_access_log&amp;quot;,
             &amp;quot;config&amp;quot;: {
              &amp;quot;path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;
             }
            }
           ],
           &amp;quot;http_filters&amp;quot;: [
            {
             &amp;quot;name&amp;quot;: &amp;quot;mixer&amp;quot;,
             &amp;quot;config&amp;quot;: {

			  ......

             }
            },
            {
             &amp;quot;name&amp;quot;: &amp;quot;envoy.cors&amp;quot;
            },
            {
             &amp;quot;name&amp;quot;: &amp;quot;envoy.fault&amp;quot;
            },
            {
             &amp;quot;name&amp;quot;: &amp;quot;envoy.router&amp;quot;
            }
           ],
           &amp;quot;tracing&amp;quot;: {
            &amp;quot;operation_name&amp;quot;: &amp;quot;EGRESS&amp;quot;,
            &amp;quot;client_sampling&amp;quot;: {
             &amp;quot;value&amp;quot;: 100
            },
            &amp;quot;overall_sampling&amp;quot;: {
             &amp;quot;value&amp;quot;: 100
            },
            &amp;quot;random_sampling&amp;quot;: {
             &amp;quot;value&amp;quot;: 100
            }
           },
           &amp;quot;use_remote_address&amp;quot;: false,
           &amp;quot;stat_prefix&amp;quot;: &amp;quot;0.0.0.0_9080&amp;quot;,
           &amp;quot;rds&amp;quot;: {
            &amp;quot;route_config_name&amp;quot;: &amp;quot;9080&amp;quot;,
            &amp;quot;config_source&amp;quot;: {
             &amp;quot;ads&amp;quot;: {}
            }
           },
           &amp;quot;stream_idle_timeout&amp;quot;: &amp;quot;0.000s&amp;quot;,
           &amp;quot;generate_request_id&amp;quot;: true,
           &amp;quot;upgrade_configs&amp;quot;: [
            {
             &amp;quot;upgrade_type&amp;quot;: &amp;quot;websocket&amp;quot;
            }
           ]
          }
         }
        ]
       }
      ],
      &amp;quot;deprecated_v1&amp;quot;: {
       &amp;quot;bind_to_port&amp;quot;: false
      }
     },
     &amp;quot;last_updated&amp;quot;: &amp;quot;2018-09-06T09:34:26.172Z&amp;quot;
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;routes&#34;&gt;Routes&lt;/h5&gt;

&lt;p&gt;配置 Envoy 的路由规则。Istio 下发的缺省路由规则中对每个端口设置了一个路由规则，根据 host 来对请求进行路由分发。&lt;/p&gt;

&lt;p&gt;下面是 &lt;code&gt;9080&lt;/code&gt; 的路由配置，从文件中可以看到对应了 3 个 &lt;code&gt;virtual host&lt;/code&gt;，分别是 details、ratings 和 reviews，这三个 virtual host 分别对应到不同的 &lt;code&gt;outbound cluster&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
     &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-14T01:38:20Z&amp;quot;,
     &amp;quot;route_config&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;9080&amp;quot;,
      &amp;quot;virtual_hosts&amp;quot;: [
       {
        &amp;quot;name&amp;quot;: &amp;quot;details.default.svc.cluster.local:9080&amp;quot;,
        &amp;quot;domains&amp;quot;: [
         &amp;quot;details.default.svc.cluster.local&amp;quot;,
         &amp;quot;details.default.svc.cluster.local:9080&amp;quot;,
         &amp;quot;details&amp;quot;,
         &amp;quot;details:9080&amp;quot;,
         &amp;quot;details.default.svc.cluster&amp;quot;,
         &amp;quot;details.default.svc.cluster:9080&amp;quot;,
         &amp;quot;details.default.svc&amp;quot;,
         &amp;quot;details.default.svc:9080&amp;quot;,
         &amp;quot;details.default&amp;quot;,
         &amp;quot;details.default:9080&amp;quot;,
         &amp;quot;10.101.163.201&amp;quot;,
         &amp;quot;10.101.163.201:9080&amp;quot;
        ],
        &amp;quot;routes&amp;quot;: [
         {
          &amp;quot;match&amp;quot;: {
           &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
          },
          &amp;quot;route&amp;quot;: {
           &amp;quot;cluster&amp;quot;: &amp;quot;outbound|9080||details.default.svc.cluster.local&amp;quot;,
           &amp;quot;timeout&amp;quot;: &amp;quot;0s&amp;quot;,
           &amp;quot;max_grpc_timeout&amp;quot;: &amp;quot;0s&amp;quot;
          },
          &amp;quot;decorator&amp;quot;: {
           &amp;quot;operation&amp;quot;: &amp;quot;details.default.svc.cluster.local:9080/*&amp;quot;
          },
          &amp;quot;per_filter_config&amp;quot;: {
           &amp;quot;mixer&amp;quot;: {
            ......

           }
          }
         }
        ]
       },
       {
        &amp;quot;name&amp;quot;: &amp;quot;ratings.default.svc.cluster.local:9080&amp;quot;,
        &amp;quot;domains&amp;quot;: [
         &amp;quot;ratings.default.svc.cluster.local&amp;quot;,
         &amp;quot;ratings.default.svc.cluster.local:9080&amp;quot;,
         &amp;quot;ratings&amp;quot;,
         &amp;quot;ratings:9080&amp;quot;,
         &amp;quot;ratings.default.svc.cluster&amp;quot;,
         &amp;quot;ratings.default.svc.cluster:9080&amp;quot;,
         &amp;quot;ratings.default.svc&amp;quot;,
         &amp;quot;ratings.default.svc:9080&amp;quot;,
         &amp;quot;ratings.default&amp;quot;,
         &amp;quot;ratings.default:9080&amp;quot;,
         &amp;quot;10.99.16.205&amp;quot;,
         &amp;quot;10.99.16.205:9080&amp;quot;
        ],
        &amp;quot;routes&amp;quot;: [
         {
          &amp;quot;match&amp;quot;: {
           &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
          },
          &amp;quot;route&amp;quot;: {
           &amp;quot;cluster&amp;quot;: &amp;quot;outbound|9080||ratings.default.svc.cluster.local&amp;quot;,
           &amp;quot;timeout&amp;quot;: &amp;quot;0s&amp;quot;,
           &amp;quot;max_grpc_timeout&amp;quot;: &amp;quot;0s&amp;quot;
          },
          &amp;quot;decorator&amp;quot;: {
           &amp;quot;operation&amp;quot;: &amp;quot;ratings.default.svc.cluster.local:9080/*&amp;quot;
          },
          &amp;quot;per_filter_config&amp;quot;: {
           &amp;quot;mixer&amp;quot;: {
           ......

            },
            &amp;quot;disable_check_calls&amp;quot;: true
           }
          }
         }
        ]
       },
       {
        &amp;quot;name&amp;quot;: &amp;quot;reviews.default.svc.cluster.local:9080&amp;quot;,
        &amp;quot;domains&amp;quot;: [
         &amp;quot;reviews.default.svc.cluster.local&amp;quot;,
         &amp;quot;reviews.default.svc.cluster.local:9080&amp;quot;,
         &amp;quot;reviews&amp;quot;,
         &amp;quot;reviews:9080&amp;quot;,
         &amp;quot;reviews.default.svc.cluster&amp;quot;,
         &amp;quot;reviews.default.svc.cluster:9080&amp;quot;,
         &amp;quot;reviews.default.svc&amp;quot;,
         &amp;quot;reviews.default.svc:9080&amp;quot;,
         &amp;quot;reviews.default&amp;quot;,
         &amp;quot;reviews.default:9080&amp;quot;,
         &amp;quot;10.108.25.157&amp;quot;,
         &amp;quot;10.108.25.157:9080&amp;quot;
        ],
        &amp;quot;routes&amp;quot;: [
         {
          &amp;quot;match&amp;quot;: {
           &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
          },
          &amp;quot;route&amp;quot;: {
           &amp;quot;cluster&amp;quot;: &amp;quot;outbound|9080||reviews.default.svc.cluster.local&amp;quot;,
           &amp;quot;timeout&amp;quot;: &amp;quot;0s&amp;quot;,
           &amp;quot;max_grpc_timeout&amp;quot;: &amp;quot;0s&amp;quot;
          },
          &amp;quot;decorator&amp;quot;: {
           &amp;quot;operation&amp;quot;: &amp;quot;reviews.default.svc.cluster.local:9080/*&amp;quot;
          },
          &amp;quot;per_filter_config&amp;quot;: {
           &amp;quot;mixer&amp;quot;: {
            ......

            },
            &amp;quot;disable_check_calls&amp;quot;: true
           }
          }
         }
        ]
       }
      ],
      &amp;quot;validate_clusters&amp;quot;: false
     },
     &amp;quot;last_updated&amp;quot;: &amp;quot;2018-09-27T07:17:50.242Z&amp;quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bookinfo-端到端调用分析&#34;&gt;Bookinfo 端到端调用分析&lt;/h3&gt;

&lt;p&gt;通过前面章节对 Envoy 配置文件的分析，我们了解到 Istio 控制平面如何将服务和路由信息通过 xDS 接口下发到数据平面中；并介绍了 Envoy 上生成的各种配置数据的结构，包括 listener，cluster，route 和 endpoint。&lt;/p&gt;

&lt;p&gt;下面我们来分析一个端到端的调用请求，通过调用请求的流程把这些配置串连起来，以从全局上理解 Istio 控制平面的流量控制是如何在数据平面的 Envoy 上实现的。&lt;/p&gt;

&lt;p&gt;下图描述了一个 &lt;code&gt;Productpage&lt;/code&gt; 服务调用 &lt;code&gt;Details&lt;/code&gt; 服务的请求流程：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://zhaohuabing.com/img/2018-09-25-istio-traffic-management-impl-intro/envoy-traffic-route.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;1、Productpage 发起对 Details 的调用：&lt;code&gt;http://details:9080/details/0&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;2、请求被 Pod 的 iptables 规则拦截，转发到 15001 端口。&lt;/p&gt;

&lt;p&gt;3、Envoy 的 Virtual Listener 在 &lt;code&gt;15001&lt;/code&gt; 端口上监听，收到了该请求。&lt;/p&gt;

&lt;p&gt;4、请求被 Virtual Listener 根据原目标 IP（通配）和端口（9080）转发到 &lt;code&gt;0.0.0.0_9080&lt;/code&gt; 这个 listener。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
 &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-06T09:34:19Z&amp;quot;,
 &amp;quot;listener&amp;quot;: {
  &amp;quot;name&amp;quot;: &amp;quot;virtual&amp;quot;,
  &amp;quot;address&amp;quot;: {
   &amp;quot;socket_address&amp;quot;: {
    &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
    &amp;quot;port_value&amp;quot;: 15001
   }
  }
  ......

  &amp;quot;use_original_dst&amp;quot;: true //请求转发给和原始目的IP:Port匹配的listener
 },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5、根据 0.0.0.0_9080 listener 的 &lt;code&gt;http_connection_manager filter&lt;/code&gt; 配置,该请求采用 “9080” route 进行分发。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; {
  &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-06T09:34:19Z&amp;quot;,
  &amp;quot;listener&amp;quot;: {
   &amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_9080&amp;quot;,
   &amp;quot;address&amp;quot;: {
    &amp;quot;socket_address&amp;quot;: {
     &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
     &amp;quot;port_value&amp;quot;: 9080
    }
   },
   &amp;quot;filter_chains&amp;quot;: [
    {
     &amp;quot;filters&amp;quot;: [
      {
       &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
       &amp;quot;config&amp;quot;: {
       ......

        &amp;quot;rds&amp;quot;: {
         &amp;quot;route_config_name&amp;quot;: &amp;quot;9080&amp;quot;,
         &amp;quot;config_source&amp;quot;: {
          &amp;quot;ads&amp;quot;: {}
         }
        },

      }
     ]
    }
   ],
   &amp;quot;deprecated_v1&amp;quot;: {
    &amp;quot;bind_to_port&amp;quot;: false
   }
  },
  &amp;quot;last_updated&amp;quot;: &amp;quot;2018-09-06T09:34:26.172Z&amp;quot;
 },

 {
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6、&lt;code&gt;9080&lt;/code&gt; 这个 route 的配置中，host name 为 &lt;code&gt;details:9080&lt;/code&gt; 的请求对应的 cluster 为 &lt;code&gt;outbound|9080||details.default.svc.cluster.local&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; {
  &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-14T01:38:20Z&amp;quot;,
  &amp;quot;route_config&amp;quot;: {
   &amp;quot;name&amp;quot;: &amp;quot;9080&amp;quot;,
   &amp;quot;virtual_hosts&amp;quot;: [
    {
     &amp;quot;name&amp;quot;: &amp;quot;details.default.svc.cluster.local:9080&amp;quot;,
     &amp;quot;domains&amp;quot;: [
      &amp;quot;details.default.svc.cluster.local&amp;quot;,
      &amp;quot;details.default.svc.cluster.local:9080&amp;quot;,
      &amp;quot;details&amp;quot;,
      &amp;quot;details:9080&amp;quot;,
      &amp;quot;details.default.svc.cluster&amp;quot;,
      &amp;quot;details.default.svc.cluster:9080&amp;quot;,
      &amp;quot;details.default.svc&amp;quot;,
      &amp;quot;details.default.svc:9080&amp;quot;,
      &amp;quot;details.default&amp;quot;,
      &amp;quot;details.default:9080&amp;quot;,
      &amp;quot;10.101.163.201&amp;quot;,
      &amp;quot;10.101.163.201:9080&amp;quot;
     ],
     &amp;quot;routes&amp;quot;: [
      {
       &amp;quot;match&amp;quot;: {
        &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
       },
       &amp;quot;route&amp;quot;: {
        &amp;quot;cluster&amp;quot;: &amp;quot;outbound|9080||details.default.svc.cluster.local&amp;quot;,
        &amp;quot;timeout&amp;quot;: &amp;quot;0s&amp;quot;,
        &amp;quot;max_grpc_timeout&amp;quot;: &amp;quot;0s&amp;quot;
       },
         ......

        }
       }
      }
     ]
    },
      ......

 {
  },   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7、&lt;code&gt;outbound|9080||details.default.svc.cluster.local&lt;/code&gt; cluster 为动态资源，通过 eds 查询得到其 endpoint 为 192.168.206.21:9080。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; {
 &amp;quot;clusterName&amp;quot;: &amp;quot;outbound|9080||details.default.svc.cluster.local&amp;quot;,
 &amp;quot;endpoints&amp;quot;: [
 {
   &amp;quot;locality&amp;quot;: {

   },
   &amp;quot;lbEndpoints&amp;quot;: [
     {
       &amp;quot;endpoint&amp;quot;: {
         &amp;quot;address&amp;quot;: {
           &amp;quot;socketAddress&amp;quot;: {
             &amp;quot;address&amp;quot;: &amp;quot;192.168.206.21&amp;quot;,
             &amp;quot;portValue&amp;quot;: 9080
           }
         }
       },
      ......  
     }
   ]
 }
 ]
 }   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8、请求被转发到 192.168.206.21，即 Details 服务所在的 Pod，被 iptables 规则拦截，转发到 15001 端口。&lt;/p&gt;

&lt;p&gt;9、Envoy 的 &lt;code&gt;Virtual Listener&lt;/code&gt; 在 15001 端口上监听，收到了该请求。&lt;/p&gt;

&lt;p&gt;10、请求被 Virtual Listener 根据请求原目标地址 IP（192.168.206.21）和端口（9080）转发到 &lt;code&gt;192.168.206.21_9080&lt;/code&gt; 这个 listener。&lt;/p&gt;

&lt;p&gt;11、根据 92.168.206.21_9080 listener 的 &lt;code&gt;http_connection_manager filter&lt;/code&gt; 配置，该请求对应的 cluster 为 &lt;code&gt;inbound|9080||details.default.svc.cluster.local&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; {
  &amp;quot;version_info&amp;quot;: &amp;quot;2018-09-06T09:34:16Z&amp;quot;,
  &amp;quot;listener&amp;quot;: {
   &amp;quot;name&amp;quot;: &amp;quot;192.168.206.21_9080&amp;quot;,
   &amp;quot;address&amp;quot;: {
    &amp;quot;socket_address&amp;quot;: {
     &amp;quot;address&amp;quot;: &amp;quot;192.168.206.21&amp;quot;,
     &amp;quot;port_value&amp;quot;: 9080
    }
   },
   &amp;quot;filter_chains&amp;quot;: [
    {
     &amp;quot;filters&amp;quot;: [
      {
       &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
       ......

       &amp;quot;route_config&amp;quot;: {
         &amp;quot;name&amp;quot;: &amp;quot;inbound|9080||details.default.svc.cluster.local&amp;quot;,
         &amp;quot;validate_clusters&amp;quot;: false,
         &amp;quot;virtual_hosts&amp;quot;: [
          {
           &amp;quot;name&amp;quot;: &amp;quot;inbound|http|9080&amp;quot;,
           &amp;quot;routes&amp;quot;: [
             ......

             &amp;quot;route&amp;quot;: {
              &amp;quot;max_grpc_timeout&amp;quot;: &amp;quot;0.000s&amp;quot;,
              &amp;quot;cluster&amp;quot;: &amp;quot;inbound|9080||details.default.svc.cluster.local&amp;quot;,
              &amp;quot;timeout&amp;quot;: &amp;quot;0.000s&amp;quot;
             },
             ......

             &amp;quot;match&amp;quot;: {
              &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
             }
            }
           ],
           &amp;quot;domains&amp;quot;: [
            &amp;quot;*&amp;quot;
           ]
          }
         ]
        },
         ......

        ]
       }
      }
     ]
    }
   ],
   &amp;quot;deprecated_v1&amp;quot;: {
    &amp;quot;bind_to_port&amp;quot;: false
   }
  },
  &amp;quot;last_updated&amp;quot;: &amp;quot;2018-09-06T09:34:22.184Z&amp;quot;
 }   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;12、&lt;code&gt;inbound|9080||details.default.svc.cluster.local&lt;/code&gt; cluster 配置的 host 为&lt;code&gt;127.0.0.1:9080&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;13、请求被转发到 127.0.0.1:9080，即 Details 服务进行处理。&lt;/p&gt;

&lt;p&gt;上述调用流程涉及的完整 Envoy 配置文件参见：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proudctpage ：&lt;a href=&#34;https://gist.github.com/zhaohuabing/034ef87786d290a4e89cd6f5ad6fcc97&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/zhaohuabing/034ef87786d290a4e89cd6f5ad6fcc97&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Details ：&lt;a href=&#34;https://gist.github.com/zhaohuabing/544d4d45447b65d10150e528a190f8ee&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/zhaohuabing/544d4d45447b65d10150e528a190f8ee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;本文介绍了 Istio 流量管理相关组件，Istio 控制平面和数据平面之间的标准接口，以及 Istio 下发到 Envoy 的完整配置数据的结构和内容。然后通过 Bookinfo 示例程序的一个端到端调用分析了 Envoy 是如何实现服务网格中服务发现和路由转发的，希望能帮助大家透过概念更进一步深入理解 Istio 流量管理的实现机制。&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/docs/concepts/traffic-management/#pilot-and-envoy&#34; target=&#34;_blank&#34;&gt;Istio Traffic Managment Concept&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/API_OVERVIEW.md&#34; target=&#34;_blank&#34;&gt;Data Plane API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources&#34; target=&#34;_blank&#34;&gt;kubernetes Custom Resource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istio/old_pilot_repo/blob/master/doc/design.md&#34; target=&#34;_blank&#34;&gt;Istio Pilot Design Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/overview/v2_overview&#34; target=&#34;_blank&#34;&gt;Envoy V2 API Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/tree/master/envoy/api/v2&#34; target=&#34;_blank&#34;&gt;Data Plane API Protocol Buffer Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/XDS_PROTOCOL.md&#34; target=&#34;_blank&#34;&gt;xDS REST and gRPC protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istio/istio/tree/master/pilot/pkg/proxy/envoy/v2&#34; target=&#34;_blank&#34;&gt;Pilot Debug interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhaohuabing.com/2018/05/23/istio-auto-injection-with-webhook/&#34; target=&#34;_blank&#34;&gt;Istio Sidecar自动注入原理&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;style&gt;
h1,h2,h3,h4,h5,h6 {
    font-family: &#39;Open Sans&#39;, &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif;
    font-weight: 800;
    margin-top: 35px;
}
h2 {
    display: block;
    font-size: 1.5em;
    margin-block-start: 0.83em;
    margin-block-end: 0.83em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    font-weight: bold;
}
h2::before {
    content: &#34;#&#34;;
    margin-right: 5px;
    color: #2d96bd;
}
li {
    line-height: 2;
}
#blockquote {
    padding: 10px 20px;
    margin: 0 0 20px;
    font-size: 14px;
    border-left: 5px solid #986dbd;
}
#blue {
color: #2780e3;
font-size: 17px
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>初试 Kubernetes 集群中使用 Contour 反向代理</title>
      <link>https://www.yangcs.net/posts/use-envoy-as-a-kubernetes-ingress/</link>
      <pubDate>Fri, 28 Sep 2018 16:38:15 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/use-envoy-as-a-kubernetes-ingress/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;在 Kubernetes 中运行大规模以 Web 为中心的工作负载，最关键的需求之一就是在 &lt;code&gt;L7&lt;/code&gt; 层实现高效流畅的入口流量管理。自从第一批 &lt;code&gt;Kubernetes Ingress Controller&lt;/code&gt; 开发完成以来，&lt;code&gt;Envoy&lt;/code&gt;（由 Matt Klein 和 Lyft 团队开发）已经成为云原生生态系统中的新生力量。Envoy 之所以受到支持，因为它是一个 CNCF 托管的项目，与整个容器圈和云原生架构有着天然的支持。&lt;/p&gt;

&lt;p&gt;容器公司 &lt;a href=&#34;https://heptio.com/&#34; target=&#34;_blank&#34;&gt;Heptio&lt;/a&gt; 开源的项目 &lt;a href=&#34;https://github.com/heptio/contour&#34; target=&#34;_blank&#34;&gt;Contour&lt;/a&gt; 使用 &lt;code&gt;Envoy&lt;/code&gt; 作为 Kubernetes 的 Ingress Controller 实现，为大家提供了一条新的 Kubernetes 外部负载均衡实现思路。&lt;/p&gt;

&lt;p&gt;据&lt;a href=&#34;https://blog.heptio.com/making-it-easy-to-use-envoy-as-a-kubernetes-load-balancer-dde82959f171&#34; target=&#34;_blank&#34;&gt;官方博客&lt;/a&gt;介绍，&lt;code&gt;Heptio Contour&lt;/code&gt; 可以为用户提供以下好处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一种简单的安装机制来快速部署和集成 Envoy。&lt;/li&gt;
&lt;li&gt;与 Kubernetes 对象模型的集成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ingress&lt;/code&gt; 配置的动态更新，而无需重启底层负载均衡器。&lt;/li&gt;
&lt;li&gt;项目成熟后，将允许使用 Envoy 一些强大的功能，如熔断器、插件式的处理器链，以及可观测性和可调试性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我们就来试用一下。&lt;/p&gt;

&lt;h2 id=&#34;1-安装步骤&#34;&gt;1. 安装步骤&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;首先克隆官方仓库，进入 manifest 清单目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/heptio/contour
$ cd contour/deployment/deployment-grpc-v2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 &lt;code&gt;Deployment&lt;/code&gt; YAML 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: contour
  name: contour
  namespace: heptio-contour
spec:
  selector:
    matchLabels:
      app: contour
  replicas: 1
  template:
    metadata:
      labels:
        app: contour
      annotations:
        prometheus.io/scrape: &amp;quot;true&amp;quot;
        prometheus.io/port: &amp;quot;9001&amp;quot;
        prometheus.io/path: &amp;quot;/stats&amp;quot;
        prometheus.io/format: &amp;quot;prometheus&amp;quot;
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - &amp;quot;192.168.123.249&amp;quot;
      hostNetwork: true
      containers:
      - image: gcr.io/heptio-images/contour:master
        imagePullPolicy: Always
        name: contour
        command: [&amp;quot;contour&amp;quot;]
        args:
        - serve
        - --incluster
        - --envoy-http-port=80
        - --envoy-https-port=443
      - image: docker.io/envoyproxy/envoy-alpine:v1.7.0
        name: envoy
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        command: [&amp;quot;envoy&amp;quot;]
        args:
        - --config-path /config/contour.yaml
        - --service-cluster cluster0
        - --service-node node0
        - --log-level info
        - --v2-config-only
        volumeMounts:
        - name: contour-config
          mountPath: /config
      initContainers:
      - image: gcr.io/heptio-images/contour:master
        imagePullPolicy: Always
        name: envoy-initconfig
        command: [&amp;quot;contour&amp;quot;]
        args: [&amp;quot;bootstrap&amp;quot;, &amp;quot;/config/contour.yaml&amp;quot;]
        volumeMounts:
        - name: contour-config
          mountPath: /config
      volumes:
      - name: contour-config
        emptyDir: {}
      dnsPolicy: ClusterFirst
      serviceAccountName: contour
      terminationGracePeriodSeconds: 30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;总共修改以下几处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将实例数修改为 1。&lt;/li&gt;
&lt;li&gt;将网络模式改为 &lt;code&gt;hostNetwork&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;删除 Pod 反亲和性配置，添加 Node 亲和性配置，调度到指定的节点。&lt;/li&gt;
&lt;li&gt;修改 contour 启动参数，将 &lt;code&gt;Listener&lt;/code&gt; 端口改为 80 和 443。&lt;/li&gt;
&lt;li&gt;将 Envoy 容器的暴露端口改为 80 和 443。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;部署：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl apply -f ./

namespace &amp;quot;heptio-contour&amp;quot; created
serviceaccount &amp;quot;contour&amp;quot; created
customresourcedefinition.apiextensions.k8s.io &amp;quot;ingressroutes.contour.heptio.com&amp;quot; created
deployment.extensions &amp;quot;contour&amp;quot; created
clusterrolebinding.rbac.authorization.k8s.io &amp;quot;contour&amp;quot; created
clusterrole.rbac.authorization.k8s.io &amp;quot;contour&amp;quot; created
service &amp;quot;contour&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-ingress-测试&#34;&gt;2. Ingress 测试&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;安装结束后，我们就可以来测试 Ingress 了。在 &lt;code&gt;deployment&lt;/code&gt; 目录下包含一个示例应用，可以直接使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl apply -f ../example-workload/kuard.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看创建好的资源：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get po,svc,ing -l app=kuard

NAME                       READY     STATUS    RESTARTS   AGE
kuard-bcc7bf7df-6h55x      1/1       Running   0          4m
kuard-bcc7bf7df-9sdnr      1/1       Running   0          4m
kuard-bcc7bf7df-ws57j      1/1       Running   0          4m

NAME        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
svc/kuard   10.254.85.181   &amp;lt;none&amp;gt;        80/TCP    4m

NAME        HOSTS     ADDRESS           PORTS     AGE
ing/kuard   *         192.168.123.249   80        4m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在在浏览器中输入 Contour 运行节点的 IP 地址或 DNS 域名来访问示例应用程序了。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/kuard.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-contour-工作原理&#34;&gt;3. Contour 工作原理&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Contour 同时支持 &lt;code&gt;Ingress&lt;/code&gt; 资源对象和 &lt;code&gt;IngressRoute&lt;/code&gt; 资源对象（通过 CRD 创建），这些对象都是为进入集群的请求提供路由规则的集合。这两个对象的结构和实现方式有所不同，但它们的核心意图是相同的，都是为进入集群的请求提供路由规则。如不作特殊说明，后面当我们描述 “Ingress” 时，它将同时适用于 &lt;code&gt;Ingress&lt;/code&gt; 和 &lt;code&gt;IngressRoute&lt;/code&gt; 对象。&lt;/p&gt;

&lt;p&gt;通常情况下，当 Envoy 配置了 &lt;code&gt;CDS&lt;/code&gt; 端点时，它会定期轮询端点，然后将返回的 JSON 片段合并到其运行配置中。如果返回到 Envoy 的集群配置代表当前的 Ingress 对象的集合，则可以将 Contour 视为从 &lt;code&gt;Ingress&lt;/code&gt; 对象到 &lt;code&gt;Envoy&lt;/code&gt; 集群配置的转换器。随着 Ingress 对象的添加和删除，Envoy 会动态添加并删除相关配置，而无需不断重新加载配置。&lt;/p&gt;

&lt;p&gt;在实践中，将 Ingress 对象转换为 Envoy 配置更加微妙，需要将 Envoy 中的 xDS 配置（包括 &lt;code&gt;CDS&lt;/code&gt;，&lt;code&gt;SDS&lt;/code&gt; 和 &lt;code&gt;RDS&lt;/code&gt;）映射到 Kubernetes 中。Contour 至少需要观察 &lt;code&gt;Ingress&lt;/code&gt;、&lt;code&gt;Service&lt;/code&gt; 和 &lt;code&gt;Endpoint&lt;/code&gt; 这几个资源对象以构建这些服务的响应，它通过 &lt;code&gt;client-go&lt;/code&gt; 的 &lt;a href=&#34;https://www.kubernetes.org.cn/2693.html&#34; target=&#34;_blank&#34;&gt;cache/informer&lt;/a&gt; 机制免费获得这些 &lt;code&gt;watchers&lt;/code&gt;。这些机制提供添加，更新和删除对象的边缘触发通知，以及通过 &lt;code&gt;watch API&lt;/code&gt; 执行查询对象的本地缓存的列表机制。&lt;/p&gt;

&lt;p&gt;Contour 将收集到的这些对象处理为虚拟主机及其路由规则的&lt;strong&gt;有向非循环图&lt;/strong&gt;（DAG），这表明 Contour 将有权构建路由规则的顶级视图，并将群集中的相应服务和TLS秘钥连接在一起。一旦构建了这个新的数据结构，我们就可以轻松实现 &lt;code&gt;IngressRoute&lt;/code&gt; 对象的验证，授权和分发。改数据结构导出的 &lt;code&gt;png&lt;/code&gt; 图片如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/dag.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Envoy API 调用和 Kubernetes API 资源之间的映射关系如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;CDS&lt;/span&gt; : 集群发现服务。映射为 Kubernetes 中的 &lt;code&gt;Service&lt;/code&gt; 以及一部分 Ingress 对象的 &lt;code&gt;TLS&lt;/code&gt; 配置。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;SDS&lt;/span&gt; : 服务发现服务。映射为 Kubernetes 中的 &lt;code&gt;Endpoint&lt;/code&gt;。Envoy 使用 SDS 自动获取 &lt;code&gt;Cluster&lt;/code&gt; 成员，这与 Endpoint 对象中包含的信息非常匹配。Envoy 使用 Contour 在 &lt;code&gt;CDS&lt;/code&gt; 响应中返回的名称查询 &lt;code&gt;SDS&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;RDS&lt;/span&gt; : 路由发现服务。映射为 Kubernetes 中的 &lt;code&gt;Ingress&lt;/code&gt;。提供了虚拟主机名和前缀路由信息的 RDS 与 Ingress 匹配得更好。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-映射关系详情&#34;&gt;4. 映射关系详情&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;cds&#34;&gt;CDS&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CDS&lt;/code&gt; 更像是 Kubernetes 中的 &lt;code&gt;Service&lt;/code&gt; 资源，因为 Service 是具体 &lt;code&gt;Endpoint&lt;/code&gt;（Pods）的抽象，Envoy Cluster 是指 Envoy 连接到的一组逻辑上相似的上游主机（参考下文的 RDS）。其中 &lt;code&gt;TLS&lt;/code&gt; 配置也是 CDS 的一部分，而 Kubernetes 中的 TLS 信息由 Ingress 提供，所以这部分之间的映射关系会有些复杂。&lt;/p&gt;

&lt;h3 id=&#34;sds&#34;&gt;SDS&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;SDS&lt;/code&gt; 更像是 Kubernetes 中的 &lt;code&gt;Endpoint&lt;/code&gt; 资源，这部分映射关系的实现最简单。Contour 将 Endpoint 的响应对象转换为 SDS 的 &lt;code&gt;{ hosts: [] }&lt;/code&gt; json 配置块。&lt;/p&gt;

&lt;h3 id=&#34;rds&#34;&gt;RDS&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RDS&lt;/code&gt; 更像是 Kubernetes 中的 &lt;code&gt;Ingress&lt;/code&gt; 资源。RDS 将前缀，路径或正则表达式之一路由到 Envoy 群集。Envoy 集群的名称可以从 Ingress 的 &lt;code&gt;IngressSpec&lt;/code&gt; 的配置项中获取（比如：&lt;code&gt;namespace/serviceName_servicePort&lt;/code&gt;），因为这是一个选择器，它会匹配 Service 对象被转换后返回的 CDS 对象。&lt;/p&gt;

&lt;h2 id=&#34;5-contour-架构分析&#34;&gt;5. Contour 架构分析&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Contour Ingress controller 由两个组件组成：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Envoy&lt;/code&gt; : 提供高性能反向代理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Contour&lt;/code&gt; : 充当 Envoy 的控制平面，为 Envoy 的路由配置提供统一的来源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些容器以 &lt;code&gt;Sidecar&lt;/code&gt; 的形式部署在同一个 &lt;code&gt;Pod&lt;/code&gt; 中，当然也包括了一些其他的配置。&lt;/p&gt;

&lt;p&gt;在 Pod 初始化期间，Contour 作为 &lt;code&gt;Init&lt;/code&gt; 容器运行，并将引导程序配置写入一个 temporary volume。该 &lt;code&gt;Volume&lt;/code&gt; 被传递给 Envoy 容器并告诉 Envoy 将其 Sidecar Contour 容器视为控制平面。&lt;/p&gt;

&lt;p&gt;初始化完成后，Envoy 容器启动，检索 Contour 写入的引导程序配置，并开始轮询 Contour 以热更新配置。如果控制平面无法访问，Envoy 将会进行优雅重试。&lt;/p&gt;

&lt;p&gt;Contour 相当于 Kubernetes API 的客户端。它监视 &lt;code&gt;Ingress&lt;/code&gt;，&lt;code&gt;Service&lt;/code&gt; 和 &lt;code&gt;Endpoint&lt;/code&gt; 对象，并通过将其对象缓存转换为相关的 &lt;code&gt;JSON&lt;/code&gt; 字段来充当其 Envoy 的控制平面。&lt;/p&gt;

&lt;p&gt;从 Kubernetes 到 Contour 的信息转换是通过 &lt;code&gt;SharedInformer&lt;/code&gt; 框架 watching API 来完成的；而从 Contour 到 Envoy 的信息转换是通过 Envoy 定期轮询来实现的。&lt;/p&gt;

&lt;h2 id=&#34;6-ingressroute-介绍&#34;&gt;6. IngressRoute 介绍&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34; target=&#34;_blank&#34;&gt;Ingress&lt;/a&gt; 对象从 Kubernetes 1.1 版本开始被引进，用来描述进入集群的请求的 HTTP 路由规则。但迄今为止 Ingress 对象还停留在 &lt;code&gt;beta&lt;/code&gt; 阶段，不同的 Ingress Controller 插件为了添加 HTTP 路由的额外属性，只能通过添加大量的 &lt;code&gt;annotation&lt;/code&gt; 来实现，而且每个插件的 annotation 都不一样，非常混乱。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IngressRoute&lt;/code&gt; CRD 的目标就是扩展 Ingress API 的功能，以便提供更丰富的用户体验以及解决原始设计中的缺点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目前 Contour 是唯一支持 IngressRoute CRD 的 Kubernetes Ingress Controller。&lt;/strong&gt;下面就来看看它与 Ingress 相比的优点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安全地支持多团队 Kubernetes 集群，能够限制哪些命名空间可以配置虚拟主机和 TLS 凭据。&lt;/li&gt;
&lt;li&gt;允许将路径或域名的路由配置分发给另一个命名空间。&lt;/li&gt;
&lt;li&gt;接受单个路由中的多个服务，并对它们之间的流量进行负载均衡。&lt;/li&gt;
&lt;li&gt;无需通过添加 &lt;code&gt;annotation&lt;/code&gt; 就可以定义服务权重和负载均衡策略。&lt;/li&gt;
&lt;li&gt;在创建时验证 IngressRoute 对象，并为创建后报告验证是否有效。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;从-ingress-到-ingressroute&#34;&gt;从 Ingress 到 IngressRoute&lt;/h3&gt;

&lt;p&gt;一个基本的 &lt;code&gt;Ingress&lt;/code&gt; 对象如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: basic
spec:
  rules:
  - host: foo-basic.bar.com
    http:
      paths:
      - backend:
          serviceName: s1
          servicePort: 80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个 Ingress 对象名为 &lt;code&gt;basic&lt;/code&gt;，它将传入的 HTTP 流量路由到头文件中 &lt;code&gt;Host:&lt;/code&gt; 字段值为 &lt;code&gt;foo-basic.bar.com&lt;/code&gt; 且端口为 80 的 &lt;code&gt;s1&lt;/code&gt; 服务。该路由规则通过 &lt;code&gt;IngressRoute&lt;/code&gt; 来实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# ingressroute.yaml
apiVersion: contour.heptio.com/v1beta1
kind: IngressRoute
metadata:
  name: basic
spec:
  virtualhost:
    fqdn: foo-basic.bar.com
  routes:
    - match: /
      services:
        - name: s1
          port: 80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对应关系很简单，我就不再详细介绍了，更多功能配置可以参考官方仓库的文档：&lt;a href=&#34;https://github.com/heptio/contour/blob/master/docs/ingressroute.md&#34; target=&#34;_blank&#34;&gt;IngressRoute&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;可视化-contour-的内部有向非循环图&#34;&gt;可视化 Contour 的内部有向非循环图&lt;/h3&gt;

&lt;p&gt;Contour 使用 DAG 对其配置进行建模，可以通过以 &lt;a href=&#34;https://en.wikipedia.org/wiki/DOT_(graph_description_language)&#34; target=&#34;_blank&#34;&gt;DOT&lt;/a&gt; 格式输出 DAG 的调试端点对其进行可视化，当然需要先在系统中安装 &lt;code&gt;graphviz&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yum install -y graphviz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载图表并将其另存为 &lt;code&gt;PNG&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Port forward into the contour pod
$ CONTOUR_POD=$(kubectl -n heptio-contour get pod -l app=contour -o jsonpath=&#39;{.items[0].metadata.name}&#39;)
# Do the port forward to that pod
$ kubectl -n heptio-contour port-forward $CONTOUR_POD 6060
# Download and store the DAG in png format
$ curl localhost:6060/debug/dag | dot -T png &amp;gt; contour-dag.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我自己保存的 PNG 图片如下所示：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/contour-dag.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-参考&#34;&gt;7. 参考&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heptio/contour/blob/master/docs/about.md&#34; target=&#34;_blank&#34;&gt;About Contour and Envoy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heptio/contour/blob/master/docs/architecture.md&#34; target=&#34;_blank&#34;&gt;Contour architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.heptio.com/making-it-easy-to-use-envoy-as-a-kubernetes-load-balancer-dde82959f171&#34; target=&#34;_blank&#34;&gt;Making it easy to use Envoy as a Kubernetes load balancer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;扫一扫关注微信公众号&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
h2 {
    display: block;
    font-size: 1.5em;
    margin-block-start: 0.83em;
    margin-block-end: 0.83em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    font-weight: bold;
}
h2::before {
    content: &#34;#&#34;;
    margin-right: 5px;
    color: #2d96bd;
}
#red {
color: red;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>为 Envoy 开启 TLS 验证实战</title>
      <link>https://www.yangcs.net/posts/setting-up-ssl-in-envoy-practice/</link>
      <pubDate>Wed, 26 Sep 2018 17:43:00 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/setting-up-ssl-in-envoy-practice/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;我的博客之前是使用 &lt;code&gt;Nginx&lt;/code&gt; 来反代的，由于 Nginx 性能优异，目前有很多国内网站采用 Nginx 作为 Web 服务器，而且参考文档比较丰富，无论是对于其部署，配置还是调优都更为有经验。但是还是会碰到几个绕不开的问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nginx 的反向代理不支持 &lt;code&gt;http2/grpc&lt;/code&gt; (好像今年 3 月份刚支持)&lt;/li&gt;
&lt;li&gt;不像 Envoy 几乎所有的网络配置都可以利用 &lt;code&gt;xDS API&lt;/code&gt; 来实现动态变更，Nginx 缺乏有效的配置热变更机制(除非深入开发或者不断地 &lt;code&gt;reload&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;Nginx 的很多微服务功能都是要买 Nginx Plus 才有的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34;&gt;Envoy&lt;/a&gt; 是一款现代化的，高性能，小体积的边缘及服务代理，浑身散发出一股时尚潮流的气息。作为一名斜杠青年，在经过一定地了解后，我果断入了 Envoy 的坑。&lt;/p&gt;

&lt;p&gt;关于如何为 Envoy 开启证书验证可以参考我之间的文章：&lt;a href=&#34;https://www.yangcs.net/posts/setting-up-ssl-in-envoy/&#34; target=&#34;_blank&#34;&gt;为 Envoy 启用证书验证&lt;/a&gt;。本文将直接进入实战部分，通过 Envoy 来反向代理我的博客静态页面，并且加密客户端和 Envoy 代理之间的所有流量。&lt;/p&gt;

&lt;h2 id=&#34;1-方案架构&#34;&gt;1. 方案架构&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;本方案涉及到两层 Envoy：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先会有一个前端代理在某个地方单独运行。前端代理的工作是给其他地方提供一个入口。来自外部的传入连接请求到这里，前端代理将会决定他们在内部的转发路径。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其次，博客静态页面由 nginx 提供，同时运行一个 “服务 Envoy”，它与 nginx 容器共享 &lt;code&gt;network nemspace&lt;/code&gt;（相当于 Kubernetes 的 &lt;code&gt;Sidecar&lt;/code&gt;）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;所有的 Envoy 形成一个网格，然后在他们之间共享路由信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意，通常情况下你也可以只使用前端代理，然后去掉服务 Envoy 这一层。但是，使用完整网格的话，服务 Envoy 可以对应用服务进行健康监控等，让网格知道尝试联系一个挂掉的服务是否是毫无意义的。此外，Envoy 的统计数据收集最适合用在全网格上。&lt;/p&gt;

&lt;p&gt;但本文需要开启 TLS 验证，如果前端代理开启了 TLS 验证，那么必须配合服务 Envoy 使用，否则验证将无法通过。&lt;/p&gt;

&lt;h2 id=&#34;2-部署服务-envoy&#34;&gt;2. 部署服务 Envoy&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;我的博客是通过 hugo 生成的，其他生成静态页面的软件类似，都可以采用我的方案。由于我的 hugo 根目录是 &lt;code&gt;/home/hugo&lt;/code&gt;，首先进入该目录，然后创建容器编排的 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;2&#39;
services:

  hugo:
    image: nginx:alpine
    restart: always
    volumes:
      - /home/hugo/public:/usr/share/nginx/html ①
    networks:
      - default 
    expose:
      - &amp;quot;80&amp;quot;
      - &amp;quot;8080&amp;quot;

  service-envoy:
    image: envoyproxy/envoy-alpine:latest
    restart: always
    volumes:
      - ./service-envoy.yaml:/etc/envoy/envoy.yaml ②
    network_mode: &amp;quot;service:hugo&amp;quot; ③

networks:
  default:
    external:
      name: yang ④
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;① : 将博客的静态页面挂载到 nginx 的 &lt;code&gt;root&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;② : 将服务 Envoy 的配置文件挂载到 Envoy 容器中。&lt;/li&gt;
&lt;li&gt;③ : 与 hugo 容器共享 &lt;code&gt;network namespace&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;④ : 这是我自定义的网络，你可以换成你自己的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来需要创建服务 Envoy 的配置文件 &lt;code&gt;service-envoy.yaml&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080 ①
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: service
              domains:
              - &amp;quot;*&amp;quot;
              routes:
              - match:
                  prefix: &amp;quot;/&amp;quot;
                route:
                  cluster: local_service
          http_filters:
          - name: envoy.router
            config: {}
  clusters:
  - name: local_service
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    hosts:
    - socket_address:
        address: 127.0.0.1
        port_value: 80 ②
admin:
  access_log_path: &amp;quot;/dev/null&amp;quot;
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8081
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;① &lt;code&gt;8080&lt;/code&gt; : 服务 Envoy 的监听端口。&lt;/li&gt;
&lt;li&gt;② &lt;code&gt;80&lt;/code&gt; : hugo 静态页面的监听端口。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-部署前端代理&#34;&gt;3. 部署前端代理&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;在 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件中添加前端代理部分：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#39;2&#39;
services:

  ...
  front-envoy:
    image: envoyproxy/envoy
    restart: always
    volumes:
      - ./front-envoy.yaml:/etc/envoy/envoy.yaml
      - /etc/letsencrypt:/etc/letsencrypt
    labels:
      EnvironmentName: &amp;quot;proxy&amp;quot;
      ServiceName: &amp;quot;envoy&amp;quot;
      ProxyMode: &amp;quot;tcp&amp;quot;
    networks:
      - default
    expose:
      - &amp;quot;80&amp;quot;
      - &amp;quot;443&amp;quot;
    ports:
      - &amp;quot;80:80&amp;quot;
      - &amp;quot;443:443&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建前端代理需要的配置文件 &lt;code&gt;front-envoy.yaml&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto ①
          stat_prefix: ingress_http
          route_config:
            virtual_hosts:
            - name: backend
              domains: ②
              - &amp;quot;yangcs.net&amp;quot;
              - &amp;quot;www.yangcs.net&amp;quot;
              routes:
              - match:
                  prefix: &amp;quot;/&amp;quot;
                redirect:
                  path_redirect: &amp;quot;/&amp;quot;
                  https_redirect: true
          http_filters:
          - name: envoy.router
            config: {}
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 443
    filter_chains:
    - tls_context:
        common_tls_context:
          alpn_protocols: h2,http/1.1 ③
          tls_certificates: ④
            - certificate_chain:
                filename: &amp;quot;/etc/letsencrypt/live/www.yangcs.net/fullchain.pem&amp;quot;
              private_key:
                filename: &amp;quot;/etc/letsencrypt/live/www.yangcs.net/privkey.pem&amp;quot;
      filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - &amp;quot;yangcs.net&amp;quot;
              - &amp;quot;www.yangcs.net&amp;quot;
              routes:
              - match:
                  prefix: &amp;quot;/&amp;quot;
                route:
                  cluster: hugo
          http_filters:
          - name: envoy.router
            config: {}
  clusters:
  - name: hugo
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    hosts:
    - socket_address:
        address: hugo
        port_value: 8080
admin:
  access_log_path: &amp;quot;/dev/null&amp;quot;
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;① : 编码/解码方式。参考：&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#enum-config-filter-network-http-connection-manager-v2-httpconnectionmanager-codectype&#34; target=&#34;_blank&#34;&gt;HttpConnectionManager.CodecType&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;② : 允许访问的域名（这里使用公网可以访问的域名）。&lt;/li&gt;
&lt;li&gt;③ : TLS 监听器支持 &lt;code&gt;ALPN&lt;/code&gt;。HTTP 连接管理器使用这个信息（以及协议接口）来确定客户端使用的是 &lt;code&gt;HTTP/1.1&lt;/code&gt; 还是 &lt;code&gt;HTTP/2&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;④ : 网站使用的证书。可以通过 &lt;a href=&#34;https://letsencrypt.org/&#34; target=&#34;_blank&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 申请免费的证书。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他配置详细说明请参考：&lt;a href=&#34;https://www.yangcs.net/posts/setting-up-ssl-in-envoy/&#34; target=&#34;_blank&#34;&gt;为 Envoy 启用证书验证&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;准备好所有配置以后，我们就可以通过以下命令来启动所有服务了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose up -d

Creating front-proxy_hugo_1        ... done
Creating front-proxy_front-envoy_1 ... done
Creating front-proxy_service-envoy_1 ... done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来就可以通过公网域名访问博客网站啦！没错，你现在浏览的我的博客就是通过 Envoy 反向代理的。&lt;/p&gt;

&lt;style&gt;
h2 {
    display: block;
    font-size: 1.5em;
    margin-block-start: 0.83em;
    margin-block-end: 0.83em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    font-weight: bold;
}
h2::before {
    content: &#34;#&#34;;
    margin-right: 5px;
    color: #2d96bd;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 准入控制介绍</title>
      <link>https://www.yangcs.net/posts/kubernetes-extensible-admission/</link>
      <pubDate>Sat, 22 Sep 2018 11:17:11 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-extensible-admission/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-什么是准入控制&#34;&gt;1. 什么是准入控制&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;准入控制（Admission Controller）是 Kubernetes API Server 用于拦截请求的一种手段。&lt;code&gt;Admission&lt;/code&gt; 可以做到对请求的资源对象进行校验，修改。&lt;strong&gt;&lt;code&gt;service mesh&lt;/code&gt; 最近很火的项目 &lt;code&gt;Istio&lt;/code&gt; 天生支持 Kubernetes，利用的就是 Admission 对服务实例自动注入 sidecar。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;假如对 Kubernetes 有一定的了解的话，应该会知道在 Kubernetes 中还有 &lt;code&gt;authn/authz&lt;/code&gt;，为什么还会引入 admission 这种机制？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;authn/authz&lt;/span&gt; 是 Kubernetes 的认证和鉴权，运行在 &lt;code&gt;filter&lt;/code&gt; 中，只能获取 http 请求 header 以及证书，并不能获取请求的 &lt;code&gt;body&lt;/code&gt;。所以 authn/authz 只能对客户端进行认证和鉴权，不可以对请求的对象进行任何操作，因为这里根本还获取不到对象。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;Admission&lt;/span&gt; 运行在 API Server 的增删改查 &lt;code&gt;handler&lt;/code&gt; 中，可以自然地操作 API resource。它是在经过授权之后，资源持久化之前的一个处理 API server 请求的步骤。准入过程能获取到和认证过程一致的信息（用户、URL 等），以及绝大多数 API 请求的完整报文。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;准入阶段由不同的插件组成，每个插件都能 “各司其职”，并明确知道自己要检查的对象结构。例如：&lt;code&gt;PodNodeSelector&lt;/code&gt;（影响调度决策），&lt;code&gt;PodSecurityPolicy&lt;/code&gt;（防止升级的容器）和 &lt;code&gt;ResourceQuota&lt;/code&gt;（为每个 Namespace 限制资源配额）。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Screen%20Shot%202018-01-11%20at%203.22.07%20PM.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;准入分为两个阶段：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;修改 (Mutation) 阶段&lt;/span&gt; : 在对象持久化之前修改对象的主体内容以及拒绝 API 请求。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;验证 (Validation) 阶段&lt;/span&gt; ：在对象持久化之前进行校验以及拒绝 API 请求。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个准入插件可以在这两个阶段应用，但是&lt;strong&gt;所有的修改阶段都发生在验证阶段之前。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;修改-mutation-阶段&#34;&gt;修改 （Mutation）阶段&lt;/h3&gt;

&lt;p&gt;Admission 的 Mutation 阶段允许在资源内容生成前进行修改。因为同一个字段在 Admission 链上可以被多次修改，因此 Admission 插件的执行顺序很重要。&lt;/p&gt;

&lt;p&gt;准入修改插件（Mutating Admission Plugin）中的一个例子就是 &lt;code&gt;PodNodeSelector&lt;/code&gt;，它使用 Namespace 的一个 annotation：&lt;code&gt;namespace.annotations[“scheduler.alpha.kubernetes.io/node-selector”]&lt;/code&gt; 来查找标签选择器并将其添加到 &lt;code&gt;pod.spec.nodeselector&lt;/code&gt; 字段。这一功能正向限制了特定 Namespace 中的 pod 能够落在哪个节点上，这与提供反向限制的 &lt;code&gt;taints&lt;/code&gt; 正相反（也是通过 Admission 插件来实现的）。&lt;/p&gt;

&lt;h3 id=&#34;验证-validating-阶段&#34;&gt;验证 （Validating）阶段&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;我们可以在 Admisson 的验证阶段来检查特定 API 资源以保证其不变。验证阶段在所有的 mutators 完成之后运行，以确保资源在做完验证之后不会被再次改变。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;准入验证插件（Validation Admission Plugin）的一个例子也是 &lt;code&gt;PodNodeSelector&lt;/code&gt; 插件，它可以确保所有 pod 的 &lt;code&gt;spec.nodeSelector&lt;/code&gt; 字段都能符合 Namespace 上节点选择器的约束。即使在 Mutating 链中运行 PodNodeSelector 之后，有其他修改插件试图更改 &lt;code&gt;spec.nodeSelector&lt;/code&gt; 字段，验证链中的 PodNodeSelector 插件也会因验证失败而阻止 API 资源的创建。&lt;/p&gt;

&lt;p&gt;下面将对准入控制工作流做一番详解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/14601537526913.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;API Server 接收到客户端请求后首先进行认证鉴权，认证鉴权通过后才会进行后续的 &lt;code&gt;endpoint handler&lt;/code&gt; 处理。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 API Server 接收到对象后首先根据 http 的&lt;strong&gt;路径&lt;/strong&gt;可以知道对象的版本号，然后将 &lt;code&gt;request body&lt;/code&gt; 反序列化成 &lt;code&gt;versioned object&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;versioned object 转化为 &lt;code&gt;internal object&lt;/code&gt;，即没有版本的内部类型，这种资源类型是所有 versioned 类型的超集。只有转化为 internal 后才能适配所有的客户端 versioned object 的校验。&lt;/li&gt;
&lt;li&gt;Admission Controller 具体的 admit 操作，可以通过这里修改资源对象，例如为 Pod 挂载一个默认的 Service Account 等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;API Server internal object validation&lt;/code&gt;，校验某个资源对象数据和格式是否合法，例如：Service Name 的字符个数不能超过 63 等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Admission Controller validate&lt;/code&gt;，可以自定义任何的对象校验规则。&lt;/li&gt;
&lt;li&gt;internal object 转化为 versioned object，并且持久化存储到 etcd。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-如何使用准入控制&#34;&gt;2. 如何使用准入控制&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Kubernetes 1.10 之前的版本可以使用 &lt;code&gt;--admission-control&lt;/code&gt; 打开准入控制。同时 &lt;code&gt;--admission-control&lt;/code&gt; 的顺序决定 Admission 运行的先后。其实这种方式对于用户来讲其实是挺复杂的，因为这要求用户对所有的准入控制器需要完全了解。&lt;/p&gt;

&lt;p&gt;如果使用 Kubernetes 1.10 之后的版本，&lt;code&gt;--admission-control&lt;/code&gt; 已经废弃，建议使用
&lt;code&gt;--enable-admission-plugins&lt;/code&gt; 和 &lt;code&gt;--disable-admission-plugins&lt;/code&gt; 指定需要打开或者关闭的准入控制器。 同时&lt;strong&gt;用户指定的顺序并不影响实际准入控制器的执行顺序&lt;/strong&gt;，对用户来讲非常友好。&lt;/p&gt;

&lt;p&gt;值得一提的是，有些准入控制器可能会使用 &lt;code&gt;Alpha&lt;/code&gt; 版本的 API，这时必须首先使能其使用的 API 版本。否则准入控制器不能工作，可能会影响系统功能。&lt;/p&gt;

&lt;h2 id=&#34;3-admission-webhook&#34;&gt;3. Admission Webhook&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;目前 Kubernetes 中已经有非常多的 Admission 插件， 但是并不能保证满足所有开发者的需求。 众所周知，Kbernetes 之所以受到推崇，它的可扩展能力功不可没。Admission 也提供了一种 webhook 的扩展机制。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MutatingAdmissionWebhook&lt;/code&gt; ：在对象持久化之前进行修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ValidatingAdmissionWebhook&lt;/code&gt; ：在对象持久化之前进行校验&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Admission Webhook 允许 Kubernetes 安装人员或集群管理员，不需要进行重新编译，就可以直接添加修改（Mutation）和验证（Validation）这两种插件到 &lt;code&gt;kube-apiserver&lt;/code&gt; 和任何基于 k8s.io/apiserver 1.9 扩展的 apiserver (如 &lt;code&gt;metrics&lt;/code&gt;, &lt;code&gt;service-catalog&lt;/code&gt;, &lt;code&gt;kube-projects&lt;/code&gt; 等) 准入链中。这两种 Admission Webhook 插件分别会在修改和验证链的最后执行，与编译的准入插件具有相同的功能。&lt;/p&gt;

&lt;p&gt;可能有读者接触过另外一种动态可扩展的机制 &lt;code&gt;Initializers&lt;/code&gt;，不过至今还是 Apha 特性，社区讨论有可能会把它移除。所以选择动态 Admission 首选 webhook。&lt;/p&gt;

&lt;h3 id=&#34;webhook-admission-插件的优势&#34;&gt;Webhook Admission 插件的优势&lt;/h3&gt;

&lt;p&gt;Webhook Admission 插件允许对任何 API server 的任何资源进行修改和验证，所以应用场景非常广泛，比较常见的用例包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;修改如 pod 这样的资源：&lt;/strong&gt;&lt;code&gt;Istio&lt;/code&gt; 通过修改 pod 资源，把 &lt;code&gt;sidecar&lt;/code&gt; 容器注入到 pod 中。你也可以编写一个能够强制将镜像 tag 解析成 SHA 的插件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名限制：&lt;/strong&gt;在多租户系统上，保留 Namespace 已经成为一种用例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复杂的 CustomResource 验证：&lt;/strong&gt;因为整个对象是可见的，所以插件可以对字段间依赖（A 需要 B）甚至外部资源（对比 &lt;code&gt;LimitRanges&lt;/code&gt;）进行复杂的验证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全响应：&lt;/strong&gt;如果你把镜像 tag 改成了 &lt;code&gt;SHA&lt;/code&gt;，你可以通过写一个插件来阻止对应某些 SHA 的镜像运行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;注册&#34;&gt;注册&lt;/h3&gt;

&lt;p&gt;这两种类型的 Webhook Admission 插件都需要在 API 中注册，所有 API servers（&lt;code&gt;kube-apiserver&lt;/code&gt; 和所有扩展 API servers ）都共享一个通用配置。在注册过程中，一个 Webhook Admission 插件描述了以下信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如何连接到 Webhook Admission Server&lt;/li&gt;
&lt;li&gt;如何验证 Webhook Admission Server（是否是我们期望的 server）&lt;/li&gt;
&lt;li&gt;数据应该发送到 Server 的哪个 URL 路径&lt;/li&gt;
&lt;li&gt;它将处理哪些资源和哪些 HTTP 动词&lt;/li&gt;
&lt;li&gt;API server 在连接失败后应该做什么（例如如果 Webhook Admission Server 停止服务了）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: namespacereservations.admission.online.openshift.io
webhooks:
- name: namespacereservations.admission.online.openshift.io ①
  clientConfig:  ②
    service:
      namespace: default
      name: kubernetes
      path: /apis/admission.online.openshift.io/v1alpha1/namespacereservations
    caBundle: KUBE\_CA\_HERE ⑤
  rules:  ③
  - apiGroups:
    - &amp;quot;&amp;quot;
    apiVersions:
    - &amp;quot;&amp;quot;
    operations:
    - CREATE
    resources:
    - namespaces
  failurePolicy: Fail  ④
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;① &lt;span id=&#34;inline-blue&#34;&gt;name&lt;/span&gt; : Webhook 的名称。mutating Webhooks 会根据名称进行排序。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;② &lt;span id=&#34;inline-blue&#34;&gt;clientConfig&lt;/span&gt; : 提供关于如何连接、信任以及发送数据给 Webhook Admission Server 的信息。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;③ &lt;span id=&#34;inline-blue&#34;&gt;rules&lt;/span&gt; : 用来描述 API server 应该在什么时候调用 Admission 插件。在这个例子中，只有创建 &lt;code&gt;Namespace&lt;/code&gt; 的时候才触发。你可以指定任何资源，例如 serviceinstances.servicecatalog.k8s.io 的 create 操作也是可行的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;④ &lt;span id=&#34;inline-blue&#34;&gt;failurePolicy&lt;/span&gt; : 如果 Webhook Admission Server 无法连接时如何处理。有两个选项分别是 “Ignore”（故障时开放） 和 “Fail”（故障时关闭）。“故障时开放”可能会导致无法预测的行为。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;⑤ &lt;span id=&#34;inline-blue&#34;&gt;caBundle&lt;/span&gt; : 注意 API server 调用 Webhook 时一定是通过 TLS 认证的，所以 MutatingWebhookConfiguration 中一定要配置 caBundle。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;对比 &lt;code&gt;initializerConfiguration&lt;/code&gt;，ValidatingWebhookConfiguration 和 MutatingWebhookConfiguration 在 &lt;code&gt;rule&lt;/code&gt; 的定义时，增加了 operations field，在 resources 定义时候可以指定 &lt;code&gt;subresource&lt;/code&gt;，格式为 resource/subresource。&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;认证和信任&#34;&gt;认证和信任&lt;/h3&gt;

&lt;p&gt;由于 Webhook Admission 插件具有强大的功能（他们可以查看 API 资源内容中任何发给他们的请求，并可以通过插件进行修改），所以在使用时需要考虑的重点是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;各个 &lt;code&gt;API servers&lt;/code&gt; 如何验证其与 Webhook Admission Server 的连接。&lt;/li&gt;
&lt;li&gt;Webhook Admission Server 如何准确地认证哪个 API server 正在与它连接。&lt;/li&gt;
&lt;li&gt;该特定的 API server 是否有权进行请求。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;连接可以分为以下三大类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从 &lt;code&gt;kube-apiserver&lt;/code&gt; 或 &lt;code&gt;extension-apiservers&lt;/code&gt; 到运行在集群外部的 Admission Webhooks&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;kube-apiserver&lt;/code&gt; 到运行在集群内部的 Admission Webhooks。&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;extension-apiservers&lt;/code&gt; 到运行在集群内部的 Admission Webhooks。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了支持这三大类连接，Webhook Admission 插件可以支持从 &lt;code&gt;kubeconfig&lt;/code&gt; 文件中读取连接各个 server 的信息。由于认证/授权和访问路径是由用户所连接的服务器所决定的，因此为了与运行在集群外部的 Admission Webhooks 进行交互，除了手动配置这个文件之外，实际上没有其他选择。&lt;/p&gt;

&lt;p&gt;对于在集群内运行的 Admission Webhook 来说，一个巧妙构建的 Webhook Admission Server 和拓扑结构，就是能够利用 Admission 插件中内置的安全默认值，并具有可从任何 API server 运行的安全、可移植和零配置的拓扑结构。&lt;/p&gt;

&lt;h2 id=&#34;4-简单安全-可移植的拓扑结构&#34;&gt;4. 简单安全，可移植的拓扑结构&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;如果你建立的 Webhook Admission Server 也是一个 &lt;code&gt;extension API server&lt;/code&gt;，就有可能把它作为一个普通的 API server 来聚合。这具有许多优点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;你的 Webhook 在默认 kube-apiserver 服务 &lt;code&gt;kubernetes.default.svc&lt;/code&gt; 下变得可用 （例如，&lt;code&gt;https://kubernetes.default.svc/apis/admission.example.com/v1/mymutatingadmissionreviews&lt;/code&gt;）。另一个好处是，你可以使用 kubectl 进行测试。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你的 Webhook 会自动（无需任何配置）使用 kube-apiserver 提供的集群内认证和授权。你可以使用正常的 RBAC 规则限制对 Webhook 的访问。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你的 extension API servers 和 kube-apiserver （无需任何配置）可以自动利用其集群内的凭证与 Webhook 进行通信。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;因为中间会经过 kube-apiserver 这个安全的前端代理，所以 extension API servers 不会将其 &lt;code&gt;service account token&lt;/code&gt; 泄漏给 Webhook。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/pasted%20image%200.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;简而言之：一个安全的拓扑结构可以使用 API server 聚合 (API server aggregation) 的所有安全机制，不需要额外的配置。&lt;/strong&gt;其他的拓扑结构也是可行的，但是需要额外的手动配置以及创建安全设置工作。尤其是像 &lt;code&gt;service catalog&lt;/code&gt; 这种 extension API servers，上面的拓扑结构就是零配置，并且可移植到任何 Kubernetes 集群中。&lt;/p&gt;

&lt;h2 id=&#34;5-如何使用-admission-webhook&#34;&gt;5. 如何使用 Admission Webhook&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Webhook Admission 属于同步调用，需要用户部署自己的 webhook server，创建自定义的配置资源对象： &lt;code&gt;ValidatingWebhookConfiguration&lt;/code&gt; 或 &lt;code&gt;MutatingWebhookConfiguration&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;开发-webhook-server&#34;&gt;开发 Webhook Server&lt;/h3&gt;

&lt;p&gt;这里我推荐参考社区 &lt;code&gt;e2e&lt;/code&gt; 测试用的 server，对细节源代码感兴趣的读者可以自行参考
&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/v1.10.0-beta.1/test/images/webhook/main.go&#34; target=&#34;_blank&#34;&gt;github.com/kubernetes/…&lt;/a&gt;，这里面利用 golang 标准库实现的一个基本的 http server，并注册多个路由，同时服务于多种 resource 的准入控制。重点关注一下资源对象的 &lt;code&gt;decode&lt;/code&gt; 过程，这是 &lt;code&gt;k8s apimachinery&lt;/code&gt; 的高级功能。利用了 apimachinery 的 &lt;code&gt;scheme&lt;/code&gt; 的能力，使用之前必须要将 api 注册到 scheme 中，代码详见：
&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/v1.10.0-beta.1/test/images/webhook/scheme.go&#34; target=&#34;_blank&#34;&gt;github.com/kubernetes/…&lt;/a&gt;。一个典型的 webhook 修改资源对象（Pod）的样例代码如下所示。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt; func mutatePods(ar v1beta1.AdmissionReview) *v1beta1.AdmissionResponse {
   glog.V(2).Info(&amp;quot;mutating pods&amp;quot;)
   podResource := metav1.GroupVersionResource{Group: &amp;quot;&amp;quot;, Version: &amp;quot;v1&amp;quot;, Resource: &amp;quot;pods&amp;quot;}
   if ar.Request.Resource != podResource {
      glog.Errorf(&amp;quot;expect resource to be %s&amp;quot;, podResource)
      return nil
   }

   raw := ar.Request.Object.Raw
   pod := corev1.Pod{}
   deserializer := codecs.UniversalDeserializer()
// pod的解码，利用apimachinery
   if _, _, err := deserializer.Decode(raw, nil, &amp;amp;pod); err != nil {
      glog.Error(err)
      return toAdmissionResponse(err)
   }
   reviewResponse := v1beta1.AdmissionResponse{}
   reviewResponse.Allowed = true
   if pod.Name == &amp;quot;webhook-to-be-mutated&amp;quot; {
      reviewResponse.Patch = []byte(addInitContainerPatch)
      pt := v1beta1.PatchTypeJSONPatch
      reviewResponse.PatchType = &amp;amp;pt
   }
   return &amp;amp;reviewResponse
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;部署-webhook-server&#34;&gt;部署 Webhook Server&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl create –f webhook-server.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Namespace
metadata:
  name: e2e-tests-webhook-gbgt6
spec:
  finalizers:
  - kubernetes
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: sample-webhook
    webhook: &amp;quot;true&amp;quot;
  name: sample-webhook-deployment
  namespace: e2e-tests-webhook-gbgt6
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-webhook
      webhook: &amp;quot;true&amp;quot;
  template:
    metadata:
      labels:
        app: sample-webhook
        webhook: &amp;quot;true&amp;quot;
    spec:
      containers:
      - args:
        - --tls-cert-file=/webhook.local.config/certificates/tls.crt
        - --tls-private-key-file=/webhook.local.config/certificates/tls.key
        - --alsologtostderr
        - -v=4
        - 2&amp;gt;&amp;amp;1
        image: gcr.io/kubernetes-e2e-test-images/k8s-sample-admission-webhook-amd64:1.10v2
        imagePullPolicy: IfNotPresent
        name: sample-webhook
        volumeMounts:
        - mountPath: /webhook.local.config/certificates
          name: webhook-certs
          readOnly: true
      volumes:
      - name: webhook-certs
        secret:
          defaultMode: 420
          secretName: sample-webhook-secret
---
apiVersion: v1
kind: Service
metadata:
  labels:
    test: webhook
  name: e2e-test-webhook
  namespace: e2e-tests-webhook-gbgt6
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 443
  selector:
    webhook: &amp;quot;true&amp;quot;
  sessionAffinity: None
  type: ClusterIP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建 webhook server Deployment 以及 Service，供 API Server 调用。&lt;/p&gt;

&lt;h3 id=&#34;创建-mutatingwebhookconfiguration&#34;&gt;创建 MutatingWebhookConfiguration&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl create –f webhook-config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: e2e-test-mutating-webhook-pod
webhooks:
- clientConfig:
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMyRENDQWNDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFkTVJzd0dRWURWUVFERXhKbE1tVXQKYzJWeWRtVnlMV05sY25RdFkyRXdIaGNOTVRnd056RTVNRGMwT1RJeFdoY05Namd3TnpFMk1EYzBPVEl4V2pBZApNUnN3R1FZRFZRUURFeEpsTW1VdGMyVnlkbVZ5TFdObGNuUXRZMkV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBCkE0SUJEd0F3Z2dFS0FvSUJBUURFVVFEWVN6SGl3SUFHU1dHSWRBSmVBbnMrNFhaYjlZc3VuQlBVTkJPdHZqeFoKV3NSbUxydE0zVU9lcEszeGsvMzZCSS96RkdXdUNpMlJ0TWUxSWtEa2tVMzNEZE83K0ExVyt2NVZNVnFqL0lDTApsc29USml3TFhTcGowTHNwSUNVdGtqT1dlRjVhK3lJVHgyR01TMG9ZbWtuaHB0RXMrc2tKQjFMWm1uVTBaWFpzClRKak9Lb05ueHdVaTl4QnRUTXBQRWw2cVhmb3dCWlpvYjlkUzNtNzFLbjJCdU5Ec0s3YnVRcGJvdk9XdUQyNDAKdzNLQVJnT04xcjA4Vm4zd1I1MHVXS09tSkVsLzRUZ2JnSTRkaG85WHNIWUhUdnk4R3JRMXhYZE43ZEhSTlpHNQo5aDhmOUUzdjg1VWxwSEVWQThqUHB4RE5SSm9qRXVGQk9raFJEZEY1QWdNQkFBR2pJekFoTUE0R0ExVWREd0VCCi93UUVBd0lDcERBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDWWl4VUsKYkhsRUpCK2t4THdqdktySDQ1OVVsNUJjb0VXZE1BNnArUC8yWXVZa2NuWC9GRVNjUFRxUS9vdkF3ejU1ZG1FUwpJTjVZOWd2ZlJxdWhZcEdWOHVFSWpzVkczTjdKQm1wM0NyclEyd3FYeHV3cndkVXV1dDltQSt2RkQ4Q2FQSE8xCmVad1J6NEkzTktFQ0xHMHJXQWxseEVvUm9tQ2UvaWZIUnRNRklTRk5sSnZVNlhIbzFDVWNFQ2FwOG9hYXN2cFcKT2JBQjVqQzc5WWJXN2lWVm54cjZGMnRvOG9oSEdNSEpXR1pwSTNKbVpNbGVOK01kVm5ySFdXSXBkOG9iS2E3TgpqSlZTczgzRmlDMzd4d2dqMUQyaTNHUnh5bHNKZEdJWTl4WVpQVmNNUTh6Z2FMMUpJUk1BdVZYbHczUkRzSDR0Cms5WmFybGY1NG9BOUN0Nk8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    service:
      name: e2e-test-webhook
      namespace: e2e-tests-webhook-gbgt6
      path: /mutating-pods
  failurePolicy: Ignore
  name: adding-init-container.k8s.io
  namespaceSelector: {}
  rules:
  - apiGroups:
    - &amp;quot;&amp;quot;
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - pods
    - 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rules 表示对于 &lt;code&gt;core/v1/pods&lt;/code&gt; 资源对象创建的时候调用 mutating webhook。server 的地址及路径通过 &lt;code&gt;clientConfig&lt;/code&gt; 指明。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/mutating-pods&lt;/code&gt; 是指调用 webhook server 执行 mutatePods，为 pod 增加 init initContainers。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func mutatePods(ar v1beta1.AdmissionReview) *v1beta1.AdmissionResponse {
   glog.V(2).Info(&amp;quot;mutating pods&amp;quot;)
   podResource := metav1.GroupVersionResource{Group: &amp;quot;&amp;quot;, Version: &amp;quot;v1&amp;quot;, Resource: &amp;quot;pods&amp;quot;}
   if ar.Request.Resource != podResource {
      glog.Errorf(&amp;quot;expect resource to be %s&amp;quot;, podResource)
      return nil
   }

   raw := ar.Request.Object.Raw
   pod := corev1.Pod{}
   deserializer := codecs.UniversalDeserializer()
   if _, _, err := deserializer.Decode(raw, nil, &amp;amp;pod); err != nil {
      glog.Error(err)
      return toAdmissionResponse(err)
   }
   reviewResponse := v1beta1.AdmissionResponse{}
   reviewResponse.Allowed = true
   if pod.Name == &amp;quot;webhook-to-be-mutated&amp;quot; {
      reviewResponse.Patch = []byte(addInitContainerPatch)
      pt := v1beta1.PatchTypeJSONPatch
      reviewResponse.PatchType = &amp;amp;pt
   }
   return &amp;amp;reviewResponse
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;创建-pod&#34;&gt;创建 Pod&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl create –f pod.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: webhook-to-be-mutated
  namespace: e2e-tests-webhook-gbgt6
spec:
  containers:
  - image: k8s.gcr.io/pause:3.1
    name: example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;查询-pod&#34;&gt;查询 Pod&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get pod webhook-to-be-mutated –n e2e-tests-webhook-gbgt6 -oyaml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: 2018-07-19T07:49:37Z
  name: webhook-to-be-mutated
  namespace: e2e-tests-webhook-gbgt6
  resourceVersion: &amp;quot;806&amp;quot;
  selfLink: /api/v1/namespaces/e2e-tests-webhook-gbgt6/pods/webhook-to-be-mutated
  uid: 48d2e91d-8b28-11e8-b16d-286ed488dc10
spec:
  containers:
  - image: k8s.gcr.io/pause:3.1
    imagePullPolicy: IfNotPresent
    name: example
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-jhqlb
      readOnly: true
  dnsPolicy: ClusterFirst
  initContainers:
  - image: webhook-added-image
    imagePullPolicy: Always
    name: webhook-added-init-container
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
  nodeName: 127.0.0.1
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-jhqlb
    secret:
      defaultMode: 420
      secretName: default-token-jhqlb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，创建成功的pod已经多了一个名字为 &lt;code&gt;webhook-added-init-container&lt;/code&gt; 的 initContainers。&lt;/p&gt;

&lt;p&gt;Istio 就是使用 &lt;code&gt;ValidatingAdmissionWebhooks&lt;/code&gt; 验证 Istio 配置，使用 &lt;code&gt;MutatingAdmissionWebhooks&lt;/code&gt; 自动将 sidecar 代理注入至用户 pod。可以参考：&lt;a href=&#34;https://istio.io/zh/help/ops/setup/webhook/&#34; target=&#34;_blank&#34;&gt;动态准入 Webhooks 概述&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;6-总结&#34;&gt;6. 总结&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;最后我们来总结下 webhook Admission 的优势：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;webhook 可动态扩展 Admission 能力，满足自定义客户的需求。&lt;/li&gt;
&lt;li&gt;不需要重启 API Server，可通过创建 webhook configuration &lt;strong&gt;热加载&lt;/strong&gt; webhook admission。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-参考&#34;&gt;7. 参考&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5ba3547ae51d450e425ec6a5&#34; target=&#34;_blank&#34;&gt;Kubernetes 准入控制 Admission Controller 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.k8smeetup.com/article/VJauja@tV&#34; target=&#34;_blank&#34;&gt;Kubernetes 1.9 |可扩展准入机制进入 Beta 阶段&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;扫一扫关注微信公众号&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
h2 {
    display: block;
    font-size: 1.5em;
    margin-block-start: 0.83em;
    margin-block-end: 0.83em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    font-weight: bold;
}
h2::before {
    content: &#34;#&#34;;
    margin-right: 5px;
    color: #2d96bd;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>通过消除对特权容器的需求来提高 Istio Deployment 的安全性</title>
      <link>https://www.yangcs.net/posts/increasing-security-of-istio-deployments/</link>
      <pubDate>Fri, 21 Sep 2018 13:10:18 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/increasing-security-of-istio-deployments/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p id=&#34;div-border-left-red&#34;&gt;原文链接：&lt;a href=&#34;https://blog.openshift.com/increasing-security-of-istio-deployments-by-removing-the-need-for-privileged-containers/&#34; target=&#34;_blank&#34;&gt;Increasing Security of Istio Deployments by Removing the Need for Privileged Containers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;随着 1.0 版本的发布，&lt;code&gt;Istio&lt;/code&gt; 正在为开发云原生应用并希望采用服务网格解决方案的公司准备黄金时间。但是，有一个潜在的问题可能会降低这些公司的采用率：服务网格内的 &lt;code&gt;Pod&lt;/code&gt; 需要提升权限才能正常运行。&lt;/p&gt;

&lt;p&gt;为了从一定程度上缓解这个问题，本文将介绍一个新的工具：&lt;a href=&#34;https://github.com/sabre1041/istio-pod-network-controller&#34; target=&#34;_blank&#34;&gt;istio-pod-network-controller&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;1-问题&#34;&gt;1. 问题&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;作为服务网格正常操作的一部分，Istio 需要操作 Pod 的 &lt;code&gt;iptables&lt;/code&gt; 规则，以拦截所有的进出 Pod 的流量，并注入使 Istio 能够发挥作用的 &lt;code&gt;Sidecar&lt;/code&gt;。由于 iptables 规则是针对网络命名空间操作的，所以在某个 Pod 中修改 iptables 规则不会影响到其他 Pod 或运行该 Pod 的节点。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;init&lt;/code&gt; 容器是 Istio Pod 的一部分，负责在应用程序容器启动之前添加这些 iptables 规则。如果想在容器中操作 iptables 规则，必须通过开启 &lt;a href=&#34;http://man7.org/linux/man-pages/man7/capabilities.7.html&#34; target=&#34;_blank&#34;&gt;NET_ADMIN capability&lt;/a&gt; 来提升操作权限。&lt;code&gt;NET_ADMIN&lt;/code&gt; 是一种允许你重新配置网络的 &lt;a href=&#34;http://man7.org/linux/man-pages/man7/capabilities.7.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Linux Capability&lt;/code&gt;&lt;/a&gt;，这意味着具有该特权的 Pod 不仅可以将自身添加到 Istio 网格，还可以干扰其他 Pod 的网络配置以及节点本身的网络配置。但是在通常情况下，我们是不建议在共享租户的集群中运行具有此特权权限的应用程序 Pod 的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;OpenShift&lt;/code&gt; 提供了一种通过称为 &lt;a href=&#34;https://docs.openshift.com/container-platform/3.10/admin_guide/manage_scc.html&#34; target=&#34;_blank&#34;&gt;Security Context Context (SCC)&lt;/a&gt; 的机制来控制 Pod 可以拥有的权限的方法（在本例中指的是 Linux Capabilities）。Openshift 中提供了一些开箱即用的 &lt;code&gt;SCC&lt;/code&gt; 配置文件，集群管理员还可以添加更多自定义配置文件。允许正常运行 Istio 的唯一开箱即用的 &lt;code&gt;SCC&lt;/code&gt; 配置文件是 &lt;code&gt;privileged&lt;/code&gt; 配置文件。为了将某个命名空间中的 Pod 添加到 Istio 服务网格，必须执行以下命令才能访问 &lt;code&gt;privileged SCC&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ oc adm policy add-scc-to-user privileged -z default -n &amp;lt;target-namespace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这样做本质上就为此命名空间中的所有 Pod 提供了 &lt;code&gt;root&lt;/code&gt; 权限。而运行普通应用程序时，由于潜在的安全隐患，通常又不建议使用 root 权限。&lt;/p&gt;

&lt;p&gt;虽然这个问题一直困扰着 Istio 社区，但迄今为止 Kubernetes 还没有提供一种机制来控制给予 Pod 的权限。从 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.11.md&#34; target=&#34;_blank&#34;&gt;Kubernetes 1.11&lt;/a&gt; 开始，&lt;a href=&#34;https://kubernetes.io/docs/concepts/policy/pod-security-policy/&#34; target=&#34;_blank&#34;&gt;Pod 安全策略（PSP）&lt;/a&gt;功能已经作为 &lt;code&gt;beta feature&lt;/code&gt; 引入，PSP 与 SCC 的功能类似。一旦其他 Kubernetes 发行版开始支持开箱即用的 PSP，Istio 网格中的 Pod 就需要提升权限才能正常运行。&lt;/p&gt;

&lt;h2 id=&#34;2-解决方案&#34;&gt;2. 解决方案&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;解决这个问题的一种方法是将配置 Pod 的 iptables 规则的逻辑移出 Pod 本身。该方案通过一个名叫 &lt;code&gt;istio-pod-network-controller&lt;/code&gt; 的 DaemonSet 控制器，来监视新 Pod 的创建，并在创建后立即在这些新 Pod 中配置相应的 iptables 规则。下图描绘了该解决方案的整体架构：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/istiograph.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;流程如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建一个新 Pod&lt;/li&gt;
&lt;li&gt;创建该 Pod 的节点上运行的 &lt;code&gt;istio-pod-network-controller&lt;/code&gt; 检测新创建的 Pod 是否属于 Istio 网格，如果属于则对其进行初始化。&lt;/li&gt;
&lt;li&gt;Pod 中的 init 容器等待初始化 &lt;code&gt;annotation&lt;/code&gt; 出现，确保应用程序容器和 &lt;a href=&#34;https://istio.io/zh/docs/setup/kubernetes/sidecar-injection/&#34; target=&#34;_blank&#34;&gt;Sidecar&lt;/a&gt; Envoy 代理仅在 iptables 初始化完成后再启动。&lt;/li&gt;
&lt;li&gt;启动 Sidecar 容器和应用程序容器。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有了这个解决方案，由于 Envoy Sidecar 需要以特定的非 root 用户 ID 运行，在 Istio 网格中运行的 Pod 只需要 &lt;code&gt;nonroot&lt;/code&gt; SCC 就行了。&lt;/p&gt;

&lt;p&gt;理想情况下，我们希望 Istio 中的应用程序通过 &lt;code&gt;restricted&lt;/code&gt; SCC 运行，这是 Openshift 中的默认值。虽然 &lt;code&gt;nonroot&lt;/code&gt; SCC 比 &lt;code&gt;restricted&lt;/code&gt; SCC 的权限稍微宽泛一些，但这种折衷方案是可以接受的，这与使用 &lt;code&gt;privileged&lt;/code&gt; SCC 运行每个 Istio 应用程序 Pod 相比，是一个巨大的进步。&lt;/p&gt;

&lt;p&gt;现在，我们通过给 &lt;code&gt;istio-pod-network-controller&lt;/code&gt; 提供 privileged 配置文件和 &lt;code&gt;NET_ADMIN&lt;/code&gt; capability 来允许它修改其他 Pod 的 iptables 规则，这通常是可以接受的方案，因为该组件将由集群管理员以与 Istio 控制平面类似的方式安装和管理。&lt;/p&gt;

&lt;h2 id=&#34;3-安装指南&#34;&gt;3. 安装指南&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;根据安装指南假设 Istio 已成功安装在 &lt;code&gt;istio-system&lt;/code&gt; 命名空间中，并且已经开启了&lt;a href=&#34;https://istio.io/zh/docs/setup/kubernetes/sidecar-injection/#automatic-sidecar-injection&#34; target=&#34;_blank&#34;&gt;自动注入功能&lt;/a&gt;。克隆 istio-pod-network-controller &lt;a href=&#34;https://github.com/sabre1041/istio-pod-network-controller&#34; target=&#34;_blank&#34;&gt;仓库&lt;/a&gt;，然后执行以下命令以使用 &lt;code&gt;Helm&lt;/code&gt; 安装 &lt;code&gt;istio-pod-network-controller&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ helm template -n istio-pod-network-controller ./chart/istio-pod-network-controller | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;测试自动注入功能&#34;&gt;测试自动注入功能&lt;/h3&gt;

&lt;p&gt;执行以下命令测试自动注入功能：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl create namespace bookinfo
$ kubectl label namespace bookinfo istio-injection=enabled
$ kubectl annotate namespace bookinfo istio-pod-network-controller/initialize=true
$ kubectl apply -f examples/bookinfo.yaml -n bookinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他部署方案请参考&lt;a href=&#34;https://github.com/sabre1041/istio-pod-network-controller&#34; target=&#34;_blank&#34;&gt;官方仓库的文档&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;4-总结&#34;&gt;4. 总结&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;istio-pod-network-controller&lt;/code&gt; 是一个用来提高 Istio Deployment 安全性的可选工具，它通过消除在 Istio 网格中运行使用 privileged SCC 的 Pod 的需求，并让这些 Pod 只通过 nonroot SCC 运行，以此来提高安全性。如果您决定采用此解决方案，请注意这并不是 &lt;code&gt;Red Hat&lt;/code&gt; 正式支持的项目。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;扫一扫关注微信公众号&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
h2 {
    display: block;
    font-size: 1.5em;
    margin-block-start: 0.83em;
    margin-block-end: 0.83em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    font-weight: bold;
}
h2::before {
    content: &#34;#&#34;;
    margin-right: 5px;
    color: #2d96bd;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Istio CRD 汇总与 Helm Chart 配置解析</title>
      <link>https://www.yangcs.net/posts/istio-helm-chart-and-crd/</link>
      <pubDate>Tue, 18 Sep 2018 19:11:16 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/istio-helm-chart-and-crd/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p markdown=&#34;1&#34; style=&#34;display: block; padding: 10px; margin: 10px 0; border: 1px solid #ccc; border-left-width: 5px; border-radius: 3px; border-left-color: #df3e3e;&#34;&gt;表格来源：&lt;a href=&#34;https://mp.weixin.qq.com/s/olgEdxxrAmKhewWaERk_lw&#34; target=&#34;_blank&#34;&gt;Kube：使用Helm安装Istio&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-markdown-1-style-margin-bottom-2em-margin-right-5px-padding-8px-15px-letter-spacing-2px-background-image-linear-gradient-to-right-bottom-rgb-0-188-212-rgb-63-81-181-background-color-rgb-63-81-181-color-rgb-255-255-255-border-left-10px-solid-rgb-51-51-51-border-radius-5px-text-shadow-rgb-102-102-102-1px-1px-1px-box-shadow-rgb-102-102-102-1px-1px-2px-istio-中包含的-crd-总共-50-个-及其分类和用途-p&#34;&gt;&lt;p markdown=&#34;1&#34; style=&#34;margin-bottom:2em; margin-right: 5px; padding: 8px 15px; letter-spacing: 2px; background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181)); background-color: rgb(63, 81, 181); color: rgb(255, 255, 255); border-left: 10px solid rgb(51, 51, 51); border-radius:5px; text-shadow: rgb(102, 102, 102) 1px 1px 1px; box-shadow: rgb(102, 102, 102) 1px 1px 2px;&#34;&gt;Istio 中包含的 CRD(总共 50 个) 及其分类和用途&lt;/p&gt;&lt;/h3&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}
.tg .tg-baqh{text-align:center;vertical-align:top}
.tg .tg-0lax{text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&#34;tg&#34; style=&#34;undefined;table-layout: fixed; width: 1003px&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 67px&#34;&gt;
&lt;col style=&#34;width: 227px&#34;&gt;
&lt;col style=&#34;width: 367px&#34;&gt;
&lt;col style=&#34;width: 279px&#34;&gt;
&lt;col style=&#34;width: 63px&#34;&gt;
&lt;/colgroup&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-baqh&#34;&gt;﻿序号&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;名称&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;用途&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;分类&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;归属&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;1&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;virtualservices.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义virtual service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;networking&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;pilot&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;2&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;destinationrules.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义destination rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;3&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceentries.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义service entry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;4&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateways.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;5&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;envoyfilters.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;使用filter为特定envoy添加特定配置&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;6&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;policies.authentication.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authn，作用域为namespace&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;authentication&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;citadel&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;7&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshpolicies.authentication.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authn，作用域为global&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;8&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;httpapispecbindings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;apim&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;9&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;httpapispecs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;10&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotaspecbindings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;11&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotaspecs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;12&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rules.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer rule，用于绑定handler和instance&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer core&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;13&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributemanifests.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义envoy传递给mixer的用于policy和telemetry的attribute&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;14&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;bypasses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer adapter用于处理从envoy收集的数据&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;15&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;circonuses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义circonus adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;16&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deniers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义dinier adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;17&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;fluentds.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义fluentd adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;18&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetesenvs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义kubernetesenv adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;19&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;listcheckers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义list adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;20&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;memquotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义memquota adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;21&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;noops.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;22&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;opas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义opa adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;23&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheuses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义prometheus adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;24&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbacs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义rbac adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;25&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;redisquotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义redisquota adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;26&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicecontrols.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义servicecontrol adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;27&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;signalfxs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义signalfx adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;28&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;solarwindses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义solarwinds adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;29&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stackdrivers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义stackdriver adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;30&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;statsds.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义statsd adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;31&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdios.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义stdio adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;32&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;apikeys.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义apikey template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer instance用于定义从envoy收集的数据&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;33&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;authorizations.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义authorization template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;34&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;checknothings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义checknothing template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;35&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kuberneteses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义kubernetes template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;36&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;listentries.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义listentry template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;37&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;logentries.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义logentry template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;38&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;edges.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;39&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metrics.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义metric template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;40&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义quota template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;41&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;reportnothings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义reportnothing template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;42&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicecontrolreports.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义servicecontrolreport template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;43&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracespans.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义tracespan template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;44&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbacconfigs.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义istio的rbac策略&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbac&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;45&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceroles.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义service role&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;46&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicerolebindings.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义service role binding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;47&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;adapters.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;others&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;48&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;instances.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;49&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;templates.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;50&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handlers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-markdown-1-style-margin-bottom-2em-margin-right-5px-padding-8px-15px-letter-spacing-2px-background-image-linear-gradient-to-right-bottom-rgb-0-188-212-rgb-63-81-181-background-color-rgb-63-81-181-color-rgb-255-255-255-border-left-10px-solid-rgb-51-51-51-border-radius-5px-text-shadow-rgb-102-102-102-1px-1px-1px-box-shadow-rgb-102-102-102-1px-1px-2px-istio-helm-chart-的安装配置解析-p&#34;&gt;&lt;p markdown=&#34;1&#34; style=&#34;margin-bottom:2em; margin-right: 5px; padding: 8px 15px; letter-spacing: 2px; background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181)); background-color: rgb(63, 81, 181); color: rgb(255, 255, 255); border-left: 10px solid rgb(51, 51, 51); border-radius:5px; text-shadow: rgb(102, 102, 102) 1px 1px 1px; box-shadow: rgb(102, 102, 102) 1px 1px 2px;&#34;&gt;Istio Helm Chart 的安装配置解析&lt;/p&gt;&lt;/h3&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}
.tg .tg-baqh{text-align:center;vertical-align:top}
.tg .tg-0lax{text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&#34;tg&#34; style=&#34;undefined;table-layout: fixed; width: 1290px&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 60px&#34;&gt;
&lt;col style=&#34;width: 161px&#34;&gt;
&lt;col style=&#34;width: 251px&#34;&gt;
&lt;col style=&#34;width: 214px&#34;&gt;
&lt;col style=&#34;width: 219px&#34;&gt;
&lt;col style=&#34;width: 385px&#34;&gt;
&lt;/colgroup&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-baqh&#34;&gt;﻿序号&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;chart&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;文件&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;k8s组件类型&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;k8s组件名称&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;用途&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;1&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;main&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_affinity.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义各个组件deployment chart中的nodeAffinity&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义各个组件chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio主配置configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;crds.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;CustomResourceDefinition&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;共50个&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio需要的所有的crd资源&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;install-custom-resources.sh.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana和security chart中configmap中所包含的脚本，验证istio-galley validatingwebhookconfiguration已经存在并且部署组件相关其他资源&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;sidecar-injector-configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecar injector的configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;2&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;sidecarInjectorWebhook默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector-admin-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mutatingwebhook.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;MutatingWebhookConfiguration&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的mutatingwebhookconfiguration&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;3&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;security默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义security chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;cleanup-secrets.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-cleanup-secrets-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在helm删除istio后对citadel中的secret进行清理&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-cleanup-secrets-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-cleanup-secrets-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Job&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-cleanup-secrets&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citadel相关clusterole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citdel相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-custom-resources&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citidel相关configmap，与global values中的mtls.enabled相关，是否启用全局的mtls authn&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;create-custom-resources-job.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-post-install-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的mtls.enabled设置为true后才会生效，建立mtls相关serviceaccount，clusterrole，clusterrolebinding，以及comfigmap中定义的其他相关对象&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-post-install-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-post-install-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Job&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-post-install&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citadel相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;enable-mesh-mtls.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;MeshPolicy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;default&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的mtls.enabled设置为true后，这些资源会写入configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;default&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;api-server&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-citadel&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的meshExpansion设置为true后，新建citadel相关virtualservice&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-ilb-citadel&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的meshExpansionILB设置为true后，新建citadel相关virtualservice&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citade相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citade相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;4&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;galley默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley-admin-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley-configuration&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;validatingwehookconfiguration.yaml.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ValidatingWebhookConfiguration&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义对pilot和mixer的配置进行验证，与galley deployment关联&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;5&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;autoscale.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;HorizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer，包括policy和telemetry的horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;HorizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-mixer-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer相关clusterole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-mixer-admin-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer相关clusterolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;config.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributemanifest&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istioproxy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从envoy到mixer的attributemanifest&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributemanifest&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetes&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从k8s到mixer的attributemanifest&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdio&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义stdio handler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;logentry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;accesslog&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义http logentry instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;logentry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tcpaccesslog&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义tcp logentry instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdio&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从accesslog.logentry到handler.stdio的rule，将accesslog发送至stdio&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdiotcp&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从tcpaccesslog.logentry到handler.stdio的rule，将tcpaccesslog发送至stdio&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;requestcount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义requestcount metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;requestduration&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义requestduration metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;requestsize&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义requestsize metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;responsesize&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义responsesize metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tcpbytesent&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义tcpbytesent metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tcpbytereceived&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义tcpbytereceived metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus handler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;promhttp&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从requestcount.metric，requestduration.metric，requestsize.metric和responsesize.metric到handler.prometheus的rule，将http metric发送至prometheus&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;promtcp&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从tcpbytesent.metric和tcpbytereceived.metric到handler.prometheus的rule，将tcp metric发送至prometheus&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetesenv&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kubernetesenv handler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubeattrgenrulerule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从attributes.kubernetes到handler.kubernetesenv的rule，生成kubernetes相关attribute&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tcpkubeattrgenrulerule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从attributes.kubernetes到handler.kubernetesenv的rule，生成kubernetes tcp相关attribute&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetes&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributes&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kubernetes相关attribute instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-policy相关destinationrule&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-telemetry相关destinationrule&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-statsd-prom-bridge&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-statsd-prom-bridge相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-policy相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-telemetry相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-policy相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-telemetry相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-mixer-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;statsdtoprom.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-statsd-prom-bridge&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-statsd-prom-bridge相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-statsd-prom-bridge&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-statsd-prom-bridge相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;6&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;pilot默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;autoscale.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;horizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateway.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-autogenerated-k8s-ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关gateway，缺省向前兼容，使用ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关gateway，如果global.meshExpansion设置为true，则将pilot暴露在gateway&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-ilb-gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关gateway，如果global.meshExpansionILB设置为true，则将pilot暴露在internal gateway&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的meshExpansion设置为true后，新建pilot相关virtualservice&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ilb-meshexpansion-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的meshExpansionILB设置为true后，新建pilot相关virtualservice&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;7&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateways默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;autoscale.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;horizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;horizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;horizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关horizontalpodautoscaler，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关clusterrole，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关clusterrolebindig，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关deployment，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关service，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关serviceaccount，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;8&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;9&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;telemetry-gateway默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateway.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry-gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus和grafana的gateway，如果prometheusEnabled设置为true，则添加prometheus相关gateway配置，如果grafanaEnabled设置为true，则添加grafana相关gateway配置&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义prometheus相关destinationrule&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义grafana相关destinationrule&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;telemetry-virtual-service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus和grafana的virtualservice，如果prometheusEnabled设置为true，则添加prometheus相关virtualservice配置，如果grafanaEnabled设置为true，则添加grafana相关virtualservice配置&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;10&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress默认关闭legacy ingress support&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;autoscale.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;HorizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;11&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-custom-resources&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;create-custom-resources-job.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-post-install-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana post install相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-post-install-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana post install相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-post-install-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana post install相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Job&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-post-install&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana post install相关job&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana-ports-mtls.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana-ports-mtls-disabled&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;对grafana访问开启mtls&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;pvc.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;PersistentVolumeClaim&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-pvc&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;如果persist设置为true，则为grafana新建pvc和pv&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;secret.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Secret&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;如果security.enabled设置为true，则为grafana启用authn&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;12&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicegraph默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义servicegraph chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicegraph&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义servicegraph相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicegraph&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义servicegraph相关ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicegraph&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义servicegraph相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;13&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracing默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义tracing chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-tracing&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress-jaeger.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;jaeger-query&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing相关ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracing&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义zipkin tracing相关ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service-jaeger.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;jaeger-query&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing query相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;jaeger-collector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing collector相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;jaeger-agent&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing agent相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;zipkin&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义zipkin tracing相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracing&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;14&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-kiali-admin-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;secrets.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Secret&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关secret&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;15&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;crds.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;CustomResourceDefinition&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterissuers.certmanager.k8s.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关crd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;CustomResourceDefinition&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;issuers.certmanager.k8s.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;CustomResourceDefinition&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certificates.certmanager.k8s.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;issuer.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterIssuer&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;letsencrypt-staging&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关clusterissuer&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterIssuer&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;letsencrypt&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbac.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>暴露 Istio Service Mesh 中的 Gateway</title>
      <link>https://www.yangcs.net/posts/expose-gateway-of-istio/</link>
      <pubDate>Mon, 17 Sep 2018 13:14:55 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/expose-gateway-of-istio/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;在之前的文章 &lt;a href=&#34;https://www.yangcs.net/posts/istio-ingress/&#34; target=&#34;_blank&#34;&gt;Istio 服务网格中的网关&lt;/a&gt; 中，我已经介绍了简单的暴露 &lt;code&gt;Ingress Gateway&lt;/code&gt; 的方案。当时的方案只是用于临时测试，不适合在大规模场景下使用，本文将探讨更加优化的暴露 Ingress Gateway 的方案。&lt;/p&gt;

&lt;h2 id=&#34;hostnetwork&#34;&gt;HostNetwork&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;第一种方法比较简单，可以直接使用 &lt;code&gt;HostNetwork&lt;/code&gt; 模式运行 Ingress Gateway。但你会发现无法启动 ingressgateway 的 Pod，因为如果 Pod 设置了 &lt;code&gt;HostNetwork=true&lt;/code&gt;，则 dnsPolicy 就会从 &lt;code&gt;ClusterFirst&lt;/code&gt; 被强制转换成 &lt;code&gt;Default&lt;/code&gt;。而 Ingress Gateway 启动过程中需要通过 DNS 域名连接 &lt;code&gt;pilot&lt;/code&gt; 等其他组件，所以无法启动。&lt;/p&gt;

&lt;p&gt;我们可以通过强制将 &lt;code&gt;dnsPolicy&lt;/code&gt; 的值设置为 &lt;code&gt;ClusterFirstWithHostNet&lt;/code&gt; 来解决这个问题，详情参考：&lt;a href=&#34;https://www.yangcs.net/posts/kubernetes-dns/&#34; target=&#34;_blank&#34;&gt;Kubernetes DNS 高阶指南&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;修改后的 ingressgateway deployment 配置文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-ingressgateway
  namespace: istio-system
  ...
spec:
  ...
  template:
    metadata:
    ...
    spec:
      affinity:
        nodeAffinity:
          ...
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - 192.168.123.248   # 比如你想调度到这台主机上
      ...
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      restartPolicy: Always
      ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来我们就可以在浏览器中通过 Gateway 的 URL 来访问服务网格中的服务了。&lt;/p&gt;

&lt;p&gt;但是作为服务网格的流量接入层，Ingress Gateway 的高可靠性显得尤为重要，高可靠性首先要解决的就是单点故障问题，一般常用的是采用多副本部署的方式。而上述方案只适用于单实例（Deployment 的副本数为 1）的情况，为了适应多节点部署架构，需要寻求更好的暴露方案。&lt;/p&gt;

&lt;h2 id=&#34;使用-envoy-作为前端代理&#34;&gt;使用 Envoy 作为前端代理&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;我们已经知道，Ingress Gateway 实际上内部运行的是 &lt;code&gt;Envoy&lt;/code&gt; 代理，我们可以在 Ingress Gateway 前面再加一层代理，这样就解决了高可用问题，你可以将 Ingress Gateway 的副本数扩展为多个，前端代理只需要通过 &lt;code&gt;Service Name&lt;/code&gt; 来连接后端的 Gateway 就行了。同时建议采用独占节点的方式部署前端代理，以避免业务应用与前端代理服务发生资源争抢。&lt;/p&gt;

&lt;p&gt;前端代理可以使用一般的负载均衡软件（如 &lt;code&gt;Haproxy&lt;/code&gt;、&lt;code&gt;Nginx&lt;/code&gt; 等），也可以使用 &lt;code&gt;Envoy&lt;/code&gt;。由于 Envoy 是 Istio Service Mesh 中默认的 data plane，所以这里推荐使用 Envoy。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34; target=&#34;_blank&#34;&gt;Envoy 官方&lt;/a&gt;提供了一组 Envoy 的用例，我们只需要用到其中的 &lt;code&gt;Dockerfile&lt;/code&gt;。首先克隆 Envoy 的代码仓库并转到 &lt;code&gt;examples/front-proxy&lt;/code&gt; 目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/envoyproxy/envoy
$ cd envoy/examples/front-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 &lt;code&gt;front-envoy.yaml&lt;/code&gt; 配置文件，修改后的内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.tcp_proxy  ①
        config:
          stat_prefix: ingress_tcp
          cluster: ingressgateway
          access_log:
            - name: envoy.file_access_log
              config:
                path: /dev/stdout
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 443
    filter_chains:
    - filters:
      - name: envoy.tcp_proxy
        config:
          stat_prefix: ingress_tcp
          cluster: ingressgateway_tls
          access_log:
            - name: envoy.file_access_log
              config:
                path: /dev/stdout
  clusters:
  - name: ingressgateway
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    hosts:
    - socket_address:
        address: istio-ingressgateway.istio-system  ②
        port_value: 80
  - name: ingressgateway_tls
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    hosts:
    - socket_address:
        address: istio-ingressgateway.istio-system
        port_value: 443
admin:
  access_log_path: &amp;quot;/dev/null&amp;quot;
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;① &lt;span id=&#34;inline-blue&#34;&gt;envoy.tcp_proxy&lt;/span&gt; 表示要实例化的过滤器的名称。该名称必须与内置支持的过滤器匹配，也就是说，该字段的值不可随意填写，必须使用指定的几个值。这里 &lt;code&gt;envoy.tcp_proxy&lt;/code&gt; 表示使用 TCP 代理。详情参考：&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/listener/listener.proto#listener-filter&#34; target=&#34;_blank&#34;&gt;listener.Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;② &lt;span id=&#34;inline-blue&#34;&gt;istio-ingressgateway.istio-system&lt;/span&gt; 表示 Ingress Gateway 在集群内部的 DNS 域名。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他配置解析请参考：&lt;a href=&#34;https://jimmysong.io/posts/envoy-archiecture-and-terminology/&#34; target=&#34;_blank&#34;&gt;Envoy 的架构与基本术语&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接下来通过 &lt;code&gt;Dockerfile-frontenvoy&lt;/code&gt; 和 &lt;code&gt;front-envoy.yaml&lt;/code&gt; 来构建 Docker 镜像，我们来看下该 Dockerfile 的内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM envoyproxy/envoy:latest

RUN apt-get update &amp;amp;&amp;amp; apt-get -q install -y \
    curl
CMD /usr/local/bin/envoy -c /etc/front-envoy.yaml --service-cluster front-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;/etc/front-envoy.yaml&lt;/code&gt; 是本地的 &lt;code&gt;front-envoy.yaml&lt;/code&gt; 挂载进去的。在 Kubernetes 中可以通过 &lt;code&gt;ConfigMap&lt;/code&gt; 来挂载，所以我们还要创建一个 ConfigMap：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl -n istio-system create cm front-envoy --from-file=front-envoy.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以将构建好的镜像 push 到私有镜像仓库中或者公共仓库中，也可以使用我已经上传好的镜像。&lt;/p&gt;

&lt;p&gt;最后我们就可以通过该镜像来部署前端代理了，需要创建一个 &lt;code&gt;Deployment&lt;/code&gt;，配置文件 &lt;code&gt;front-envoy-deploy.yaml&lt;/code&gt; 内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: front-envoy
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: front-envoy
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - 192.168.123.248 # 比如你想调度到这台主机上
      containers:
      - name: front-envoy
        image: yangchuansheng/front-envoy
        ports:
        - containerPort: 80
        volumeMounts:
        - name: front-envoy
          mountPath: /etc/front-envoy.yaml
          subPath: front-envoy.yaml
      hostNetwork: true
      volumes:
        - name: front-envoy
          configMap:
            name: front-envoy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以将镜像换成你自己的镜像，然后通过该 yaml 文件来部署：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl -n istio-system create -f front-envoy-deploy.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来我们就可以在浏览器中通过前端代理所在节点的 URL 来访问服务网格中的服务了。&lt;/p&gt;

&lt;p&gt;更一般的场景，我们还可以配置前端代理的高可用。对于 Kubernetes 集群以外只暴露一个访问入口，可以使用 &lt;code&gt;keepalived&lt;/code&gt; 排除单节点问题。具体实现方式与 Ingress 的高可用类似，可以参考 Ingress 的高可用方案。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;扫一扫关注微信公众号&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
h2 {
    display: block;
    font-size: 1.5em;
    margin-block-start: 0.83em;
    margin-block-end: 0.83em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
    font-weight: bold;
}
h2::before {
    content: &#34;#&#34;;
    margin-right: 5px;
    color: #2d96bd;
}

#h2-another {
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>干货与湿货分享第8期</title>
      <link>https://www.yangcs.net/posts/weekly-8/</link>
      <pubDate>Sat, 08 Sep 2018 12:32:27 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/weekly-8/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;style type=&#34;text/css&#34;&gt;
.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}
.tg .tg-0lax{text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;﻿序号&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;名称&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;用途&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;分类&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;归属&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;1&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;virtualservices.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义virtual service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;networking&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;pilot&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;destinationrules.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义destination rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;3&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceentries.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义service entry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;4&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateways.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;5&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;envoyfilters.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;使用filter为特定envoy添加特定配置&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;6&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;policies.authentication.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authn，作用域为namespace&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;authentication&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;citadel&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;7&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshpolicies.authentication.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authn，作用域为global&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;8&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;httpapispecbindings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;apim&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;9&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;httpapispecs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;10&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotaspecbindings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;11&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotaspecs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;12&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rules.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer rule，用于绑定handler和instance&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer core&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;13&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributemanifests.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义envoy传递给mixer的用于policy和telemetry的attribute&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;14&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;bypasses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer adapter用于处理从envoy收集的数据&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;15&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;circonuses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义circonus adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;16&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deniers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义dinier adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;17&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;fluentds.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义fluentd adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;18&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetesenvs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义kubernetesenv adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;19&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;listcheckers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义list adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;20&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;memquotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义memquota adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;21&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;noops.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;22&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;opas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义opa adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;23&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheuses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义prometheus adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;24&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbacs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义rbac adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;25&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;redisquotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义redisquota adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;26&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicecontrols.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义servicecontrol adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;27&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;signalfxs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义signalfx adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;28&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;solarwindses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义solarwinds adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;29&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stackdrivers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义stackdriver adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;30&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;statsds.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义statsd adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;31&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdios.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义stdio adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;32&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;apikeys.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义apikey template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer instance用于定义从envoy收集的数据&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;33&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;authorizations.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义authorization template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;34&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;checknothings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义checknothing template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;35&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kuberneteses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义kubernetes template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;36&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;listentries.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义listentry template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;37&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;logentries.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义logentry template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;38&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;edges.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;39&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metrics.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义metric template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;40&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义quota template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;41&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;reportnothings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义reportnothing template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;42&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicecontrolreports.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义servicecontrolreport template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;43&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracespans.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义tracespan template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;44&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbacconfigs.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义istio的rbac策略&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbac&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;45&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceroles.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义service role&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;46&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicerolebindings.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义service role binding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;47&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;adapters.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;others&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;48&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;instances.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;49&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;templates.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;50&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handlers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

这是《干货与湿货分享》系列的第8期，主要记录过去一周我所见到的听到的值得分享的东西。

近年来，传统计算机发展中已经逐渐遭遇功耗墙、通信墙等一系列问题，加上摩尔定律开始失效，芯片性能的增长开始放缓，传统计算机的性能增长潜力和增长速度都已大不如前。在这种情形下，探索全新物理原理的高性能计算技术的需求就应运而生。

量子计算的基本原理是以量子位作为信息编码和存储的基本单元，通过大量量子位的受控演化来完成计算任务。一般选用处于纠缠状态的量子，比如光子的两个偏振态、电子的两个自旋态、离子的两个能级来构建量子位。

想必很多人都听说过薛定谔的猫，而量子位就类似于那只猫的状态。一个量子位可以同时处于 0 状态和 1 状态，当量子系统的状态变化时，迭加的各个状态都可以发生变化。

相对于只能表示 0 和 1 的晶体管，量子位能同时表示0和1两个状态，这就使量子计算机在并行计算上具有巨大优势——毕竟N个量子位可同时存储 2 的 N 次方个数据，数据量随 N 呈指数增长。同时，量子计算机操作一次等效于电子计算机要进行 2 的 N 次方次操作的效果，等于是一次演化相当于完成了 2 的 N 次方个数据的并行处理，这是现在的电子计算机所不具备的。

这会导致什么后果呢？假如你要实现一个 300 位的一个大数的质因数分解，用传统计算机来算的话，你需要 **15 万年**。但是如果你用量子计算机来算，只需要一秒钟！那么，假如你用一秒钟就实现了大数的质因数分解，那你几乎可以破解世界上所有的银行。所以说，量子计算机出现了之后，对人类社会的冲击还是很大的。再比如现在比较火的比特币和区块链，如果量子计算机出现了之后，这些币就会井喷，井喷了之后，它的价值就没了，整个的生态就会崩溃。

为什么计算机很难有人的思维，因为人的思维是并行的，而计算机是单线的。如果我们有了量子计算机，也许就可以弄明白人的思维到底是怎么回事了，也许人最终的思维是量子化的，这个事看起来很神奇。

### &lt;p id=&#34;h2&#34;&gt;新闻&lt;/p&gt;

----

#### 1. [Google 为 Chrome 浏览器带来了全新 UI](http://bbs.chongbuluo.com/thread-5360-1-1.html)

![](http://o7z41ciog.bkt.clouddn.com/chromenewdesign.0.jpg)

2018 年 9 月 5 日，谷歌浏览器首次推出 10 年后，Chrome 焕然一新。新设计包括圆形和标签，清新的调色板和更新的图标。 Google 正在更新整个 Chrome 以包含此新用户界面，并更改地址栏中的提示，菜单和网址以匹配新设计。这是一场大修。

新的圆形标签可能是最引人注目的变化，将 Chrome 从多年来可用的类似梯形的标签移开。 Chrome 的新标签设计为一目了然，这对于那些喜欢在浏览器中打开过多标签的用户非常有用。

![](http://o7z41ciog.bkt.clouddn.com/chrome-new-ui.png)

#### 2. [Facebook 扩建门罗帕克总部](https://newsroom.fb.com/news/2018/09/expanding-our-home-in-menlo-park/)

![](http://o7z41ciog.bkt.clouddn.com/21-lobby-six.jpg)

为了继续招募人才，以支持其快速增长的业务，Facebook 将在其门罗帕克（Menlo Park）总部内建设一座新办公楼。这栋名为 MPK 21 的大楼由著名建筑师弗兰克·盖里（Frank Gehry）操刀，楼顶配有 3.6 英亩的花园，上面有 200 多棵树。整栋建筑都采用环保材料。

该公司还表示：“自己正在修建一座人行天桥，让骑自行车的人和行人可以安全地穿越高速公路，并将社区重新连接到海湾。”

![](http://o7z41ciog.bkt.clouddn.com/21-bowl-terrace.jpg)

#### 3. [科学家发明大数据传输算法，网速可提高 50%](https://www.7tin.cn/news/117311.html)

![](http://www.7tin.cn/wp-content/uploads/2018/09/20180904184143418-800x533.jpg)

近日，俄罗斯萨马拉大学与美国密苏里大学联合发表了一篇关于网络和业务管理的科研论文，论文中描述了一款新算法，使用这款算法可更快、更可靠地使用大数据处理中心。科研人员给这款算法起名为“The Neighborhoods Methods”(“近邻法”)，其原理就是寻找传输数据的最短路径。使用这种算法可以快速接入世界上最大的数据处理中心，对于解决科学理论和应用两个领域中需要高精度计算的问题可起到很好的帮助作用。

据悉，使用这款算法在传输高峰时，数据传输速度至少可提高 50%。此外，不同框架之间可使用这款算法分享数据和路径，不管使用什么网络连接，算法的功能都不会改变。

#### 4. [日本科技公司正组建“太空电梯”，火星救援不再是梦](http://mil.news.sina.com.cn/world/2018-09-04/doc-ihiqtcap0966287.shtml)

![](http://n.sinaimg.cn/mil/crawl/103/w550h353/20180904/SxNh-hiqtcap0951984.jpg)

“太空电梯”这个概念最初诞生于 19 世纪，是俄罗斯火箭科学家 Konstantin Tsiolkovsky 在看到了巴黎的埃菲尔铁塔后，脑中闪现的一个灵感。因此 Tsiolkovsky 提出了一种连接地球与静止轨道上的太空站之间的管道系统的想法，也就是**太空电梯**。

而近日，日本科学家将对太空电梯概念进行首次试验，这项试验将在 2018 年 9 月 11 日举行。试验内容为：从日本的种子岛太空中心向国际空间站发送两颗尺寸约为 10×10×10 厘米的超小型卫星，两颗卫星之间由 10 米长的钢绳链接，在钢绳上装有一个形似电梯的箱子。这两颗卫星在到达国际空间站后将被放入太空，日本的研究人员将尝试使用电机来移动钢绳上的箱子，用以模拟太空电梯的工作原理。

#### 5. [美国等国研究人员“重新编程”细胞，可使大伤口愈合如初](http://finance.sina.com.cn/roll/2018-09-06/doc-ihiixyeu4297975.shtml)

近日美国等国研究人员成功“重新编程”了伤口中的细胞，将其转化为皮肤细胞前体，从而有助于皮肤伤口愈合。这一技术还可用于修复皮肤损伤和抗衰老，也有助于进一步理解皮肤癌发病机理。

论文作者、美国索尔克研究所教授贝尔蒙特说，新方法不单单是单一类型细胞的再生，而是像皮肤这样的全三维组织的体内再生。这一方法将来也可为其他体内再生疗法提供指导。

#### 6. [六六用百度搜索遇骗子广告，微博质问李彦宏](https://tech.sina.com.cn/i/2018-09-06/doc-ihitesuz1641447.shtml)

![](http://n.sinaimg.cn/tech/transform/100/w602h298/20180906/luPY-fzrwica2605301.png)

作家六六今日发布微博称，她在百度上查一个上海美国领事馆官网的地址，翻了多少个都是骗子广告，最后不得已上谷歌，在谷歌上搜索出来的第一个就是美国领事馆官网的地址。作家六六在微博上@李彦宏称 ，你是做搜索引擎还是做骗子首领？

#### 7. [谷歌成立 20 周年，杜蕾斯发第一份贺电](http://www.expreview.com/63902.html)

![](http://img.expreview.com/news/2018/09/04/google.jpg)

20 年前谷歌公司成立，两个年轻人在车库里做了谷歌这个公司，20 年后的今天谷歌已经成长为全球互联网巨头，全年营收超过 1100 亿美元，在搜索引擎及移动操作系统上更是影响了无数人。

考虑到时差关系，国内媒体上似乎对谷歌成立 20 周年好像没啥动静呢，不过杜蕾斯官微这次率先行动了，给谷歌20周年纪念发来了第一份贺电——**学会 AI，你用了20年**。文案强大的杜蕾斯团队每次的双关语都很精妙，AI既可以当做“爱”，也可以当作谷歌目前的重点 AI 人工智能，而杜蕾斯包装与安卓机器人的形象更是神来之笔。

### &lt;p id=&#34;h2&#34;&gt;工具&lt;/p&gt;

----

#### 1. [Cowtransfer 奶牛快传](https://cowtransfer.com)

![](http://o7z41ciog.bkt.clouddn.com/9522885e588814f2.jpg)

Cowtransfer 奶牛快传不是一个网盘，官方给它的定位是大文件临时存放传输的工具网站。Cowtransfer 奶牛快传对标的是国外大文件中转站 Wetransfer，工作中邮箱无法发送的大文件可以使用此类网站传输。用户可以简单方便的上传文件分享给其他用户，最大支持 6 个文件同时上传，文件大小上限为 2G，文件可存放 7 天。

#### 2. [TrafficMonitor](https://github.com/zhongyang219/TrafficMonitor)

这是一个用于显示当前网速、CPU 及内存利用率的桌面悬浮窗软件，并支持任务栏显示，支持更换皮肤。

#### 3. [HTTPie](https://github.com/jakubroztocil/httpie)

![](http://o7z41ciog.bkt.clouddn.com/httpie.png)

HTTPie （读aych-tee-tee-pie）是一个 HTTP 的命令行客户端。其目标是让 CLI 和 web 服务之间的交互尽可能的人性化。这个工具提供了简洁的 http 命令，允许通过自然的语法发送任意 HTTP 请求数据，展示色彩化的输出。HTTPie 可用于与 HTTP 服务器做测试、调试和常规交互。

#### 4. [noti](https://github.com/variadico/noti)

![](http://o7z41ciog.bkt.clouddn.com/macos_banner.png)

这是一个进程完成时的通知工具，当一个进程需要长时间运行时，noti 可以使你不需要长时间等待，当任务完成时可以弹窗通知用户，用户不需要频繁地去检查终端的任务是否运行完毕，提高用户的工作效率。

#### 5. [Redis Desktop Manager](https://github.com/uglide/RedisDesktopManager)

![](http://o7z41ciog.bkt.clouddn.com/687474703a2f.png)

Redis Desktop Manager 是一款基于 Qt5 开发的 Redis 桌面管理工具，支持 SSH 连接。

#### 6. [公式字符化网站](http://webdemo.myscript.com/#/home)

你还在苦恼复杂的数学公式和化学方程式没办法用电脑打出来吗？有了这个神器，你就可以轻松地以手绘的方式画出来，交给电脑自动帮你转化哟！

#### 7. [Neofetch](https://github.com/dylanaraps/neofetch)

![](http://o7z41ciog.bkt.clouddn.com/neofetch1.png)

Neofetch 是在 BASH 中编写的 CLI 系统信息工具。Neofetch 显示您系统的镜像信息、操作系统 Logo、或者你选择的任意 ASCII 编码的文件。Neofetch 主要用与向其他用户以屏幕截图的方式展示您运行的系统，主题、图标等，支持 Linux，MacOS，iOS，BSD，Solaris，Android，Haiku，GNU Hurd，MINIX，AIX，IRIX 和 Windows（Cygwin / MSYS2 / MinGW / Windows 10 Linux 子系统）。

#### 8. [Vegeta](https://github.com/tsenart/vegeta)

Vegeta 是个 Go 语言编写的 http 服务压力测试工具，拥有各种参数支持，功能服务。支持 json 形式报告输出，同时支持 html 形式图形化报告生成。

### &lt;p id=&#34;h2&#34;&gt;教程&lt;/p&gt;

----

#### 1. [Spring Boot Examples](https://github.com/ityouknow/spring-boot-examples)

Spring Boot 教程、技术栈示例代码，快速简单上手教程。

#### 2. [Nginx 入门教程](https://github.com/xuexb/learn-nginx)

这是一个 Nginx 入门指南，包括: 编译安装、反向代理、重定向、重写、缓存、跨域配置等。

#### 3. [60_Days_RL_Challenge](https://github.com/andri27-ts/60_Days_RL_Challenge)

![](http://o7z41ciog.bkt.clouddn.com/logo5.png)

深度强化学习系列教程（视频）。

#### 4. [The Open Guide to Amazon Web Services](https://github.com/open-guides/og-aws)

亚马逊 Web Services 实用指南。

#### 5. [JavaScript 教程](https://wangdoc.com/javascript/)

本教程全面介绍 JavaScript 核心语法，从最简单的开始讲起，循序渐进、由浅入深，力求清晰易懂。所有章节都带有大量的代码实例，便于理解和模仿，可以用到实际项目中，即学即用。

本教程适合初学者当作 JavaScript 语言的入门教程，也适合当作日常使用的参考手册。

#### 6. [MacOS 的安全和隐私指南](https://github.com/drduh/macOS-Security-and-Privacy-Guide)

这里汇集了一些想法，它们是有关如何保护运行了 macOS 10.12 &#34;&#34;Sierra&#34;&#34; 操作系统（以前是 OS X）的现代化苹果 Mac 电脑，也包含了一些提高个人网络隐私的小贴士。

这份指南的目标读者是那些希望采用企业级安全标准的&#34;高级用户&#34;，但是也适用于那些想在 Mac 上提高个人隐私和安全性的初级用户们。

#### 7. [Markdown 简介](https://github.com/mzlogin/markdown-intro)

本文档的目的不在于面面俱到地介绍 Markdown，只是作为作者对其理解的笔记整理，希望能同时帮助一些对 Markdown 感兴趣的人快速上手，或是作为一个工具，供对其已经有所了解的人在需要时参考。

#### 8. [利用 LXCFS 提升容器资源可见性](https://yq.aliyun.com/articles/566208)

Linuxs 利用 Cgroup 实现了对容器的资源限制，但在容器内部依然缺省挂载了宿主机上的 procfs 的 /proc 目录，其包含如：meminfo, cpuinfo，stat， uptime 等资源信息。一些监控工具如 free/top 或遗留应用还依赖上述文件内容获取资源配置和使用情况。当它们在容器中运行时，就会把宿主机的资源状态读取出来，引起错误和不便。

本文将介绍如何在 Docker 和 Kubernetes 环境中解决遗留应用无法识别容器资源限制的问题。

### &lt;p id=&#34;h2&#34;&gt;资源&lt;/p&gt;

----

#### 1. [一些命令行工具的增强版](https://www.kawabangga.com/posts/3084)

本文要介绍的工具基本都是原来工具的增强版，也就是说原来工具有的，增强版也都有。因为习惯很难改变，所以完全可以用 alias 替换掉。

#### 2. [Hackintosh 黑苹果驱动 Clover](https://github.com/sqlsec/clover)

网友分享的一些黑苹果 Clover 驱动配置文件。

#### 3. [asd-price](http://asd-price.com/)

![](http://o7z41ciog.bkt.clouddn.com/d535aff2e2e98d72.jpg)

V2EX 网友制作的网站，可以方便快捷的查询各大电商网站的商品历史价格，支持的网站有：京东、淘宝、天猫、亚马逊、苏宁、一号店、当当、考拉、国美、蘑菇街、优购等。

#### 4. [Awesome Bookmarks](https://github.com/PanJiaChen/awesome-bookmarks)

Awesome Bookmarks 是 [Github Awesome](https://github.com/topics/awesome) 主题下的一个子话题，致力于整理并收集适用于主流的现代浏览器如 Google Chrome / Mozilla Firefox / Microsoft Edge 的书签。书签收集的方式是索引、分类和注释，旨在为搜索提供一个便捷高效的浏览器集成方案。

#### 5. [让 Firefox 界面变成 Chrome 的 Material Design 风格主题](http://www.apprcn.com/using-chrome-material-design-ui-in-firefox.html)

之前 Chrome 更新使用了新 UI 后有人喜欢有人不喜欢，而有些 Firefox 用户则是遗憾没有机会使用上 Material Design 风格主题。这不，就有开发者制作了一个 Firefox 主题，让你的 Firefox 浏览器也可以用上 Material Design 风格。

#### 6. [WebSiteUseful](WebSiteUseful)

![](http://o7z41ciog.bkt.clouddn.com/chuangkou.png)

科学上网，免费 ss 帐号分享、ssr 订阅源，免费 VPN 下载，获取及使用教程。就问你怕不怕？

#### 7. [Terminals Are Sexy](https://github.com/k4m4/terminals-are-sexy)

命令行工具和插件集合。

### &lt;p id=&#34;h2&#34;&gt;奇闻&lt;/p&gt;

----

#### 1. 中文屋思想实验

1980年，UCBerkley 的哲学教授 John Searle 发表了一篇题为 &#34;Minds, Brains and Programs&#34; 的论文。在这篇论文中，Searle 旗帜鲜明地反对图灵：他认为一个计算机程序通过图灵测试并不意味着它具有智能，而至多只能是对智能的一个模拟。为了论证自己的观点，Searle 提出了一个名为“中文屋”(Chinese Room)的思想实验。

这个思想实验的内容大概如下：

想象一个从小说英语但完全不会中文的人被反锁在一个房间里。房间里有一盒中文字卡片和一本规则书(rulebook)。这本规则用英文写就，告诉房间里的人一些如何操作汉字卡片的规则，但并没有告诉这个人任何一个中文字或者中文词句表示的含义。（注意，这本规则不是汉英字典！只是一个操作特定汉字卡片的规程）这本规则的本质其实是一个程序（任何一个图灵机上可运行的程序都可以被写成这样的一本规则书）。现在，房间外面有人向房间内递送纸条，纸条上用中文写了一些问题（输入）。假设房间内的规则书（程序）写得如此之好，以至于，房间里的人只要严格按照规则书操作，就可以用房间内的中文字卡片组合出一些词句（输出）来完美地回答输入的问题。于是，这个人提供的输出通过了关于“理解中文”这个心智状态的图灵测试。然而，Searle指出，这个人仍然一点不会中文。更进一步，在无论是在这个房间中，还是考虑这个房间整体，都找不到任何理解中文的心智存在(There is no mental state of understanding Chinese in the room)。因此，通过图灵测试并不意味着拥有智能或者心智。

![](http://o7z41ciog.bkt.clouddn.com/v2-8537fb2f832e09452f78cf35214f547c_hd.jpg)

这个论证在狭义上驳斥了图灵测试（Turing 1950），即即使我们没有找到机器和人的差别，机器依然是无心的，他没有理解意义的能力。但从广义来看，他对人类思维是类似计算机的计算或信息处理系统的理论造成了巨大威胁。毕竟，Searle 认为思想必须来自生物过程，计算机最多可以模拟这些生物过程。

但对于中文屋的反驳层出不穷，大致有三条思路：

1. 不能说塞尔不理解中文，而作出中文屋这个运行程序没有理解的结论。（系统应答和虚拟心灵应答）

    系统应答是最常见的应答（Searle 1980），它主张塞尔只是中文屋的一个CPU（Rey 1986），是个实施者（Kurzweil 2002），他处在更大的系统中，而 实施者的属性并不等于系统属性。所以说塞尔不懂中文，也就不能代表中文屋整个系统没有理解。就像是民间通俗版本的质问一样：难道中国人的细胞懂中文？显然不是。
    
    虚拟心灵应答认为我们没有必要纠结于塞尔是不是理解的实施者，更重要的是是否发生了理解。即问题不是在“系统理解中文”上，而应该只是“运行的系统能否创造对中文理解”。

2. 用中文处理程序确实不会产生理解，但对计算机系统的变体可以造成理解。可以为 CPU 配上传感器进行交互（机器人应答），也可以安装一个模拟大脑神经元操作的系统（脑模拟器应答）。

    塞尔确实不懂中文，但我们是否可以在机器人体内安装数字计算器，利用感受器和效应器作为和外部世界的交互，像小孩子一样通过观察和行动来学习呢？像这样，这些数字计算器就确确实实能赋予符号意义，理解自然语言。
    
    但塞尔认为增加的数字计算器只是额外的输入，它依旧只是语法输入，中文屋的塞尔仍然无法将意义和汉字进行联系。
    
    那假如有一种程序，它能够完全模拟一个理解中文的人的每一个神经，使得每次理解发生时，系统模拟的序列和那个理解中文的人的神经冲动系列完全相同，那么我们是不是就可以说系统理解中文了？

3. 在屋外人来看，塞尔只要通过汉字测试，他就算懂汉语（他心应答）。

    他心应答则认为，塞尔自己所具有的“我不懂中文”的主观直觉并不能作为他是否懂中文的标准。只要他没有表现出与中文使用者的差别（没有被识破），那么在旁观人的直觉看来塞尔就是懂中文的。
    
#### 2. 科学界的第一起谋杀案

故事发生在古希腊，公元前5世纪左右，那里出了一位非常著名的数学家-毕达哥拉斯。他证明许多重要的定理，包括以他的名字命名的**毕达哥拉斯定理**（我们中国人通常叫 勾股定理）。

当时很多人由于仰慕毕达哥拉斯的学术，成为了他的学生。毕达哥拉斯将他们组织到一起，成立了一个秘密会社， 人们叫做 **毕达哥拉斯学派**。

毕达哥拉斯学派 将数学知识运用得炉火纯青之后，觉得不能只满足于用来算题解题，于是他试着从数学领域扩大到哲学，用数的观点去解释一下世界。经过一番刻苦实践，他提出“万物皆为数”的观点：数的元素就是万物的元素，世界是由数组成的，世界上的一切没有不可以用数来表示的，数本身就是世界的秩序。他们的哲学甚至到了匪夷所思的地步， 比如: 用“二”表示意见，用“五”表示婚姻， 用“十”表示完美。

公元前500年，毕达哥拉斯学派的弟子希伯索斯（Hippasus）发现了一个惊人的事实: **若正方形的边长为1，则对角线的长度是测不出来的**。这个说法和毕达哥拉斯学派的观点严重冲突，因为他们认为万物皆可数，一个东西那么是整数 1， 2，5， 6， 7， 8，要么是两个整数的比值 5/6， 8/9， 5/18。

希伯索斯不但发现了“ 根号2 不可能表示成两个整数的比值”，而且给出了巧妙的证明：

![](http://o7z41ciog.bkt.clouddn.com/WechatIMG131.jpeg)

这一发现使该学派领导人惶恐，认为这将动摇他们在学术界的统治地位，于是极力封锁该真理的流传。希伯索斯被迫流亡他乡，不幸的是，在一条海船上还是遇到他的同学。结果被同学徒残忍地投入了水中杀害。

无理数的发现被称为 第一次数学危机。在此后的 2000 多年里， 其他地方的科学家也发现了 类似的不能用分数表示的数。比如印度，在7世纪发现了 无理数的 现象，埃及到了大约 9 世纪也发现了类似现象。在欧洲数学家对无理数进行了孜孜不倦的研究。比如： 哲学家芝诺，15 世纪的达芬奇，17 世纪的天文学家开普勒。直到 19 世纪，1872 年，德国数学家 戴德金从连续性的要求出发，才真正地对无理数有一个全面的认识，建立起实数理论。

#### 3. 能进行光合作用的动物

如果要评选世界奇葩生物，**海蛞蝓**绝对算一个。这类软体动物是雌雄同体，不仅“能攻能受”，还可以群体交配。它们也是偷窃大师，有的能用食物中的色素给皮肤换色，有的还会存储猎物的细胞。

它们当中，还有动物界的终极“死宅”——**绿叶海天牛**（Elysia chlorotica）。这种海蛞蝓不到 5 厘米长，能长达 9 个月甚至更长时间不吃东西，只用皮肤里的叶绿体进行光合作用。

![](http://o7z41ciog.bkt.clouddn.com/NLDIrQgKjiJo.jpg)

等等，动物哪来的叶绿体？而且这些叶绿体还有用？

答案并不颠覆你的生物常识，叶绿体是它们在啃食藻类时“偷”来的。按理说，叶绿体会被动物的肠胃破坏掉，或者遭到免疫系统的攻击。但绿叶海天牛能长期维持叶绿体，也不会受到它们的伤害——大部分动物都难以忍受光合作用产生的游离氧的浓度。

其实，也有其他种类的海蛞蝓能夺取藻类的叶绿体，用其捕获某些射线等，但它们需要不断更新叶绿体。这是因为叶绿体要消耗各种蛋白，而这些蛋白的相关基因在藻类的核基因中，叶绿体是无法自产自足的。

换句话说，要维持叶绿体的话，动物必须利用藻类基因或者藻类基因表达的产物。

绿叶海天牛似乎不用担心这一点。有研究表明，它们的基因组含有转移自藻类的基因，这些基因随着进食的过程发生转移。这是一种惊人的生化本领，我们或许可以用其操控人类或其他动物的基因。

不过也有研究者对此提出质疑，他们发现，绿叶海天牛的卵和幼虫体内已经存在藻类基因，这就意味着，这些基因可能是与生俱来的。

![](http://o7z41ciog.bkt.clouddn.com/YtjY9LrPpJ9qR.jpg)

#### 4. 曼德勃罗集

![](http://o7z41ciog.bkt.clouddn.com/WechatIMG26.jpeg)

曼德勃罗集可称是人类有史以来做出的最奇异、最瑰丽的几何图形，被人称为“上帝的指纹”、“魔鬼的聚合物”。这个点集均出自公式: $z_n+1=z_n^2+c$，这是一个迭代公式，式中的变量都是复数。这是一个大千世界，从他出发可以产生无穷无尽美丽图案，它是曼德勃罗教授在二十世纪七十年代发现的。只要你计算的点足够多，不管你把图案放大多少倍，都能显示出更加复杂的局部。这些局部既与整体不同,又有某种相似的地方，好像着梦幻般的图案具有无穷无尽的细节和自相似性。曼德勃罗教授称此为&#34;魔鬼的聚合物&#34;。为此，曼德勃罗在 1988 年获得了&#34;科学为艺术大奖&#34;。

![](http://o7z41ciog.bkt.clouddn.com/WechatIMG27.jpeg)

这其中的数学解析太复杂了，要凭我的能力来解释清楚，那有点勉为其难了。还是以轻松的心情来欣赏其中的美丽好了。但是之所以曼德勃罗集迷人，就在于这么一个简单的数学公式竟然能孕育出如此纷繁复杂的图形来。

曼德勃罗集的创造人更进一步发明了“碎形”的概念，区别于欧几里德式基于长度，深度，厚度上的古典几何学。碎形演绎的是一种自然几何学：在不规则中蕴藏着某种规则的秩序，却和尺寸无关，就算放大或缩小，其中的复杂程度并未因此减弱。碎形试图解释过去被科学忽略的非线性现象与大自然的复杂结构间的联系。

![](http://o7z41ciog.bkt.clouddn.com/WechatIMG30.jpeg)

真正有一种 “一沙一世界”的体验呢。

### &lt;p id=&#34;h2&#34;&gt;欢迎关注&lt;/p&gt;

----

该系列每周六发布，同步更新在我的[个人博客](https://www.yangcs.net/)和微信公众号上。

微信搜索 “云原生实验室” 或者扫描二维码即可关注。

![](http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg)

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Prometheus 中文文档</title>
      <link>https://www.yangcs.net/prometheus-handbook/</link>
      <pubDate>Fri, 07 Sep 2018 18:10:36 +0800</pubDate>
      
      <guid>https://www.yangcs.net/prometheus-handbook/</guid>
      <description>

&lt;h1 id=&#34;prometheus-中文文档&#34;&gt;Prometheus 中文文档&lt;/h1&gt;

&lt;p&gt;随着容器技术的迅速发展，Kubernetes 已然成为大家追捧的容器集群管理系统。&lt;a href=&#34;https://prometheus.io&#34; target=&#34;_blank&#34;&gt;Prometheus&lt;/a&gt; 作为生态圈 Cloud Native Computing Foundation（简称：CNCF）中的重要一员,其活跃度仅次于 Kubernetes, 现已广泛用于 Kubernetes 集群的监控系统中。&lt;/p&gt;

&lt;p&gt;本文是 Prometheus 官方文档的中文版，同时包括了本人平时在使用 Prometheus 时的参考指南和实践总结，形成一个系统化的参考指南以方便查阅。欢迎大家关注和添加完善内容。&lt;/p&gt;

&lt;h2 id=&#34;在线阅读&#34;&gt;在线阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Gitbook : &lt;a href=&#34;https://www.yangcs.net/prometheus/&#34; target=&#34;_blank&#34;&gt;https://www.yangcs.net/prometheus/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gitbook 新版 : &lt;a href=&#34;https://ryanyang.gitbook.io/prometheus/&#34; target=&#34;_blank&#34;&gt;https://ryanyang.gitbook.io/prometheus/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;项目源码&#34;&gt;项目源码&lt;/h2&gt;

&lt;p&gt;项目源码存放于 Github 上，&lt;a href=&#34;https://github.com/yangchuansheng/prometheus-handbook&#34; target=&#34;_blank&#34;&gt;https://github.com/yangchuansheng/prometheus-handbook&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;微信公众号&#34;&gt;微信公众号&lt;/h2&gt;

&lt;p&gt;扫码关注微信公众号，后续部分章节会在微信公众号中同步更新。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;贡献者&#34;&gt;贡献者&lt;/h2&gt;

&lt;p&gt;欢迎参与贡献和完善内容，贡献方法参考 &lt;a href=&#34;https://github.com/yangchuansheng/prometheus-handbook/blob/master/CONTRIBUTING.md&#34; target=&#34;_blank&#34;&gt;CONTRIBUTING&lt;/a&gt;。感谢所有的贡献者，贡献者列表见 &lt;a href=&#34;https://github.com/yangchuansheng/prometheus-handbook/graphs/contributors&#34; target=&#34;_blank&#34;&gt;contributors&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>干货与湿货分享第7期</title>
      <link>https://www.yangcs.net/posts/weekly-7/</link>
      <pubDate>Sat, 01 Sep 2018 17:49:18 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/weekly-7/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;这是《干货与湿货分享》系列的第7期，主要记录过去一周我所见到的听到的值得分享的东西。&lt;/p&gt;

&lt;p&gt;现在人工智能这么火，一个初创企业如果不加上点相关内容都不好意思叫自己是“创新企业”了，那么到底有多少企业是真正创新的呢？寥寥无几。最近有一位国外的互联网企业家向我们揭示了人工智能行业的骗局。&lt;/p&gt;

&lt;p&gt;我们有充分的理由相信，人工智能是技术领域最热门的流行词汇。它是已知历史上最具破坏性的技术，在人类成为进化树中的过去时之前，人工智能将成为人类的最终最终发明。但是炒作让人工智能成为一个广泛滥用的词。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;大多数 AI 创业公司都没有人工智能。&lt;/strong&gt;他们只是很简单地使用一些很平常的软件，然后贴上 AI 的标签，使他们的软件听起来更有趣。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;大多数聊天机器人都是简单的预构建对话树。&lt;/strong&gt;大多数 AI 机器人创业公司都是使用来自大公司的库和 API 来创建对话树，然后聊天机器人只是遵循预先构建的对话树，并没有使用机器学习等 AI 技术。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;很多伪 AI 产品。&lt;/strong&gt;很多公司通过人工助理来完成工作，比如人工处理邮件和会议，然后假装这些工作是由 AI 完成的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过这些谎言似乎可以快速帮助人们获得成功，一路走到顶峰，但是只有真正的技术进步才是实现信息和技术获取民主化的最公平的方式，人类的未来需要那些重视诚实和使命感而不是眼里只有金钱的人，他们才是我们最大的希望。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-新闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;新闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-mit-媒体实验室研究人员开发了水下无线通讯技术-https-scitechdaily-com-mit-media-lab-researchers-develop-wireless-underwater-to-air-communications&#34;&gt;1. &lt;a href=&#34;https://scitechdaily.com/mit-media-lab-researchers-develop-wireless-underwater-to-air-communications/&#34; target=&#34;_blank&#34;&gt;MIT 媒体实验室研究人员开发了水下无线通讯技术&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Wireless-Water-to-Air-Communications.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;麻省理工学院媒体实验室的研究人员设计了一个系统，允许水下的设备和飞机上的传感器直接共享数据。水下发射器将声呐信号引导到水面，然后产生与传输的 0 和 1 相对应的微小振动。在水面上方，高灵敏度的接收器读取这些微小的振动干扰并解码声呐信号。&lt;/p&gt;

&lt;h4 id=&#34;2-法国一公园训练乌鸦充当清洁工人-http-jandan-net-2018-08-26-rooks-corvids-html&#34;&gt;2. &lt;a href=&#34;http://jandan.net/2018/08/26/rooks-corvids.html&#34; target=&#34;_blank&#34;&gt;法国一公园训练乌鸦充当清洁工人&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/be5d1ecb7f7070f16bcc13353111a27b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;乌鸦是一种非常聪明的鸟类。它们能够制作并改良工具，会使用为它们特制的无人售卖机；现在这些长了羽毛的天才已经有了一份正式工作：在法国西部的 Puy du Fou 历史主题公园里，有6位雀形目鸦科鸦属的清洁工。&lt;/p&gt;

&lt;p&gt;每当Boubou，Bamboo，Bill，Black，Bricole和Baco往一个特殊的容器内放置烟头或其他小块垃圾时，员工就会洒下食物作为给鸟儿们的奖品。&lt;/p&gt;

&lt;h4 id=&#34;3-日本使用机器人来送寿司-https-yellrobot-com-sushi-autonomous-delivery-robots&#34;&gt;3. &lt;a href=&#34;https://yellrobot.com/sushi-autonomous-delivery-robots/&#34; target=&#34;_blank&#34;&gt;日本使用机器人来送寿司&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/CarriRo-Delivery.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;最近日本最受欢迎的寿司品牌 &lt;a href=&#34;https://www.ginsara.jp/&#34; target=&#34;_blank&#34;&gt;Gin no Sara&lt;/a&gt; 与机器人公司 &lt;a href=&#34;https://www.zmp.co.jp/en/products/carriro-delivery&#34; target=&#34;_blank&#34;&gt;ZMP&lt;/a&gt; 合作，通过机器人来给人们送午餐。这个可爱的机器人名叫 CarriRo，它有一个大大的眼睛，闪烁着蓝色的灯光，看起来像一个卡通娃娃，所以它在人行道上来回走动时不会吓到路人。它身高 3 英尺，使用相机和激光传感器来进行导航，运行时长可达 8 小时，期间可以送大约 60 份的寿司，白天或晚上都可以工作。&lt;/p&gt;

&lt;h4 id=&#34;4-在人和老鼠的免疫系统中发现了一种全新的-微器官-http-jandan-net-2018-08-26-lymph-node-html&#34;&gt;4. &lt;a href=&#34;http://jandan.net/2018/08/26/lymph-node.html&#34; target=&#34;_blank&#34;&gt;在人和老鼠的免疫系统中发现了一种全新的「微器官 」&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/1b9c50bb1794d58a1eaf5b61668d864c.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;基于几个世纪的临床经验，我们知道身体一旦遇到特定类型的感染，下次就能更好地免疫它。最近研究人员在小鼠的免疫系统淋巴结顶部发现了一种薄而扁平的结构，他们将其称为“包膜下增殖病灶”(简称SPF)。这项新的研究表明，新的微器官可能是我们身体“记忆”感染产生免疫的关键。这些 SPF 似乎像生物体内国土安全局的特别行动小组一样，负责规划打击入侵的微生物。&lt;/p&gt;

&lt;h4 id=&#34;5-1973-年-mit-一模型做出预言-文明将在-2040-年走到终点-http-jandan-net-2018-08-31-limits-growth-html&#34;&gt;5. &lt;a href=&#34;http://jandan.net/2018/08/31/limits-growth.html&#34; target=&#34;_blank&#34;&gt;1973 年 MIT 一模型做出预言：文明将在 2040 年走到终点&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/f6d21a32e75485295d54e4269149e624.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;20 世纪 70 年代初期，麻省理工学院的研究人员受到一个名为罗马俱乐部的精英组织的委托，预测在有限的行星资源下，全球增长的未来是什么样的。该模型考察了最有可能影响人类社会全体的五大因素：人口增长、农业生产、不可再生资源枯竭、工业产出和环境污染，使用一种名为 World3 的精致的计算机模型——基于 Forrester 最初的 World1 系统——研究人员计算出，沿着“一切照旧”的轨迹，我们的社会将在本世纪的某个时间点遭遇真正的崩溃。&lt;/p&gt;

&lt;p&gt;几十年以来，研究表明，这一开创性模型所做的许多预测都是准确的，有些人甚至认为我们应该做好迎接“很快就会出现的全球崩溃的早期阶段”的准备。你可以查看 &lt;a href=&#34;https://www.youtube.com/watch?v=cCxPOqwCr1I&#34; target=&#34;_blank&#34;&gt;youtube 上面的视频&lt;/a&gt;，看看世界在1973年的样子——记住，从现在开始有所作为永远不会太晚。&lt;/p&gt;

&lt;h4 id=&#34;6-声音也是一种粒子-还带有负质量-http-jandan-net-2018-08-24-negative-gravity-html&#34;&gt;6. &lt;a href=&#34;http://jandan.net/2018/08/24/negative-gravity.html&#34; target=&#34;_blank&#34;&gt;声音也是一种粒子，还带有负质量？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/3e73965317efb9c2665c33662f36f8fb.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;我们所知道的宏观世界受牛顿运动和引力定律所支配，但是，哥伦比亚大学的物理学家团队提交一篇新论文，冲击了我们头脑中的固有观念。他们说实际上可能存在具有负质量的粒子——它们在重力作用下向上而不是向下运动——就在我们的身边。根据论文，他们指的并非是某种神奇的亚原子结构，而是我们每天听到并制造的声音“粒子”——声子——它们反抗重力，负质量的粒子产生微小的负引力场，在重力场中被推向远方。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-工具-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;工具&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-videofk-https-www-videofk-com&#34;&gt;1. &lt;a href=&#34;https://www.videofk.com/&#34; target=&#34;_blank&#34;&gt;Videofk&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/QQ20180822-153658.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Videofk 是一款用来下载流媒体视频网站的视频文件的工具，支持包括快手、梨视频、微博、B站、YouTube、Instagram、Vimeo、汤不热等站点的视频下载。&lt;/p&gt;

&lt;h4 id=&#34;2-easy-to-rss-https-chrome-google-com-webstore-detail-easy-to-rss-hbcmpkcpbnecinpngdnfbnknfkdpdfli&#34;&gt;2. &lt;a href=&#34;https://chrome.google.com/webstore/detail/easy-to-rss/hbcmpkcpbnecinpngdnfbnknfkdpdfli&#34; target=&#34;_blank&#34;&gt;Easy to RSS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/demo-rsshub.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Easy-to-RSS 是一个支持 RSSHub 的一键式发现当前网页 RSS 的 chrome 扩展。&lt;/p&gt;

&lt;h4 id=&#34;3-winds-https-github-com-getstream-winds&#34;&gt;3. &lt;a href=&#34;https://github.com/GetStream/Winds&#34; target=&#34;_blank&#34;&gt;Winds&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/7562e706e67.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;由 Getstream.io 提供的订阅 RSS 和 Podcast 的 APP，支持 Windows、MacOS 和 Linux 平台。&lt;/p&gt;

&lt;h4 id=&#34;4-finalshell-https-liyuans-com-2018-08-finalshell-html&#34;&gt;4. &lt;a href=&#34;https://liyuans.com/2018/08/finalshell.html&#34; target=&#34;_blank&#34;&gt;FinalShell&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/WechatIMG52.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;可替代 Xshell 的 SSH 工具，支持 Linux、Windows、Mac，免费海外服务器远程桌面加速、ssh加速、双边tcp加速、内网穿透。&lt;/p&gt;

&lt;h4 id=&#34;5-monlor-tools-https-github-com-monlor-monlor-tools&#34;&gt;5. &lt;a href=&#34;https://github.com/monlor/Monlor-Tools&#34; target=&#34;_blank&#34;&gt;Monlor-Tools&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/img.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;小米路由器 Shell 工具箱，支持 Shadowsocks、Aria2、KoolProxy 等插件。&lt;/p&gt;

&lt;h4 id=&#34;6-gsil-https-github-com-feeicn-gsil&#34;&gt;6. &lt;a href=&#34;https://github.com/FeeiCN/GSIL&#34; target=&#34;_blank&#34;&gt;GSIL&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;GitHub 敏感信息泄露监控，近实时监控 GitHub 敏感信息泄露，并发送告警通知。&lt;/p&gt;

&lt;h4 id=&#34;7-shyaml-https-github-com-0k-shyaml&#34;&gt;7. &lt;a href=&#34;https://github.com/0k/shyaml&#34; target=&#34;_blank&#34;&gt;shyaml&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;格式化 YAML 文件输出的命令行工具，与 jq 类似（jq 用来格式化 json 文件输出）。&lt;/p&gt;

&lt;h4 id=&#34;8-gatsby-https-github-com-gatsbyjs-gatsby&#34;&gt;8. &lt;a href=&#34;https://github.com/gatsbyjs/gatsby&#34; target=&#34;_blank&#34;&gt;gatsby&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个静态网站生成器，能够让你在不考虑数据源的情况下构建快速响应的网站。&lt;/p&gt;

&lt;h4 id=&#34;9-mortar-https-github-com-kontena-mortar&#34;&gt;9. &lt;a href=&#34;https://github.com/kontena/mortar&#34; target=&#34;_blank&#34;&gt;Mortar&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/kontena-mortar.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Mortar 是一个用来轻松处理复杂的 Kubernetes 资源的工具。对于大多数简单的使用场景，我们只需要通过 &lt;code&gt;kubectl apply -f some_folder/&lt;/code&gt; 来管理资源就行了，但在 CI/CD pipeline 中，情况将会变得很复杂。然而通过 Helm 仓库来编写组织所有资源又太繁琐了，因此就诞生了 Mortar。&lt;/p&gt;

&lt;h4 id=&#34;10-docusaurus-https-github-com-facebook-docusaurus&#34;&gt;10. &lt;a href=&#34;https://github.com/facebook/Docusaurus&#34; target=&#34;_blank&#34;&gt;Docusaurus&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;易于维护的开源文档网站，由 Facebook 开源。&lt;/p&gt;

&lt;h4 id=&#34;11-boss-https-github-com-crosbymichael-boss&#34;&gt;11. &lt;a href=&#34;https://github.com/crosbymichael/boss&#34; target=&#34;_blank&#34;&gt;boss&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;基于 Containerd 开发的容器平台。&lt;/p&gt;

&lt;h4 id=&#34;12-ebpf-exporter-https-github-com-cloudflare-ebpf-exporter&#34;&gt;12. &lt;a href=&#34;https://github.com/cloudflare/ebpf_exporter&#34; target=&#34;_blank&#34;&gt;ebpf_exporter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;由 Cloudflare 提供的用来收集 ePBF 监控指标的 Prometheus exporter。&lt;/p&gt;

&lt;h4 id=&#34;13-modsecurity-envoy-https-github-com-octarinesec-modsecurity-envoy&#34;&gt;13. &lt;a href=&#34;https://github.com/octarinesec/ModSecurity-envoy&#34; target=&#34;_blank&#34;&gt;ModSecurity-envoy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;ModSecurity-Envoy 是使用运行 ModSecurity（V3）的 HTTP 过滤器编译的 Envoy 版本。&lt;/p&gt;

&lt;h4 id=&#34;14-shuttle-https-github-com-sipt-shuttle&#34;&gt;14. &lt;a href=&#34;https://github.com/sipt/shuttle&#34; target=&#34;_blank&#34;&gt;Shuttle&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/shuttle.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Shuttle 是一个基于 Go 开发的全平台 ss-local 工具，具有代理、多服务器选择、HTTP/HTTPS 抓包、独立 DNS 解析机制，目标为开发者提供便利。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-教程-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;教程&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-什么是-istio-http-cizixs-com-2018-08-26-what-is-istio&#34;&gt;1. &lt;a href=&#34;http://cizixs.com/2018/08/26/what-is-istio&#34; target=&#34;_blank&#34;&gt;什么是 istio&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;如果你比较关注新兴技术的话，那么很可能在不同的地方听说过 istio，并且知道它和 service mesh 有着牵扯。这篇文章是作者之前在公司内部做过的分享，可以作为了解 istio 的入门介绍，了解什么是 istio，istio 为什么最近这么火，以及 istio 能够我们带来什么好处。&lt;/p&gt;

&lt;h4 id=&#34;2-ethereum-development-with-go-https-github-com-miguelmota-ethereum-development-with-go-book&#34;&gt;2. &lt;a href=&#34;https://github.com/miguelmota/ethereum-development-with-go-book&#34; target=&#34;_blank&#34;&gt;Ethereum Development with Go&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/ethereum-development-with-go.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是一本描述了如何通过 Go 语言来开发以太坊的小册子。&lt;/p&gt;

&lt;h4 id=&#34;3-openshift-和-kubernetes-之间最重要的10个区别-https-cloudowski-com-articles-10-differences-between-openshift-and-kubernetes&#34;&gt;3. &lt;a href=&#34;https://cloudowski.com/articles/10-differences-between-openshift-and-kubernetes/&#34; target=&#34;_blank&#34;&gt;OpenShift 和 Kubernetes 之间最重要的10个区别&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;OpenShift 经常被其供应商 Red Hat 称为“企业级 Kubernetes”。本文描述了 OpenShift 和 Kubernetes 之间的真正差异。&lt;/p&gt;

&lt;h4 id=&#34;4-go-语言的内存分配与垃圾回收-https-about-sourcegraph-com-go-gophercon-2018-allocator-wrestling&#34;&gt;4. &lt;a href=&#34;https://about.sourcegraph.com/go/gophercon-2018-allocator-wrestling/&#34; target=&#34;_blank&#34;&gt;Go 语言的内存分配与垃圾回收&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Go 语言是一种内存托管语言，大多数情况下你不必手动管理内存，因为很多工作已经由 Go runtime 为你做好了。但是动态内存分配并不是完全没有代价的，有时候会严重影响程序性能。本文介绍了可用于检测和解决内存分配瓶颈的技术和工具。&lt;/p&gt;

&lt;h4 id=&#34;5-从零开始写区块链-https-github-com-opensourcebooks-blockchain&#34;&gt;5. &lt;a href=&#34;https://github.com/OpensourceBooks/blockchain&#34; target=&#34;_blank&#34;&gt;从零开始写区块链&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本教程用来说明，如何用 Python 语言来写一个区块链。&lt;/p&gt;

&lt;h4 id=&#34;6-构建一个计算器-https-tutorialedge-net-golang-go-webassembly-tutorial&#34;&gt;6. &lt;a href=&#34;https://tutorialedge.net/golang/go-webassembly-tutorial/&#34; target=&#34;_blank&#34;&gt;构建一个计算器&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文介绍了如何使用 Go 和 WebAssembly 来构建前端应用程序。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-资源-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;资源&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-虫部落快搜-http-search-chongbuluo-com&#34;&gt;1. &lt;a href=&#34;http://search.chongbuluo.com/&#34; target=&#34;_blank&#34;&gt;虫部落快搜&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Jietu20180901-163120.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这个网站真的无所不能，大家看图片就知道了，你想查的所有的东西基本上都能在这上面找到，查字体，查文献，查ACG资源，电子书资源，GitHub程序，论文数据，你想要的全都有！&lt;/p&gt;

&lt;h4 id=&#34;2-美剧在线看-http-moviesunus01-com&#34;&gt;2. &lt;a href=&#34;http://moviesunus01.com/&#34; target=&#34;_blank&#34;&gt;美剧在线看&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在如今的时代，WiFi遍地都是，我们更加倾向于在线看视频，由于某些特殊的原因，如今在各大视频网站想找到你想看的美剧资源越来越难了，我们更多地是在网盘里讨生活，这个网站提供了绝大多数主流美剧的在线观看，绝对能满足很多人的追剧需求。&lt;/p&gt;

&lt;h4 id=&#34;3-youtube-频道推荐-https-zhuanlan-zhihu-com-p-20061774&#34;&gt;3. &lt;a href=&#34;https://zhuanlan.zhihu.com/p/20061774&#34; target=&#34;_blank&#34;&gt;YouTube 频道推荐&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;YouTube 不仅仅是一个视频网站，它和国内的优酷等网站完全不是同一种东西，就像 Google 和百度，Facebook 和人人的关系类似。很多人也许不知道，YouTube 上除了搞笑视频、猫咪视频、MTV 之外还有许多高质量的科普。这些科普频道兼顾专业性、科学性（科普的“科”）和娱乐性、生活性（科普的“普”），制作精良，诚意十足，堪称科普的优秀范本。不管你是喜欢科普知识，还是纯粹猎奇，还是科普从业或相关人士，这些频道都非常值得关注。&lt;/p&gt;

&lt;h4 id=&#34;4-发现导航-v2-https-github-com-xjh22222228-nav&#34;&gt;4. &lt;a href=&#34;https://github.com/xjh22222228/nav&#34; target=&#34;_blank&#34;&gt;发现导航 - V2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个采用三叉树分类的导航网站，现在还在不断的完善和新增当中，每天保持3+。&lt;/p&gt;

&lt;h4 id=&#34;5-awesome-chinese-podcasts-https-github-com-fffx-awesome-chinese-podcasts&#34;&gt;5. &lt;a href=&#34;https://github.com/fffx/awesome-chinese-podcasts&#34; target=&#34;_blank&#34;&gt;awesome-chinese-podcasts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;收集了比较高质量的中文播客。&lt;/p&gt;

&lt;h4 id=&#34;6-每日一题-http-daily-letechinfo-com&#34;&gt;6. &lt;a href=&#34;http://daily.letechinfo.com/&#34; target=&#34;_blank&#34;&gt;每日一题&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;程序员面试的题目网站，每日公布一个面试题。&lt;/p&gt;

&lt;h4 id=&#34;7-ml-from-scratch-https-github-com-eriklindernoren-ml-from-scratch&#34;&gt;7. &lt;a href=&#34;https://github.com/eriklindernoren/ML-From-Scratch&#34; target=&#34;_blank&#34;&gt;ML-From-Scratch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一些基本的机器学习模型和算法的 Python 实现。&lt;/p&gt;

&lt;h4 id=&#34;8-telegram-电影下载资源频道&#34;&gt;8. Telegram 电影下载资源频道&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;帮找资源: &lt;a href=&#34;https://t.me/lovesource&#34; target=&#34;_blank&#34;&gt;https://t.me/lovesource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;美剧资源推送: &lt;a href=&#34;https://t.me/SSKMJBTS&#34; target=&#34;_blank&#34;&gt;https://t.me/SSKMJBTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sync资源更新: &lt;a href=&#34;https://t.me/shenkey&#34; target=&#34;_blank&#34;&gt;https://t.me/shenkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;蓝光电影频道: &lt;a href=&#34;https://t.me/voidrss&#34; target=&#34;_blank&#34;&gt;https://t.me/voidrss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中国高清电影: &lt;a href=&#34;https://t.me/CNHDTV&#34; target=&#34;_blank&#34;&gt;https://t.me/CNHDTV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CosPlay R18 索引频道: &lt;a href=&#34;https://t.me/CosR18&#34; target=&#34;_blank&#34;&gt;https://t.me/CosR18&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;9-powerlevel9k-https-github-com-bhilburn-powerlevel9k&#34;&gt;9. &lt;a href=&#34;https://github.com/bhilburn/powerlevel9k&#34; target=&#34;_blank&#34;&gt;Powerlevel9k&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Powerlevel9k 是使用 Powerline 字体的 Zsh 主题，它可以用于 Zsh 或者 Zsh 框架，如 Oh-My-Zsh、Prezto、 Antigen 等。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-文摘-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;文摘&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-王小波-什么样的生活值得一过&#34;&gt;1. 王小波：什么样的生活值得一过？&lt;/h4&gt;

&lt;p&gt;人从工作中可以得到乐趣，这是一种巨大的好处。&lt;/p&gt;

&lt;p&gt;我知道在中国，农村的人把生儿育女看作是一生的主题。&lt;/p&gt;

&lt;p&gt;把儿女养大，自己就死掉，给他们空出地方来——这是很流行的想法。在城市里则另有一种想法，但不知是不是很流行：它把取得社会地位看作一生的主题。&lt;/p&gt;

&lt;p&gt;站在北京八宝山的骨灰墙前，可以体会到这种想法。&lt;/p&gt;

&lt;p&gt;我在那里看到一位已故的大叔墓上写着：副系主任、支部副书记、副教授、某某教研室副主任，等等。假如能把这些“副”字去掉个把，对这位大叔当然更好一些，但这些“副”字最能证明有这样一种想法。&lt;/p&gt;

&lt;p&gt;顺便说一句，我到美国的公墓里看过，发现他们的墓碑上只写两件事：一是生卒年月，二是某年至某年服兵役。&lt;/p&gt;

&lt;p&gt;这就是说，他们以为人的一生只有这两件事值得记述：这位上帝的子民曾经来到尘世，以及这位公民曾去为国尽忠，写别的都是多余的，我觉得这种想法比较质朴……恐怕在一份青年刊物上写这些墓前的景物是太过伤感，还是及早回到正题上来罢。&lt;/p&gt;

&lt;p&gt;我想要把自己对人生的看法推荐给青年朋友们：人从工作中可以得到乐趣，这是一种巨大的好处。&lt;/p&gt;

&lt;p&gt;根据我的经验，人在年轻时，最头疼的一件事就是决定自己这一生要做什么。在这方面，我倒没有什么具体的建议：干什么都可以，但最好不要写小说，这是和我抢饭碗。&lt;/p&gt;

&lt;p&gt;当然，假如你执意要写，我也没理由反对。总而言之，干什么都是好的；但要干出个样子来，这才是人的价值和尊严所在。&lt;/p&gt;

&lt;p&gt;人在工作时，不单要用到手、腿和腰，还要用脑子和自己的心胸。我总觉得国人对这后一方面不够重视，这样就会把工作看成是受罪。失掉了快乐最主要的源泉，对生活的态度也会因之变得灰暗……&lt;/p&gt;

&lt;p&gt;人活在世上，不但有身体，还有头脑和心胸——对此请勿从解剖学上理解。&lt;/p&gt;

&lt;p&gt;人脑是怎样的一种东西，科学还不能说清楚。&lt;/p&gt;

&lt;p&gt;心胸是怎么回事就更难说清。对我自己来说，心胸是我在生活中想要达到的最低目标。&lt;/p&gt;

&lt;p&gt;某件事有悖于我的心胸，我就认为它不值得一做；某个人有悖于我的心胸，我就觉得他不值得一交；某种生活有悖于我的心胸，我就会以为它不值得一过。&lt;/p&gt;

&lt;p&gt;罗素先生曾言，对人来说，不加检点的生活，确实不值得一过。我同意他的意见：不加检点的生活，属于不能接受的生活之一种。&lt;/p&gt;

&lt;p&gt;人必须过他可以接受的生活，这恰恰是他改变一切的动力。&lt;/p&gt;

&lt;p&gt;人有了心胸，就可以用它来改变自己的生活。&lt;/p&gt;

&lt;p&gt;中国人喜欢接受这样的想法：只要能活着就是好的，活成什么样子无所谓。从一些电影的名字就可以看出来：《活着》、《找乐》……我对这种想法是断然地不赞成，因为抱有这种想法的人就可能活成任何一种糟糕的样子，从而使生活本身失去意义。&lt;/p&gt;

&lt;p&gt;高尚、清洁、充满乐趣的生活是好的，人们很容易得到共识。卑下、肮脏、贫乏的生活是不好的，这也能得到共识。但只有这两条远远不够。&lt;/p&gt;

&lt;p&gt;我以写作为生，我知道某种文章好，也知道某种文章坏。仅知道这两条尚不足以开始写作。&lt;/p&gt;

&lt;p&gt;还有更加重要的一条，那就是：某种样子的文章对我来说不可取，绝不能让它从我笔下写出来，冠以我的名字登在报刊上。以小喻大，这也是我对生活的态度。&lt;/p&gt;

&lt;h4 id=&#34;2-俞敏洪8月25日在亚布力论坛上的演讲节选&#34;&gt;2. 俞敏洪8月25日在亚布力论坛上的演讲节选&lt;/h4&gt;

&lt;p&gt;我们几乎所有的互联网公司做的都是国内的生意，而且都是利用了人们的低级趣味，不管是拼多多，包括阿里巴巴和腾讯，都是利用了中国人民喜欢买卖东西、喜欢互相八卦的这样的低级趣味，如果有哪一家科技公司创造出了真正的影响全世界的科技产品才是牛逼的。现在阿里巴巴有一点这样的苗头，但是如何真正升级为世界重要的经济体才是重要的。人工智能等技术极有可能催生出世界级别的产品来，中国有大数据的优势，人工智能基于的是大数据，但是到底能不能起来就看我们这些企业家的高度如何了。如果高度不够，依然是想着从老百姓身上的低级趣味赚钱，那我们依然永远起不来。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-奇闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;奇闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-达-芬奇在-1492-年设计的冰箱-https-www-bbc-co-uk-news-blogs-news-from-elsewhere-33478364&#34;&gt;1. &lt;a href=&#34;https://www.bbc.co.uk/news/blogs-news-from-elsewhere-33478364&#34; target=&#34;_blank&#34;&gt;达·芬奇在 1492 年设计的冰箱&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/_84198753_met.provincia.fi.it.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;&lt;em&gt;达·芬奇设计的冰箱原型&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;人类历史上公认的旷世奇才只有两个人，一个是发明了交流电的尼古拉•特斯拉，另一个就是&lt;strong&gt;莱昂纳多•达芬奇&lt;/strong&gt;。在我看来，达·芬奇更加传奇一些，当他在给中世纪意大利贵族画肖像时，他就在研究如何冷藏他们的饮料。他的概念图中描绘了把空气泵入三个皮革腔室的复杂的风箱系统，它们通过18个喷管把空气快速地压进中间的空间，要冷却的容器就在存放在那里。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/13094240pvy5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;em&gt;制冷机的详细图纸&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;以现代眼光来看，达·芬奇的设备看似笨重——占这么多空间只制一点点冷。但我们生活在充斥琳琅满目的高科技冷藏冷冻箱的世界；我们把整购物车甚至都不需要冷藏的食品塞进它们里面。在达·芬奇的年代，只存在被动冷却方式(自然通风、地窖储存)，这个机器会是令人瞩目的。&lt;/p&gt;

&lt;p&gt;达·芬奇生前可能建造过它，因为达·芬奇也为奢华宴会设计过特殊的喷泉，“没有理由排除他也在实验室里建造了这台机器的可能性。”它可能冷藏过从潘趣酒到雪葩的各种东西(意式冰淇淋几十年后才被发明)。&lt;/p&gt;

&lt;h4 id=&#34;2-关于屁的江湖恩怨&#34;&gt;2. 关于屁的江湖恩怨&lt;/h4&gt;

&lt;p&gt;屁不仅仅是一阵带着臭味的风而已。过去，它曾经是人们立法的对象、战争的罪魁祸首甚至还曾被神学化。&lt;/p&gt;

&lt;p&gt;虽然这话违反直觉，但&lt;strong&gt;在人类的心目中屁曾经有着灵性的一面&lt;/strong&gt;。摩尼教(旧译明教)是一个源自古代波斯宗教祆教的宗教，为公元3世纪中叶波斯人摩尼所创立，圣奥古斯丁也曾是该教的一员。这个宗教曾认为放屁是身体释放神圣之“光”的行为。就像学者 Robin Lane Fox 指出的那样，摩尼教可能曾经是世界上唯一一个相信屁有神圣力量的宗教，不过他们并不是唯一一个对屁进行深思的古代组织。除了奠定三角几何的基础之外，哲学家毕达哥拉斯曾担忧过人们放屁的时候是否会同时放掉自己的灵魂。想到灵魂是一种气息而屁是另外一种气息，这种担忧不无道理。&lt;/p&gt;

&lt;p&gt;看过几个历史故事之后，我们就会发现古人的担忧其实非常有道理，因为&lt;strong&gt;屁曾经不止一次引发战争&lt;/strong&gt;。希腊历史学家希罗多德曾记载过一个屁引发一连串针对埃及法老阿普里伊起义的故事。在一世纪的耶路撒冷，屁的影响甚至更加严重。历史学家约瑟夫曾讲述过一名无礼的罗马士兵，脱掉了他的裤子并弯腰说了点脏话。这件事发生在逾越节(犹太人的宗教节日)的前几天，其结果是一万多人死亡。&lt;/p&gt;

&lt;p&gt;屁的负面影响远不止于此。美国圣母大学的科学史家 Jessica Baron 博士曾表示，曾有医生认为屁与性有关系。盖伦医生就曾认为胀气食物有助性之效，他之后的医生也曾持有相同观点，比如佛兰德医生 Hugo Fridaevallis 就曾在1569年写过胀气如何助性，并推荐新婚夫妇吃胀气食物(芦笋)。&lt;/p&gt;

&lt;p&gt;对于大部分基督教徒来说，屁有着更加阴沉的影响。圣奥古斯丁曾说人们放屁的时候就像在用屁股“唱歌”，有他这种观点的只是少数人。中世纪的大部分神学家都认为屁是腐败的产物，也是死亡的标志。&lt;/p&gt;

&lt;p&gt;有趣的是，屁早就成为人们的笑谈。公元前 1900 年有句苏美尔谚语这样说：&lt;strong&gt;“哪个年轻女人从不在她丈夫的大腿上放屁；这事儿自古以来就没发生过。”&lt;/strong&gt;希腊戏剧家阿里斯芬多尼斯也曾写过差不多的句子，莎士比亚、乔叟、马克·吐温以及一千零一夜都不例外。&lt;/p&gt;

&lt;p&gt;在很多时候，与屁有关的笑话都不适合在公众场合说。19世纪除理查德·伯顿之外的一千零一夜英译版本，均删除掉了与屁有关的故事。马克·吐温的 Elizabethan-period 1601 最初也是因为涉及屁才匿名发表。&lt;/p&gt;

&lt;p&gt;而&lt;strong&gt;最成功的放屁戏剧提供者&lt;/strong&gt;是 Roland le Sarcere，他也被称作 Roland the Farter，他是英国国王亨利二世的宫廷吟游诗人。Roland 最喜欢在表演完一曲舞蹈的时候，以一个口哨和一个屁结束他的表演。Roland 的天赋为他在沙福克赢得了一座庄园住宅和一百英亩土地。Roland 如此受人喜爱以至于此后不断有人复述他的故事并扩充他的传记，这一过程居然在无意中将他的寿命延长到了120岁。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roland 并不是唯一一个为了钱而放屁的男人&lt;/strong&gt;。中世纪的一个日本卷轴曾简述一名为福克托玛(Fukutomi)的男人，他专为贵族表演放屁舞。这是一个传奇故事，不过根据记载，18世纪日本确实有专门在工作时放屁的人。在18世纪末19世纪初的巴黎，著名放屁人 Joseph Pujol 得以在红磨坊表演他那历时九十分钟的表演，显然弗洛伊德在研究恋肛癖之前去看过这场表演。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不论何时何地，放屁都是一件让人尴尬的事情&lt;/strong&gt;，对于那些社会地位较高的人而言尤为如此。但人们却更不愿意冒险憋屁。罗马作家苏埃托尼乌斯曾记录过，暴君克劳多斯在听闻一人因羞怯而试图憋屁差点憋死自己之后，就试图颁布一项法令，允许人们在餐桌旁发泄任何腹部胀气。&lt;/p&gt;

&lt;p&gt;不论屁给文化带来了怎样的影响，它都让人们饱受折磨。打嗝会引来一些尴尬，但却能逗乐大家；传染疾病的打喷嚏也能讨人喜欢，如果能用袖子或者手遮住的话，就连咳嗽也能被大家接受。可&lt;strong&gt;屁的社会地位一直有待提高&lt;/strong&gt;，即便科学家们称每个人一天要放14次屁。&lt;/p&gt;

&lt;h4 id=&#34;3-紫禁城的来历&#34;&gt;3. 紫禁城的来历&lt;/h4&gt;

&lt;p&gt;清朝时整个北京分为三大区域：宫城、皇城和京城。宫城就是皇宫，也就是在如今叫作“故宫”的地方，它又称为紫禁城，皇上和他的后宫妃子们吃饭、睡觉、工作以及搞争风吃醋活动的地方非常之广大，又无比之庄严，处处有禁军把守，因此他是“禁城”。而“紫”指的是天上的&lt;strong&gt;紫微星（北极星）&lt;/strong&gt;，明亮的紫微星象征天帝的君临，因而传说中天帝居住的地方也叫紫宫。作为天的儿子，皇上的紫禁城自然也是“紫宫”的一部分，于是它就叫“紫禁城”————天上紫微宫，人间帝王城。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-欢迎关注-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;欢迎关注&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;该系列每周六发布，同步更新在我的&lt;a href=&#34;https://www.yangcs.net/&#34; target=&#34;_blank&#34;&gt;个人博客&lt;/a&gt;和微信公众号上。&lt;/p&gt;

&lt;p&gt;微信搜索 “云原生实验室” 或者扫描二维码即可关注。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes DNS 高阶指南</title>
      <link>https://www.yangcs.net/posts/kubernetes-dns/</link>
      <pubDate>Mon, 27 Aug 2018 18:11:52 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-dns/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 是 Kubernetes 的核心功能之一，Kubernetes 通过 &lt;code&gt;kube-dns&lt;/code&gt; 或 &lt;code&gt;CoreDNS&lt;/code&gt; 作为集群的必备扩展来提供命名服务，通过 DNS 扩展，每一个 &lt;code&gt;Service&lt;/code&gt; 都会产生一个独一无二的 FQDN（Fully Qualified Domain Name）名称。&lt;/p&gt;

&lt;p&gt;在大多数使用场景下，我们并不会太关心 DNS 插件的内部运作细节，直接使用 Kubernetes 预设的 DNS 配置和策略就可以满足需求。然而随着使用场景越来越复杂，譬如跟 NFV（Network Function Virtualization）相关的场景，我们的应用（Pod）可能就会需要更加个性化的 DNS 配置。&lt;/p&gt;

&lt;p&gt;接下来使用下面这张架构图来说明可能的使用场景：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/DcFCnLw.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-1-为什么需要自定义-dns-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;1. 为什么需要自定义 DNS&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;一般的使用场景下，我们的 Kubernetes 集群的使用方式就像图中&lt;strong&gt;紫色/粉红色（Pod3）&lt;/strong&gt;区域一样，所有的 Pod 如果有任何要存取 &lt;code&gt;DNS&lt;/code&gt; 的需求，都会透过集群内的的 &lt;code&gt;k8s DNS&lt;/code&gt; 来处理对应的请求与回复。&lt;/p&gt;

&lt;p&gt;然而在 &lt;code&gt;NFV&lt;/code&gt; 的使用场景下，网络变成一个很重要的区域，整体的性能都取决于该应用的设计与集群的网络架构设计。这部分应用通常都会追求高输出或是低延迟，为了得到更好的性能，需要避免这些流量跟其他无关的流量使用相同的网络线路进行传输。&lt;/p&gt;

&lt;p&gt;在这种情况下，通常就会把整个集群的网络设计成两种架构，分别是 &lt;code&gt;Control Network&lt;/code&gt; 和 &lt;code&gt;Data Network&lt;/code&gt; 这两个不同用途的网络架构。在 Kubernetes 中，&lt;code&gt;Control Network&lt;/code&gt; 就类似于图中的 &lt;code&gt;Cluster Network&lt;/code&gt;，负责整个集群之间的沟通。图中&lt;strong&gt;绿色/橘色（Pod1，Pod2）&lt;/strong&gt;这两个区域就是所谓的 &lt;code&gt;Data Network&lt;/code&gt;，其网卡本身也被独立出来，不会与本来的 Kubernetes 集群发生冲突，它们之间的流量通过独立的网络进行传输。&lt;/p&gt;

&lt;p&gt;存在于独立出来的网络架构中的这些特殊的 Pod 基本上没法跟 Kubernetes 集群内的 DNS 互连，而且这些应用还有可能在外部有自己的 &lt;code&gt;DNS Server&lt;/code&gt;，所以在这种场景下，我们希望这些应用（Pod1/Pod2）能够使用自定义的 &lt;code&gt;DNS Server&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-2-如何自定义-dns-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;2. 如何自定义 DNS&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;为了让用户更容易控制 Pod 中的 DNS 设置，Kubernetes v1.9 引入了一项新的 Alpha 特性（在 v1.10 中处于 Beta 阶段）。该特性在 v1.10 中被默认启用，在 v1.9 中如果想要启用此功能，集群管理员需要在 apiserver 和 kubelet 上启用 &lt;code&gt;CustomPodDNS&lt;/code&gt; 特性，例如：&lt;code&gt;“--feature-gates=CustomPodDNS=true,...”&lt;/code&gt;。启用了该特性之后，用户可以将 Pod 的 &lt;code&gt;dnsPolicy&lt;/code&gt; 字段设置为 &lt;code&gt;&amp;quot;None&amp;quot;&lt;/code&gt;，并且可以在 &lt;code&gt;Pod.Spec&lt;/code&gt; 中添加新的字段 &lt;code&gt;dnsConfig&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其中 &lt;code&gt;dnsConfig&lt;/code&gt; 用来自定义 DNS 参数，而 &lt;code&gt;dnsPolicy&lt;/code&gt; 用来给 Pod 选取预设的 DNS。接下来就看看可以通过哪些手段自定义 DNS。&lt;/p&gt;

&lt;h4 id=&#34;dnsconfig&#34;&gt;dnsConfig&lt;/h4&gt;

&lt;p&gt;dnsConfig 可以让操作者延伸到 Pod 内部关于 DNS 的配置，这边需要特别注意的是，我使用的字眼是 &lt;strong&gt;延伸&lt;/strong&gt; 而不是 &lt;strong&gt;配置&lt;/strong&gt;，这是因为通过下一节的 dnsPolicy，每个 Pod 都会有一组预设的 DNS 配置。通过 dnsConfig 我们可以继续往上叠加相关的 DNS 参数到 Pod 之中。&lt;/p&gt;

&lt;p&gt;目前总共支持三个参数，分别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nameservers&lt;/li&gt;
&lt;li&gt;searches&lt;/li&gt;
&lt;li&gt;options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三个参数对应的就是大家熟悉的 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 里面的三个参数，这里就不针对 DNS 进行详细解释了，不熟悉的朋友可以自行去 &lt;strong&gt;Google&lt;/strong&gt; 学一下这些参数的意思。&lt;/p&gt;

&lt;p&gt;在 Kubernetes 里面，这三个参数都包含在 dnsConfig 配置项中，而 dnsConfig 包含在 &lt;code&gt;PodSpec&lt;/code&gt; 配置项中，因为 Pod 内所有的容器都共享相同的 Network Namespace，所以网络方面的配置都会共享。&lt;/p&gt;

&lt;p&gt;这边提供一个简单的 yaml 示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-setting
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  restartPolicy: Always
  dnsConfig:
    nameservers:
      - 1.2.3.4
    searches:
      - ns1.svc.cluster.local
      - my.dns.search.suffix
    options:
      - name: ndots
        value: &amp;quot;2&amp;quot;
      - name: edns0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令可以观察到容器中 DNS 配置文件中会出现额外的配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-setting cat /etc/resolv.conf

nameserver 10.254.0.2
nameserver 1.2.3.4
search default.svc.cluster.local svc.cluster.local cluster.local ns1.svc.cluster.local my.dns.search.suffix
options ndots:2 edns0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到 nameserver 多了一个 1.2.3.4，而 search 则多了 &lt;code&gt;ns1.svc.cluster.local my.dns.search.suffix&lt;/code&gt; 这两个自定义的值，最后 options 则增加了我们示例中指定的 &lt;code&gt;ndots:2 edns0&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;dnsConfig 非常简单直观，如果你需要自定义 DNS 参数，就可以通过这个字段来指定。&lt;/p&gt;

&lt;h4 id=&#34;dnspolicy&#34;&gt;dnsPolicy&lt;/h4&gt;

&lt;p&gt;前面提过，&lt;code&gt;dnsConfig&lt;/code&gt; 提供的是延伸 Pod 内预设的 DNS 配置，而 &lt;code&gt;dnsPolicy&lt;/code&gt; 就是决定 Pod 内预设的 DNS 配置有哪些。&lt;/p&gt;

&lt;p&gt;目前总共有四个类型可以选择：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;li&gt;Default&lt;/li&gt;
&lt;li&gt;ClusterFirst&lt;/li&gt;
&lt;li&gt;ClusterFirstHostNet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来针对这四个类型分别介绍。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;None&lt;/p&gt;

&lt;p&gt;&lt;code&gt;None&lt;/code&gt; 表示会清除 Pod 预设的 DNS 配置，当 dnsPolicy 设置成这个值之后，Kubernetes 不会为 Pod 预先载入任何自身逻辑判断得到的 DNS 配置。因此若要将 dnsPolicy 的值设为 None，为了避免 Pod 里面没有配置任何 DNS，最好再添加 dnsConfig 来描述自定义的 DNS 参数。&lt;/p&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-none
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  restartPolicy: Always
  dnsPolicy: None
  dnsConfig:
    nameservers:
      - 1.2.3.4
    searches:
      - ns1.svc.cluster.local
      - my.dns.search.suffix
    options:
      - name: ndots
        value: &amp;quot;2&amp;quot;
      - name: edns0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令可以观察容器中的 DNS 配置文件，可以观察到跟之前的 &lt;code&gt;dnsConfig&lt;/code&gt; 的结果有一点差异，这里只有我们在 yaml 里配置的那些参数，而没有加入集群预设的 DNS 配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-none cat /etc/resolv.conf

nameserver 1.2.3.4
search ns1.svc.cluster.local my.dns.search.suffix
options ndots:2 edns0
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=&#34;blue&#34;&gt;Default&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Default&lt;/code&gt; 表示 Pod 里面的 DNS 配置继承了宿主机上的 DNS 配置。简单来说，就是该 Pod 的 DNS 配置会跟宿主机完全一致。&lt;/p&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-default
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  restartPolicy: Always
  dnsPolicy: Default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先，我们先观察 Node 上面的 DNS 配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/resolv.conf

# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 10.0.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以观察到，Node 上面的 DNS 配置得很简单，只有单纯的 &lt;code&gt;10.0.2.3&lt;/code&gt;。
接下来我们观察该 Pod 内的 DNS 配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-default cat /etc/resolv.conf

nameserver 10.0.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到这两个的 DNS 配置完全一致，该 Pod 内的 DNS 配置已经直接继承 Node 上面的配置了。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;ClusterFirst&lt;/p&gt;

&lt;p&gt;相对于上述的 Default，&lt;code&gt;ClusterFirst&lt;/code&gt; 是完全相反的操作，它会预先把 &lt;code&gt;kube-dns&lt;/code&gt;（或 CoreDNS）的信息当作预设参数写入到该 Pod 内的 DNS 配置。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;ClusterFirst 是预设的行为，若没有在 Pod 內特別描述 PodPolicy, 则会将 dnsPolicy 预设为 ClusterFirst。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-clusterfirst
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  restartPolicy: Always
  dnsPolicy: ClusterFirst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令观察容器中的 DNS 配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-clusterfirst cat /etc/resolv.conf

nameserver 10.254.0.2
search default.svc.cluster.local svc.cluster.local cluster.local
options ndots:5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到这里使用的是 k8s DNS 的设置。&lt;/p&gt;

&lt;p&gt;此外，ClusterFirst 还有一个冲突，如果你的 Pod 设置了 &lt;code&gt;HostNetwork=true&lt;/code&gt;，则 ClusterFirst 就会被强制转换成 &lt;code&gt;Default&lt;/code&gt;。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;HostNetwork&lt;/p&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-hostnetwork-policy-default
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  hostNetwork: true
  restartPolicy: Always
  dnsPolicy: ClusterFirst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令观察容器中的 DNS 配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-hostnetwork-policy-default cat /etc/resolv.conf

nameserver 10.0.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以观察到，Pod 里面的 DNS 配置直接继承了宿主机上的 DNS 配置。&lt;/p&gt;

&lt;p&gt;这边稍微来解释一下这个设计上的原理以及流程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;因为设置了 &lt;code&gt;HostNetwork=true&lt;/code&gt;, 会让该 Pod 与该节点共用相同的网路空间(网卡/路由等功能)。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;预设的 k8s DNS 是使用 &lt;code&gt;ClusterIP&lt;/code&gt; 的 kubernetes serivce. 这种情况下，只有属于 Cluster 內的 &lt;code&gt;Pod&lt;/code&gt; 可以获取该 ClusterIP。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;所以设置了 &lt;code&gt;HostNetwork=true&lt;/code&gt; 的 Pod 就没有办法获取该 ClusterIP。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;于是预设就会将对应的 DNS 配置改回 &lt;code&gt;Default&lt;/code&gt; 的形式，从节点继承其 DNS 配置信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这种情况下，就会有人想要问，如果我刻意想要这样设置不行吗？&lt;/p&gt;

&lt;p&gt;原先的设计中，是没有办法刻意处理的，原因是当 &lt;code&gt;Pod yaml&lt;/code&gt; 配置文件被发送出去后，在发现没有设定 &lt;code&gt;dnsPolicy&lt;/code&gt; 的情况下，会自动帮你把该 dnsPolicy 补上 &lt;code&gt;ClusterFirst&lt;/code&gt; 的数值。&lt;/p&gt;

&lt;p&gt;然后最后面的程序处理逻辑中，其实並没有办法分別下列两种情况：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HostNetwork：我希望走 Host DNS&lt;/li&gt;
&lt;li&gt;HostNetwork &amp;amp; dnsPolicy=ClusterFirst：我希望走 ClusterIP DNS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上述两种情况对于后端的程序来看都长得一样，完全没有办法分辨，我们可以直接从 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.11/pkg/kubelet/network/dns/dns.go#L258&#34; target=&#34;_blank&#34;&gt;Kubernetes 源码&lt;/a&gt; 来阅读一下其运作流程：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getPodDNSType(pod *v1.Pod) (podDNSType, error) {
	dnsPolicy := pod.Spec.DNSPolicy
	switch dnsPolicy {
	case v1.DNSNone:
		if utilfeature.DefaultFeatureGate.Enabled(features.CustomPodDNS) {
			return podDNSNone, nil
		}
		// This should not happen as kube-apiserver should have rejected
		// setting dnsPolicy to DNSNone when feature gate is disabled.
		return podDNSCluster, fmt.Errorf(fmt.Sprintf(&amp;quot;invalid DNSPolicy=%v: custom pod DNS is disabled&amp;quot;, dnsPolicy))
	case v1.DNSClusterFirstWithHostNet:
		return podDNSCluster, nil
	case v1.DNSClusterFirst:
		if !kubecontainer.IsHostNetworkPod(pod) {
			return podDNSCluster, nil
		}
		// Fallback to DNSDefault for pod on hostnetowrk.
		fallthrough
	case v1.DNSDefault:
		return podDNSHost, nil
	}
	// This should not happen as kube-apiserver should have rejected
	// invalid dnsPolicy.
	return podDNSCluster, fmt.Errorf(fmt.Sprintf(&amp;quot;invalid DNSPolicy=%v&amp;quot;, dnsPolicy))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这边可以看到一旦是 &lt;code&gt;DNSClusterFirst&lt;/code&gt; 的情况下，若设置了 HostNetwork, 最后就会直节回传 &lt;code&gt;podDNSHost&lt;/code&gt; 节点的 DNS 设定回去。&lt;/p&gt;

&lt;p&gt;为了解决上述的问题，所以引进了一个新的类型 &lt;code&gt;ClusterFirstHostNet&lt;/code&gt;。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;ClusterFirstWithHostNet&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ClusterFirstWithHostNet&lt;/code&gt; 用途非常简单，我希望满足使用 HostNetwork 同时使用 &lt;code&gt;k8s DNS&lt;/code&gt; 作为我 Pod 预设 DNS 的配置。&lt;/p&gt;

&lt;p&gt;根据上面的源码也可以观察到：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;case v1.DNSClusterFirstWithHostNet:
	return podDNSCluster, nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要將 dnsPolicy 设置为 &lt;code&gt;ClusterFirstWithHostNet&lt;/code&gt;, 就会一律返回 k8s DNS 的 &lt;code&gt;clusterIP&lt;/code&gt; 这种形式。&lt;/p&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-hostnetwork-policy
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  hostNetwork: true
  restartPolicy: Always
  dnsPolicy: ClusterFirstWithHostNet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令观察该 Pod 的状态：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ kubectl exec ubuntu-hostnetwork-policy cat /etc/resolv.conf

nameserver 10.254.0.2
search default.svc.cluster.local svc.cluster.local cluster.local
options ndots:5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以发现这时候的 DNS 就会配置成 k8s DNS 的 &lt;code&gt;ClusterIP&lt;/code&gt; 了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;扫一扫关注微信公众号&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>干货与湿货分享第6期</title>
      <link>https://www.yangcs.net/posts/weekly-6/</link>
      <pubDate>Sat, 25 Aug 2018 14:33:39 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/weekly-6/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;这是《干货与湿货分享》系列的第六期，主要记录过去一周我所见到的听到的值得分享的东西。&lt;/p&gt;

&lt;p&gt;科技让生活更美好，似乎是一句不可否认的口号，但在网络审查日益严格，科技公司的灰色产业被披露的浪潮下，我们开始明白互联网不再是连接每一个人的乌托邦。&lt;/p&gt;

&lt;p&gt;为了维护社交媒体平台的健康和吸引力，让广告金主和用户对自己平台不抛弃不放弃。YouTube、Google 和 Facebook 等科技巨头都会建立双重审核制度，一是通过人工智能和算法进行首层审核，接着是通过建立在东南亚的外包公司来进行人工过滤。据不完全统计，各大科技公司在菲律宾的外包内容审查员人数超过了 100000 人，Facebook 在全球的外包雇佣工人达到 20000 名。作为一项庞大的劳动密集型产业，大多数人受到保密协定的约束，&lt;strong&gt;他们的工作直面互联网的黑暗角落：过滤暴力、色情、仇恨内容，他们被成为“电子清道夫”。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在算法和人工智能过滤的背后，科技公司在发展中国家成立外包公司，通过网络招募大量通晓英文的低薪员工。这个隐秘的行业被光鲜亮丽的科技公司藏匿在数字浪潮的海底，像海洋清洁工般清扫内容的垃圾。他们每天需要处理 25000 张图片或视频，然后根据删除原因，比如恐怖主义，自我伤害等十个选项来贴标签归类。&lt;/p&gt;

&lt;p&gt;不平等的现象发生在权利和资本渗透的每一个角落，电视机、互联网、手机的出现是否真的让我们的世界更加美好，还是令社会的分化更加严重？互联网不会回答我们，科技也不会回答我们。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们无法抵抗时代的进步，但又不知晓该如何拥抱这个高速变换的时代，网络审查员背后的血泪史，折射着当代的残酷现实：信息技术无法消除贫穷和不公，而网络劳工的生存、社会体制的弊端，早已淹没在了缤纷繁杂的娱乐社交之中。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-新闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;新闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-脑纹将成为新的指纹-https-www-earth-com-news-brainprints-new-fingerprints&#34;&gt;1. &lt;a href=&#34;https://www.earth.com/news/brainprints-new-fingerprints/&#34; target=&#34;_blank&#34;&gt;脑纹将成为新的指纹&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Could-brainprints-become-the-new-fingerprints.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在过去很长一段时间内，我们一直使用面部识别、语音识别和指纹识别技术来辨别一个人的身份，但是识别率并不能达到百分之百，很快就会有一种新的万无一失的方法来识别身份，它与大脑中称为&lt;strong&gt;连接组（connectome）&lt;/strong&gt;的区域之间的物理联系有关。&lt;/p&gt;

&lt;p&gt;由于每个人的连接组都是独一无二的，因此使用连接组之间的映射关系创建的脑纹可以精确识别人的身份，甚至可以区分双胞胎。&lt;/p&gt;

&lt;h4 id=&#34;2-城市上空惊现疑似天国的幻象-http-strangesounds-org-2018-08-mysterious-glimpse-of-the-kingdom-of-heaven-appears-in-the-sky-over-china-html&#34;&gt;2. &lt;a href=&#34;http://strangesounds.org/2018/08/mysterious-glimpse-of-the-kingdom-of-heaven-appears-in-the-sky-over-china.html&#34; target=&#34;_blank&#34;&gt;城市上空惊现疑似天国的幻象&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/fata-morgana-china-august-2018.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;近年来，世界各地的人们都在空中看到很多惊奇的现象，有时候是&lt;strong&gt;鬼城&lt;/strong&gt;，有时候是&lt;strong&gt;天使&lt;/strong&gt;&amp;hellip;很多目击者对此感到很困惑，甚至会感到恐惧，那么天空中这些奇怪的现象到底是什么呢？&lt;/p&gt;

&lt;p&gt;据科学家说，这些看似漂浮在浓雾中的的城市是海市蜃楼，或者是一种自然发生的光学现象，是由光线弯曲产生的远处物体或者天空的位移图像。当然，还有一些科学家持不同观点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这有可能是另一个平行宇宙中的现实&lt;/li&gt;
&lt;li&gt;还有可能是通往地球上空的另一个维度世界的大门&lt;/li&gt;
&lt;li&gt;也有可能是在瑞士日内瓦的欧洲核子研究中心试图寻找甚至创造微型黑洞的神秘实验&lt;/li&gt;
&lt;li&gt;其他人认为这些都是通过计算机创造的虚假的图片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了海市蜃楼之外，很多地方还出现了&lt;strong&gt;“上帝之眼”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/fata-morgana-china-august-2018-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-人类活动使得多种野生动物患上癌症-http-jandan-net-2018-08-18-cancer-causing-html&#34;&gt;3. &lt;a href=&#34;http://jandan.net/2018/08/18/cancer-causing.html&#34; target=&#34;_blank&#34;&gt;人类活动使得多种野生动物患上癌症&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/d7b776ec2cc7d6659379fc9d309d51b1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;对全球和美国而言，癌症是第二大死亡原因，仅位居心脏病之下，目前其发病率在全球范围内不断增加。癌症的激增主要归因于我们的生活方式，例如饮食不健康，吸烟，喝酒，以及接触污染物。环境污染物与肿瘤发展之间的关联已经通过对人类和动物进行的大量研究得到了很好的证实。&lt;/p&gt;

&lt;p&gt;但人类并不是唯一暴露在我们自己排放的污染物的中物种，我们大大低估了人类活动导致的野生动物癌症，一项研究发现，生活在高度污染的地区的白鲸中，27％患有癌症。&lt;/p&gt;

&lt;h4 id=&#34;4-科学家逆转了单个细胞的衰老-http-jandan-net-2018-08-21-human-cells-2-html&#34;&gt;4. &lt;a href=&#34;http://jandan.net/2018/08/21/human-cells-2.html&#34; target=&#34;_blank&#34;&gt;科学家逆转了单个细胞的衰老&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;每个人都明白逆转衰老的过程意味着什么。在现实中实现这样的技术，还有很长的路要走，但在最新的实验中，我们已经可以使单个的人类细胞返老还童；这可能成为未来研发“不老药”的基础。&lt;/p&gt;

&lt;h4 id=&#34;5-日本要借助-ai-和机器人来提升英语教育效果-https-cn-engadget-com-2018-08-21-japan-ai-robots-english-skills-schools&#34;&gt;5. &lt;a href=&#34;https://cn.engadget.com/2018/08/21/japan-ai-robots-english-skills-schools/&#34; target=&#34;_blank&#34;&gt;日本要借助 AI 和机器人来提升英语教育效果&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://s.aolcdn.com/hss/storage/midas/88e1fac2e73376dc3b0963c34fe29224/206607723/dims.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;负责日本国内教育事务的文部科学省宣布，将会在明年开始进行一项利用 AI 和机器人来提升英语教育效果的试验。据 NHK 的报道，这预计耗资 2.5 亿日元的计划，将会在明年于 500 家学校设置搭载了 AI 的英语会话机器人，目的是让小朋友能通过以英语与机器人对话，提升会话和书写能力，部分学校更会纳入教学课程之中。&lt;/p&gt;

&lt;h4 id=&#34;6-google-的资料中心已经交由-ai-操作冷却系统-https-cn-engadget-com-2018-08-18-google-deepmind-ai-run-data-center-cooling-systems&#34;&gt;6. &lt;a href=&#34;https://cn.engadget.com/2018/08/18/google-deepmind-ai-run-data-center-cooling-systems/&#34; target=&#34;_blank&#34;&gt;Google 的资料中心已经交由 AI 操作冷却系统&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://s.aolcdn.com/hss/storage/midas/8ee26ed91aefce02c38c344b78d8b1d0/206603622/GOOGLE_CBF_009.width-800.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Google 的数据中心说是世上最先进的之一也不为过，但先进的不仅是在服务器里跑的东西，甚至还包括了数据中心本身。Google 从两年多前就开始套用 AI 到数据中心的日常管理中，协助系统管理人员维持环境温度，而现在 Google 更是将整个温控的决定都交到了 AI 手上，管理人员只负监管的责任，而不介入操作，因为 AI 可以从人类想不到的地方找出节约能源的办法。&lt;/p&gt;

&lt;h4 id=&#34;7-nasa-确认了月球两极有水冰的存在-https-cn-engadget-com-2018-08-22-nasa-confirms-ice-moon-poles&#34;&gt;7. &lt;a href=&#34;https://cn.engadget.com/2018/08/22/nasa-confirms-ice-moon-poles/&#34; target=&#34;_blank&#34;&gt;NASA 确认了月球两极有水冰的存在&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://s.aolcdn.com/hss/storage/midas/6717a580a90157321777f2bf366a7925/206610165/elphic_south_north_lunar_pole_ice.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;过去，人们一直认为月球是一个干燥无水的星球。直到 ２００９ 年 １０ 月，美国航天局的两个航天器相继撞击月球南极附近的凯布斯坑后，才得出月球表面存在水的结论。现在，依靠印度太空署的 Chandrayaan-1 卫星上搭载的 NASA M3 仪器所收集回来的资料，科学家终于可以肯定的说月球上真的有水冰的存在了。&lt;/p&gt;

&lt;p&gt;水除了是生物生存所必需的之外，也是生产火箭燃料的重要原料。如果所有的水都要从地球或是彗星上运往月球的话，将会大幅度地限制月球基地的发展与规模。现在如果月球基地能直接从表面取得水资源，对于月球基地的开发进展可是非常有帮助的呢。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-工具-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;工具&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-不容错过的-github-插件和工具-https-www-52pojie-cn-thread-784785-1-1-html&#34;&gt;1. &lt;a href=&#34;https://www.52pojie.cn/thread-784785-1-1.html&#34; target=&#34;_blank&#34;&gt;不容错过的 GitHub 插件和工具&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;以代码托管平台起家的 GitHub 网站，已然成为全球程序员工作和生活中不可或缺的一份子。从优秀的企业，到优秀的程序员，都将自己最优秀的代码作品存放在这片开源净土里，供彼此学习交流。GitHub Trending 栏目甚至已经成为 IT 从业人员的新闻日报，每日必读。既然 GitHub 这么重要，又被我们使用得这么频繁，那关于 GitHub 的一些优秀浏览器插件或者其他工具，我们就一定不可错过啦。本文就就是作者整理的一些平常使用最得心应手的东西，全都倾力推荐出来，绝对干货！&lt;/p&gt;

&lt;h4 id=&#34;2-picgo-https-molunerfinn-com-picgo&#34;&gt;2. &lt;a href=&#34;https://molunerfinn.com/PicGo/&#34; target=&#34;_blank&#34;&gt;PicGo&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://pix.waerfa.com/0rzkw.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;PicGo 是一款开源免费的图片上传兼任相册管理软件，支持将图片上传到微博，七牛，腾讯云，又拍云，GitHub，SM.MS 这几大常见的存储平台或图床服务空间中。软件底层基于 electron-vue 开发，对于 macOS 系统版本的更迭没有原生开发软件那样特别敏感，兼容性很好。&lt;/p&gt;

&lt;h4 id=&#34;3-wechatplugin-macos-https-github-com-tkkk-ioser-wechatplugin-macos&#34;&gt;3. &lt;a href=&#34;https://github.com/TKkk-iOSer/WeChatPlugin-MacOS&#34; target=&#34;_blank&#34;&gt;WeChatPlugin-MacOS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;WeChatPlugin 是一款可玩性很高的 macOS 版开源的微信小助手，安装后可以实现「消息防撤回」、「自动回复」、「远程控制 macOS」、「开启多窗口登录」功能。&lt;/p&gt;

&lt;h4 id=&#34;4-flow-for-mac-https-www-waitsun-com-flow-1-0-html&#34;&gt;4. &lt;a href=&#34;https://www.waitsun.com/flow-1-0.html&#34; target=&#34;_blank&#34;&gt;Flow for Mac&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://wx2.sinaimg.cn/large/5386e171gy1fueshfjwksj20qw0g279z.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在娱乐横行，内容产业丛生的当代，很多人都发现每天的时间都过的特别快，往往还不知道自己做了什么，一天的工作或者学习就已经结束了。Flow Mac版 是 MacOS 上的一款时长统计软件，可以统计你一天在哪些地方花费的时间最多。Flow Mac 版提供了轻便易用的自动时间统计功能，可以帮助你更加了解自己的 Mac 电脑使用情况。&lt;/p&gt;

&lt;h4 id=&#34;5-bash-snippets-http-blog-jobbole-com-114303&#34;&gt;5. &lt;a href=&#34;http://blog.jobbole.com/114303/&#34; target=&#34;_blank&#34;&gt;Bash-Snippets&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一组适用于命令行重度用户的实用 BASH 脚本，这些脚本被称为 Bash-Snippets，它们对于那些整天都与终端打交道的人来说可能会很有帮助。想要查看你居住地的天气情况？它为你做了。想知道股票价格？你可以运行显示股票当前详细信息的脚本。觉得无聊？你可以看一些 YouTube 视频。这些全部在命令行中完成，你无需安装任何严重消耗内存的 GUI 应用程序。&lt;/p&gt;

&lt;h4 id=&#34;6-kcs-https-blog-scottlowe-org-2018-08-21-a-simple-kubernetes-context-switcher&#34;&gt;6. &lt;a href=&#34;https://blog.scottlowe.org/2018/08/21/a-simple-kubernetes-context-switcher/&#34; target=&#34;_blank&#34;&gt;kcs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个非常简单实用的 Kubernetes 上下文切换工具。&lt;/p&gt;

&lt;h4 id=&#34;7-picular-https-picular-co&#34;&gt;7. &lt;a href=&#34;https://picular.co/&#34; target=&#34;_blank&#34;&gt;Picular&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;没错，这是一款色彩、颜色搜索引擎，通过不同的关键词，来寻找颜色。Picular 和搜索引擎不同之处在于，它会直接提取「图片搜索」中，图片的颜色，然后以纯色显示出来，支持中文。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-教程-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;教程&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-gitlab-team-handbook-https-about-gitlab-com-handbook&#34;&gt;1. &lt;a href=&#34;https://about.gitlab.com/handbook/&#34; target=&#34;_blank&#34;&gt;Gitlab Team Handbook&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gitlab 团队手册是 Gitlab 公司内部的运营方面的核心价值，全书超过 1000 页，现在向全世界开放。&lt;/p&gt;

&lt;h4 id=&#34;2-how-to-write-your-own-cni-plug-in-with-bash-https-www-altoros-com-blog-kubernetes-networking-writing-your-own-simple-cni-plug-in-with-bash&#34;&gt;2. &lt;a href=&#34;https://www.altoros.com/blog/kubernetes-networking-writing-your-own-simple-cni-plug-in-with-bash/&#34; target=&#34;_blank&#34;&gt;How to Write Your Own CNI Plug-in with Bash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;手把手教你如何使用 Bash 为 Kubernetes 编写自己的 CNI 插件。&lt;/p&gt;

&lt;h4 id=&#34;3-https-安全最佳实践-https-advancedweb-hu-2018-08-21-https-security&#34;&gt;3. &lt;a href=&#34;https://advancedweb.hu/2018/08/21/https_security/&#34; target=&#34;_blank&#34;&gt;HTTPS 安全最佳实践&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;随着浏览器和搜索引擎越来越歧视非加密网站，使用 HTTPS 来保护网站已经变得至关重要，这篇文章会告诉你使用 HTTPS 时需要注意的问题以及一些小诀窍。&lt;/p&gt;

&lt;h4 id=&#34;4-共享库-理解动态加载-https-amir-rachum-com-blog-2016-09-17-shared-libraries&#34;&gt;4. &lt;a href=&#34;https://amir.rachum.com/blog/2016/09/17/shared-libraries/&#34; target=&#34;_blank&#34;&gt;共享库：理解动态加载&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在这篇文章中，作者将尝试解释在 Linux 系统中如何动态加载共享库的内部工作原理。&lt;/p&gt;

&lt;h4 id=&#34;5-promql-for-humans-https-timber-io-blog-promql-for-humans&#34;&gt;5. &lt;a href=&#34;https://timber.io/blog/promql-for-humans/&#34; target=&#34;_blank&#34;&gt;PromQL For Humans&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/PromQL+Cheatsheet.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;PromQL 是为 Prometheus 制作的内置查询语言，这是 Timber 公司制作的 PromQL 基础入门教程。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-资源-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;资源&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-fembed-https-www-fembed-com&#34;&gt;1. &lt;a href=&#34;https://www.fembed.com/&#34; target=&#34;_blank&#34;&gt;Fembed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://wx3.sinaimg.cn/mw690/0060lm7Tly1ful45nq26qj30ri0plgns.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;自从 QQ 旋风接口被关闭之后，国内离线下载工具基本全部失效，115 网盘也是一蹶不振，这里推荐一款国外的离线下载工具——Fembed。Fembed 是一个国外的“离线下载引擎”网站，其实在国外这类的站点有很多，不过大多数都比较失败，而 Fembed 是同类中的佼佼者，和国内的 115 网盘也不遑多让。&lt;/p&gt;

&lt;p&gt;首先，Fembed 完全免费，无限空间，而且不限制离线下载次数。&lt;/p&gt;

&lt;p&gt;其次，Fembed 支持 种子 磁力 http ftp YouTube 网盘等等渠道链接的离线下载，而一般来说 http ftp YouTube 网盘等固定服务器渠道会更快。&lt;/p&gt;

&lt;p&gt;再次，Fembed 离线下载后的资源，都会保存在自己账号网盘里面，可以在线高速观看，经过测试，在线观看速度流畅，而且下载用 IDM 可以达到满速下载。&lt;/p&gt;

&lt;p&gt;最后，Fembed 是调用的 Aria2 通过自身超级强悍的企业级服务带宽进行离线下载的，Aria2 对于老司机来说，这里就不多说了。&lt;/p&gt;

&lt;h4 id=&#34;2-rapidvideo-https-www-rapidvideo-com&#34;&gt;2. &lt;a href=&#34;https://www.rapidvideo.com/&#34; target=&#34;_blank&#34;&gt;Rapidvideo&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个国外视频网站，可以上传高清视频，用户观看时可自由切换480P、720P、1080P。上传视频后，每有一个用户观看，上传者可以赚钱。&lt;/p&gt;

&lt;h4 id=&#34;3-悦看书屋-https-www-yuekanshuwu-com&#34;&gt;3. &lt;a href=&#34;https://www.yuekanshuwu.com/&#34; target=&#34;_blank&#34;&gt;悦看书屋&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;免费的 kindle 书籍推送服务站点。推送方法：注册登录，然后配置自己的邮箱，选择书籍即可推送至自己的 Kindle 设备。&lt;/p&gt;

&lt;h4 id=&#34;4-resume-maker-online-http-resumemaker-online&#34;&gt;4. &lt;a href=&#34;http://resumemaker.online/&#34; target=&#34;_blank&#34;&gt;Resume Maker Online&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://cdn.ilovefreesoftware.com/wp-content/uploads/2018/08/Free-WYSIWYG-Resume-builder-to-design-Resume-Online-Download-PDF.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是一份在线简历制作网站，用于在线设计简历并以高质量 PDF 的形式下载。&lt;/p&gt;

&lt;h4 id=&#34;5-知名互联网企业内推-https-github-com-bestdingsheng-resources&#34;&gt;5. &lt;a href=&#34;https://github.com/BestDingSheng/resources&#34; target=&#34;_blank&#34;&gt;知名互联网企业内推&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一份知名互联网企业内推资料整理 持续更新ing 。作者目前维护了4个互联网内推求职招聘的群,现成员接近2000人。&lt;/p&gt;

&lt;p&gt;有些朋友技术很好，但是学历和背景不是很好，有时候投些大公司，简历直接被HR刷掉了，作者创建这个群也是为了帮助那些想进大厂的朋友搭建一个平台，通过企业内部推荐能够更大几率的获得面试机会~&lt;/p&gt;

&lt;h4 id=&#34;6-chinese-xinhua-https-github-com-pwxcoo-chinese-xinhua&#34;&gt;6. &lt;a href=&#34;https://github.com/pwxcoo/chinese-xinhua&#34; target=&#34;_blank&#34;&gt;chinese-xinhua&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;中华新华字典数据库和 API 。收录包括 14032 条歇后语，16142 个汉字，264434 个词语，31648 个成语。&lt;/p&gt;

&lt;h4 id=&#34;7-斯坦福-cs229-机器学习备忘录-https-github-com-afshinea-stanford-cs-229-machine-learning&#34;&gt;7. &lt;a href=&#34;https://github.com/afshinea/stanford-cs-229-machine-learning&#34; target=&#34;_blank&#34;&gt;斯坦福 CS229 机器学习备忘录&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Jietu20180825-133445.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在 Github 上，afshinea 贡献了一个备忘录对经典的斯坦福 CS229 课程进行了总结，内容包括监督学习、无监督学习，以及进修所用的概率与统计、线性代数与微积分等知识。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-重大变更和发布-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;重大变更和发布&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.openshift.com/okd310release/?sc_cid=701f2000000ZzcUAAS&#34; target=&#34;_blank&#34;&gt;Openshift Origin 从 3.10 版本开始正式更名为 OKD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xposed.appkg.com/2877.html&#34; target=&#34;_blank&#34;&gt;Google One 正式开放订阅，不过目前仅限美国地区&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.ifanr.com/app/1086799&#34; target=&#34;_blank&#34;&gt;印象笔记迎来史上最重磅更新，新增 Markdown 笔记功能，并且支持非常丰富的 Markdown 语法。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/aquasecurity/kube-hunter&#34; target=&#34;_blank&#34;&gt;Aqua 推出 Kube-hunber，该工具可以用来探测企业用户 Kubernetes 环境内潜在的存取弱点。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://apporbit.com/appporter/&#34; target=&#34;_blank&#34;&gt;AppOrbit 和 Google 合作推出 AppPorter 2.0。AppPorter 2.0 是自动现代化平台，它将遗留应用程序转换并打包到基于 Kubernetes 的混合云中，为企业客户提供现代化云迁移服务。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;p-id-h2-奇闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;奇闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-让达芬奇困惑不已的水跃现象&#34;&gt;1. 让达芬奇困惑不已的水跃现象&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/d49046927bb65b5c66c1f6084359f18e.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;15世纪，莱昂纳多·达芬奇想静静的时候，常常在户外找一处溪流，看着下游的漩涡陷入沉思之中。&lt;/p&gt;

&lt;p&gt;文艺复兴时期的大师为这一种现象惊讶不已，后世无数科学家也困惑不解。半个世纪之后，我们仍在为这个叫做水跃的东西挠头。现在，剑桥大学的物理学家可能最终解决了这个问题。&lt;/p&gt;

&lt;p&gt;吓人的术语——水跃，描述的却是异常熟悉的现象，以至于我们完全没有意识到它的不同寻常。只要打开水龙头，观察水槽的底部，就能发现以水流冲击的位置为圆心，有一圈的区域似乎只有薄薄的一层水，就好像下方的水都被落下来的激流冲走。同时在这一圈的边缘处，液面明显变高——这就是水跃的含义——但是它们没法涌过去，填满中央的凹陷。类似的现象也可以在堰、瀑布和潮汐洞穴的底部被观察到。500年前，达芬奇将它记录到笔记中，不过主要是出于哲学上的思考，他认为这是水元素的本质体现，因此也没有做更多的解释。&lt;/p&gt;

&lt;p&gt;在1914年，一位名叫John William的物理学家在一篇关于钻孔和液体冲击波的论文中提出了一个猜想，他的理论考虑了粘度、动能和势能等因素。另一方面，表面张力“无疑是相当重要的一部分，但是在这里可以通过增加流量来使其影响最小化”。瑞利勋爵以后的研究人员也将表面张力视为微不足道的影响因素，得到的模型可以使用已知的参数，如粘度、惯性和重力的组合来描述冲击而下的液体的形成的圈半径与圈边缘高度之间的联系。当水沿着表面流动时，摩擦力克服其惯性并使流体减速。如果水流像是瀑布那样冲刷而下，则会产生冲击波，液体在短距离外堆积成高出中心位置的水墙。边缘处水墙的高度取决于冲击水量的大小所能平衡的势能。&lt;/p&gt;

&lt;p&gt;在一项新的研究中，化学工程研究员 Rajesh Bhagat 认为，以前的科学家为了方便将表面张力剔除在模型之外，有点急功近利了，其实水在边缘处升高时，表面张力和粘性力平衡了液膜中的动量，重力没有起到重要作用，而表面张力才是关键。达芬奇如果知道了最新的进展，应该会为更加接近水的本质而感到高兴吧。&lt;/p&gt;

&lt;h4 id=&#34;2-如何把一根生面条恰好掰成两段&#34;&gt;2. 如何把一根生面条恰好掰成两段&lt;/h4&gt;

&lt;p&gt;你饿不饿?我煮个面给你吃，顺便给你介绍一下细长脆性材质的断裂动力学机制。&lt;/p&gt;

&lt;p&gt;甭管是生的意大利面还是东北大挂面，你抽出一根，两手分别捏住两端将其掰断。你会发现，干面条在断裂的时候，总是会碎裂成好几部分，而不会干净利索地断成两截。&lt;/p&gt;

&lt;p&gt;麻省理工学院的数学家们对这一现象深深着迷，这倒不是他们闲的五脊六兽，实际上最早在严肃的公开场合讨论这一问题的科学家正是大名鼎鼎的诺贝尔物理学奖得主理查德·费曼。他思索良久，却苦苦不得要领，最后甚至没有活着看到答案，直到2005年——他去世后17年才有物理学家给出了令人信服的解释，捎带一提，他们的研究为他们赢得了2006年诺贝尔物理学奖——搞笑版。&lt;/p&gt;

&lt;p&gt;发表在《物理评论快报》上的两篇论文中，法国科学家们发现，在一根意大利面条的两端均匀施加力时，它会弯曲直到某个临界点。断裂的瞬间，两段半截的面条从弯曲状态快速反弹伸直，而出于惯性，它们会再次向反方向弯曲，形成波浪式的震动，结果就是手中的两段再次发生断裂。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/41f85b142b11f8891c4387554284419c.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;简明扼要，嗯？但麻省理工学院的研究人员现在提出了另外一个问题：&lt;strong&gt;是否有办法把一根意大利面条恰好掰成两段？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为此，他们专门制造了一台掰面条机，一番折腾下来，还真有所发现：如果你将意大利面条扭到一定程度，然后慢慢弯曲，它就会分成整齐的两截。这是为什么呢？研究人员发现，将意大利面扭转 270 度，然后以 3 毫米/秒的速度将两端弯曲在一起，可以使意大利面条分成两半。他们甚至尝试了两种不同厚度的意大利面条，都得到了相同的结果。这是因为扭曲减轻了反弹效应和回复的震动波，因为它削弱了初始反冲的强度。断裂的意大利面条以螺旋状的方式释放了弹性势能。因为扭曲波动比弯曲波动传播得更快，从而防止应力在意大利面条的结构中累积。&lt;/p&gt;

&lt;h4 id=&#34;3-git-的诞生&#34;&gt;3. Git 的诞生&lt;/h4&gt;

&lt;p&gt;很多人都知道，Linus 在 1991 年创建了开源的 Linux，从此，Linux 系统不断发展，已经成为最大的服务器系统软件了。Linus 虽然创建了 Linux，但 Linux 的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为 Linux 编写代码，那Linux的代码是如何管理的呢？事实是，在 2002 年以前，世界各地的志愿者把源代码文件通过 diff 的方式发给 Linus，然后由 Linus 本人通过手工方式合并代码！&lt;/p&gt;

&lt;p&gt;你也许会想，为什么 Linus 不把 Linux 代码放到版本控制系统里呢？不是有 CVS、SVN 这些免费的版本控制系统吗？因为 Linus 坚定地反对 CVS 和 SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比 CVS、SVN 好用，但那是付费的，和 Linux 的开源精神不符。&lt;/p&gt;

&lt;p&gt;不过，到了 2002 年，Linux 系统已经发展了十年了，代码库之大让 Linus 很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是 Linus 选择了一个商业的版本控制系统 BitKeeper，BitKeeper 的东家 BitMover 公司出于人道主义精神，授权 Linux 社区免费使用这个版本控制系统。安定团结的大好局面在 2005 年就被打破了，原因是 Linux 社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发 Samba 的 Andrew 试图破解 BitKeeper 的协议（这么干的其实也不只他一个），被 BitMover 公司发现了（监控工作做得不错！），于是 BitMover 公司怒了，要收回 Linux 社区的免费使用权。&lt;/p&gt;

&lt;p&gt;Linus 可以向 BitMover 公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：&lt;/p&gt;

&lt;p&gt;Linus 花了两周时间自己用C写了一个分布式版本控制系统，这就是 Git！一个月之内，Linux 系统的源码已经由 Git 管理了！&lt;strong&gt;牛是怎么定义的呢？大家可以体会一下。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git 迅速成为最流行的分布式版本控制系统，尤其是 2008 年，GitHub 网站上线了，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub，包括 jQuery，PHP，Ruby 等等。历史就是这么偶然，如果不是当年 BitMover 公司威胁 Linux 社区，可能现在我们就没有免费而超级好用的 Git 了。&lt;/p&gt;

&lt;h4 id=&#34;4-台湾岛命名的由来&#34;&gt;4. 台湾岛命名的由来&lt;/h4&gt;

&lt;p&gt;1590 年（明万历年间），几艘葡萄牙的远航船绕过了马六甲海峡，进入开阔的洋面，他们在海上孤独地航行着，突然，眼前出现了一个郁郁葱葱的大岛，远远望去，阳光普照，草木丰盛，葡萄牙人嘴中迸出了赞美词：“Ilha Formosa”（英译 “福尔摩沙”，意为 “美丽岛”）。当年的美丽岛，就是今天的台湾。&lt;/p&gt;

&lt;p&gt;荷兰人从 1624 年 8 月 26 日登陆台南安平地方开始占据台湾，当时汉人称此地为 &lt;strong&gt;“大员”&lt;/strong&gt;，是当地高山族部落名译音，记住这是用洛河语发音，而非北京话。荷兰人据台期间(1624~1662年)在大员广场上绞刑台旁，设立一公称处，它是专门针对长度、重量、土地丈量引起问题的仲裁机构，十分权威。&lt;/p&gt;

&lt;p&gt;荷兰人在大员的公称处成为度量衡的权威，以此为交易的准绳，称为&lt;strong&gt;大员尺、大员斤&lt;/strong&gt;。在中国沿海的商人对外交易若以大员尺斤为计算标准，可免去不少的麻烦，尤其是与外地人交易时比较有公正性，大家也乐于使用。久而久之「大员」的含义已从局部指今日「台南地区」扩张到泛指使用大员尺、大员斤的荷兰佔领地区，如台南、凤山、沪尾、鸡笼。&lt;/p&gt;

&lt;p&gt;荷兰人败退离台之前，大员尺、大员斤除了在全台南北各地使用外，更渐渐扩大到中国沿海的外贸商界，所以中国沿海的人对使用大员尺的人很单纯的统称为「大员人」，同时对在海峡对岸的这岛屿称为「大员」岛。大员是以河洛话(闽南语)发音，若以今日的北京话就是「台湾」。这就是台湾名称的由来。&lt;/p&gt;

&lt;h4 id=&#34;5-柏拉图-地穴寓言&#34;&gt;5. 柏拉图：地穴寓言&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Allegory_of_the_Cave_blank.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;苏格拉底描述了一个地下洞穴住所，洞里有一条宽阔的通道通向地面。这个山洞里居住着终生被关押在那里的囚犯。他们被捆绑着大腿和脖子坐在那里，以致他们只能朝前看到洞穴的墙壁，而不能转身回头顾望。因此，他们永远看不到背后的出口，也根本不知道有这么一个出口。他们也不能看到自己和其他囚犯。他们唯一能看到的是他们面对的墙壁。他们的住所被身后远方高处燃烧的火炬照亮。囚犯只能看见这唯一的亮光，照亮着墙壁。但是看不见光源。在墙上他们只能看见光影。&lt;/p&gt;

&lt;p&gt;监狱内部同火炬之间，有一堵不会遮挡光线的矮墙。沿着这堵墙壁，有人来回穿梭，搬运着不同的物品，包括一些用石头和木头做的人体和其他生物模型。这些物体高出那堵矮墙，但是他们的搬运者比墙低。其中的一些搬运者相互交谈着，另一些则保持沉默。&lt;/p&gt;

&lt;p&gt;由于囚犯面对洞穴墙壁，那些来回移动的物体，在墙上投射的阴影，被穴居人看见当作会移动的影子。但他们想到有人在搬运这些东西。当有人说话时，洞壁上的回声，就如同那些影子自己在讲话一样。因此，囚犯以为那些影子会说话。他们把这些影像当作生物，把所有发生的事情理解为这些生物的行为。墙上演绎的事情，对他们来说都是真相，当然是真实的。他们从这些影子中研发出一整套学问，试图从它们的出场和动作中，找出一系列规律，并且预告将要发生地事情。那些预测最准确的人，还会得到嘉奖。&lt;/p&gt;

&lt;p&gt;接着，苏格拉底问 Glaukon（苏格拉底的谈话对象），如果给一名囚犯松绑，让他站起来，转身向出口望去，看见这些以往所见的影子的原型，能否想象这时会发生什么？这个人可能会在强光刺激下痛苦不堪，产生错乱。相比于过去熟悉的光影，他可能会认为届时所看到的东西不是现实的。因此，他可能希望重新返回自己习惯的位置。因为他相信只有在洞壁上能看见真相。而不去会相信一个善意解放者的相反说教。&lt;/p&gt;

&lt;p&gt;如果使用武力将松绑的囚徒从洞穴中拖出来，穿过对他来说陡峭难行的通道，来到地面，他也许会觉得特别别扭，愈发神志错乱。因为璀璨的阳光会使他睁不开眼，开始时什么都看不见。慢慢地他也许会适应看见的新鲜事物。其过程也许是首先识别光影，然后是水中的倒影，最终才是人和事物本身。如果往上看，他也许会先习惯夜晚的星空，然后才是白天的日光，最后他也许才敢于直接目视太阳，从而感受太阳的独特之处。只有这时他才能理解，太阳造就了光影。有了这些经历和认识，他应该不再愿意回到洞穴，去探究那里的光影学问，获取其它囚徒的赞誉。&lt;/p&gt;

&lt;p&gt;如果他还是回到故地，那么他肯定需要重新慢慢地适应洞穴里的黑暗。由此他肯定会在一段时间内，落后其它囚徒对后续光影估算能力。而洞里其它的囚徒则会认为，他在上面把眼睛弄坏了。他们会嘲笑他，觉得离开洞穴显然是宗蚀本生意，根本不值得一试。如果有人试图解放他们，把他们带到地上，他们会杀了他，如果可能的话。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-欢迎关注-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;欢迎关注&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;该系列每周六发布，同步更新在我的&lt;a href=&#34;https://www.yangcs.net/&#34; target=&#34;_blank&#34;&gt;个人博客&lt;/a&gt;和微信公众号上。&lt;/p&gt;

&lt;p&gt;微信搜索 “云原生实验室” 或者扫描二维码即可关注。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>干货与湿货分享第5期</title>
      <link>https://www.yangcs.net/posts/weekly-5/</link>
      <pubDate>Sat, 18 Aug 2018 19:09:02 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/weekly-5/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;这是《干货与湿货分享》系列的第五期，主要记录过去一周我所见到的听到的值得分享的东西。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-新闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;新闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-国产-红芯浏览器被指造假-https-www-leiphone-com-news-201808-mkoth1we1vxo3uq7-html&#34;&gt;1. &lt;a href=&#34;https://www.leiphone.com/news/201808/MKoth1WE1VXo3uq7.html&#34; target=&#34;_blank&#34;&gt;“国产”红芯浏览器被指造假&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://static.cnbetacdn.com/article/2018/0818/72f418169de91cf.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;8 月 16 日，自称“打破美国垄断，世界第五颗浏览器内核、唯一属于中国人自己的浏览器内核”的红芯浏览器，被网友发现“只是谷歌浏览器换了一层皮”——红芯浏览器安装包解压后发现，最终可以得到一个版本号为 49.1.2623.213 的 Chrome 文件。&lt;/p&gt;

&lt;p&gt;据中新网16日消息，红芯联合创始人高婧回应称，网上文章断章取义，安装包里之所以有Chrome文件，&lt;strong&gt;因为本来就是基于开源的Chrome架构&lt;/strong&gt;。但红芯依然是自主可控的国产内核，因为有智能感知渲染等其他方面的创新。&lt;strong&gt;至于安装包为何下线，是因为技术部启动应急预案，开始自查&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;孔乙己争辩道，“封装不能算抄袭。软件界的事，能算抄袭么？”接连便是难懂的话，什么“智能感知渲染引擎”，什么“应用安全方面都有创新”之类，引得众人都哄笑起来：微博内外充满了快活的空气。&lt;/p&gt;

&lt;h4 id=&#34;2-谷歌员工签联名信抗议重返中国项目-http-cn-rfi-fr-e7-be-8e-e6-b4-b2-20180817-e7-ba-bd-e7-ba-a6-e6-97-b6-e6-8a-a5-e8-b0-b7-e6-ad-8c-e5-91-98-e5-b7-a5-e7-ad-be-e8-81-94-e5-90-8d-e4-bf-a1-e6-8a-97-e8-ae-ae-e9-87-8d-e8-bf-94-e4-b8-ad-e5-9b-bd-e9-a1-b9-e7-9b-ae&#34;&gt;2. &lt;a href=&#34;http://cn.rfi.fr/%E7%BE%8E%E6%B4%B2/20180817-%E7%BA%BD%E7%BA%A6%E6%97%B6%E6%8A%A5%E8%B0%B7%E6%AD%8C%E5%91%98%E5%B7%A5%E7%AD%BE%E8%81%94%E5%90%8D%E4%BF%A1%E6%8A%97%E8%AE%AE%E9%87%8D%E8%BF%94%E4%B8%AD%E5%9B%BD%E9%A1%B9%E7%9B%AE&#34; target=&#34;_blank&#34;&gt;谷歌员工签联名信抗议重返中国项目&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Jietu20180818-155529.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;据 NYT 报道，自谷歌打造阉割版搜索引擎、欲重返中国的项目经媒体报道公开后，谷歌内部越来越多员工对此表示担忧，认为如果搜索引擎遵循中国政府的审查要求则可能有严重的道德问题，已有超过 1400 名谷歌员工在内部信上签名抗议，要求审查该项目。&lt;/p&gt;

&lt;p&gt;在信中，员工写道，此项目以及谷歌愿意遵守中国的审核制度已“引起严重的道德问题”，“目前我们没收到要求关于此项目需要遵守道德标准的通知。我们急切需要更多的透明度，更多的消息及知情权：谷歌的员工需要清楚自己究竟在从事什么样的工作。” 这场抗议代表了谷歌可能重返中国的另一个障碍。该公司8年前公开撤出中国，就是为了抗议审查和政府黑客入侵。&lt;/p&gt;

&lt;h4 id=&#34;3-一大波筹拍中的国产烂片正朝你涌来-https-zhuanlan-zhihu-com-p-41978032&#34;&gt;3. &lt;a href=&#34;https://zhuanlan.zhihu.com/p/41978032&#34; target=&#34;_blank&#34;&gt;一大波筹拍中的国产烂片正朝你涌来&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/aiqinggongyu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;最近，一部披着抄袭剧的皮，卖着《盗墓笔记》肉的借壳电影《爱情公寓》深陷舆论漩涡。&lt;/p&gt;

&lt;p&gt;即使片方采取了删评、买水军、举报等方式在 SNS 上力挽狂澜，却仍然没有摆脱与著名烂片《逐梦演艺圈》同分段的命运。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://pic2.zhimg.com/80/v2-c30957991c5a0ba31716056f11d068c1_hd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;其实对于国产影视作品我国观众一直存在着一种逆向歧视 —— 对外语片的追捧和对国产片的贬低。但这并不是因为我们存在偏见，也不是崇洋媚外，而是对国产片现状的恨铁不成钢。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;观众甚至不止一次地发出灵魂拷问：这样的烂片到底为什么能上映？！&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;4-这个挂钟-蓝牙音箱-将给你带来一整片星空-https-hypebeast-com-2016-5-cosmos-constellation-clock-bluetooth-speaker&#34;&gt;4. &lt;a href=&#34;https://hypebeast.com/2016/5/cosmos-constellation-clock-bluetooth-speaker&#34; target=&#34;_blank&#34;&gt;这个挂钟+蓝牙音箱，将给你带来一整片星空&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://images.ifanr.cn/wp-content/uploads/2018/08/01-star.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;设计师 Jay Hyun Kim 设计了一个颇有诗意的挂钟+蓝牙音箱合体 Cosmos，除了可以看时间和听音乐，它还会把银河星空带到你家里。所有北半球的星座都收录其中，放在桌面上就是一整个神秘宇宙。&lt;/p&gt;

&lt;h4 id=&#34;5-google-亲儿子pixel-3-系列渲染图曝光-https-www-martinhajek-com-pixel-3-3xl-cad-models-released&#34;&gt;5. &lt;a href=&#34;https://www.martinhajek.com/pixel-3-3xl-cad-models-released/&#34; target=&#34;_blank&#34;&gt;Google 亲儿子Pixel 3 系列渲染图曝光&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://images.ifanr.cn/wp-content/uploads/2018/08/b75327a9-0676-453f-9941-8ba0d4e5ecb2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;对于果粉来说下半年最值得买的手机肯定是 iPhone，但对于「硬核谷粉」来说，其他第三方品牌的手机都难以看得上眼，下半年最想要的手机肯定是亲儿子系列——Pixel 3/Pixel 3 XL。&lt;/p&gt;

&lt;p&gt;继上月 OnLeaks 曝光关于 Pixel 3 的部分信息图之后，近日其又曝出了 Pixel 3 和 Pixel 3 XL 这两款手机细节更加丰富的渲染图。&lt;/p&gt;

&lt;h4 id=&#34;6-apple-store-京都店将开业-https-9to5mac-com-2018-08-13-apple-kyoto-zero-gate-august-25&#34;&gt;6. &lt;a href=&#34;https://9to5mac.com/2018/08/13/apple-kyoto-zero-gate-august-25/&#34; target=&#34;_blank&#34;&gt;Apple Store 京都店将开业&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://images.ifanr.cn/wp-content/uploads/2018/08/0d0113bf-872c-49cf-8ee3-1eefea79f19b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;苹果近日宣布，日本京都全新 Apple Store 将于当地时间 8 月 25 日上午 10 点开幕。这家 Apple Store 位于京都府京都市下京区 Kyoto Zero Gate 购物中心，是苹果在日本的第 9 家直营门店。&lt;/p&gt;

&lt;h4 id=&#34;7-ai-组队在-dota-2-五对五团战中战胜人类-http-www-sohu-com-a-237764438-354973&#34;&gt;7. &lt;a href=&#34;http://www.sohu.com/a/237764438_354973&#34; target=&#34;_blank&#34;&gt;AI 组队在 Dota 2 五对五团战中战胜人类&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://5b0988e595225.cdn.sohucs.com/images/20180626/69db48fc3886480eb6787a4432d48362.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;去年，OpenAI 在 DOTA 的 1v1 比赛中战胜了职业玩家 Dendi，而在距离进阶版 OpenAI Five 系统战胜人类业余玩家不过一个月的时间，近日，它又以 2:1 的战绩再次完成对人类高级玩家的“屠杀”，GG（人类赢的最后一局纯属耍赖）。&lt;/p&gt;

&lt;h4 id=&#34;8-google-one-来了-onedrive-和-dropbox-害怕吗-https-www-leiphone-com-news-201808-9nkmpz06tt2d2j8m-html&#34;&gt;8. &lt;a href=&#34;https://www.leiphone.com/news/201808/9NKMPZ06tt2D2j8M.html&#34; target=&#34;_blank&#34;&gt;Google One 来了，OneDrive 和 Dropbox 害怕吗？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://static.leiphone.com/uploads/new/images/20180816/5b74e95cdfc6c.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;近日，雷锋网收到邮件，Google日前正式推出了云存储服务的全新品牌 “Google One”，另外对存储资费进行了四年来第一次大幅下调。这意味着Google提供了更灵活的定价区间，也为消费者提供了更多的存储空间。据了解，此次推出的 “Google One” 是对 “Google Drive” 的一次更名。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-工具-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;工具&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-速盘双引擎版-https-www-speedpan-com-index-html&#34;&gt;1. &lt;a href=&#34;https://www.speedpan.com/index.html&#34; target=&#34;_blank&#34;&gt;速盘双引擎版&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/snipaste_20180806_191035.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;不知不觉间，百度云网盘几乎已成为国内互联网上最重要的网络资源分享和下载渠道了。平时无论是工作还是娱乐，不可避免地都需要下载&lt;strong&gt;百度网盘&lt;/strong&gt;的文件。&lt;/p&gt;

&lt;p&gt;然而现在百度网盘限速真的非常狠，几 KB/s 的下载速度简直慢到你怀疑人生。当然花钱开通会员是解决限速最简单的办法，但如果只是偶尔才下载一两个文件，充钱似乎又过于浪费。这时，**速盘 (SpeedPan) **这款免登录全速下载百度网盘的神器级小工具就可解你燃眉之急了……&lt;/p&gt;

&lt;h4 id=&#34;2-微博小程序-https-www-ifanr-com-minapp-1082708&#34;&gt;2. &lt;a href=&#34;https://www.ifanr.com/minapp/1082708&#34; target=&#34;_blank&#34;&gt;微博小程序&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://images.ifanr.cn/wp-content/uploads/2018/08/99-2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;不得不吐槽的是，以往在微信中打开微博链接的体验极差，尤其是 iOS 用户，想要完整阅读该条内容，必须先在 Safari 浏览器中打开，判断手机中是否安装了微博，判断的结果是安装了才能跳转到微博 app，打开这条微博信息。&lt;/p&gt;

&lt;p&gt;不过这两天我发现，把微博分享给微信好友，变成了以小程序方式呈现！现在的形式和之前的网页分享相比，「微博」小程序显然更加人性化：不必下载 app 即可查看微博原文、评论信息等。&lt;/p&gt;

&lt;h4 id=&#34;3-osx-kvm-https-github-com-kholia-osx-kvm&#34;&gt;3. &lt;a href=&#34;https://github.com/kholia/OSX-KVM&#34; target=&#34;_blank&#34;&gt;OSX-KVM&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个可以在 Linux 系统中通过 KVM 虚拟化技术运行 MacOS 的项目。&lt;/p&gt;

&lt;h4 id=&#34;4-chrono-下载管理器-https-chrome-google-com-webstore-detail-chrono-download-manager-mciiogijehkdemklbdcbfkefimifhecn-hl-zh-cn&#34;&gt;4. &lt;a href=&#34;https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn?hl=zh-CN&#34; target=&#34;_blank&#34;&gt;Chrono 下载管理器&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;众所周知, Chrome 原生的下载功能并不好用，不仅功能简陋，还会限制文件下载速度和数量。其中最最让人反感的，就是一旦开始下载就自动出现的底部栏。这个底部栏占用了浏览器不小的页面，存在感极强。除非手动关闭，否则哪怕是下载完毕它都不会自动消失，非常影响上网体验。&lt;/p&gt;

&lt;p&gt;这时候，大家或许就需要这款chrono下载管理器来解决这个问题了。（&lt;strong&gt;注意：是chrono不是chrome！&lt;/strong&gt;）&lt;/p&gt;

&lt;h4 id=&#34;5-medis-https-github-com-luin-medis&#34;&gt;5. &lt;a href=&#34;https://github.com/luin/medis&#34; target=&#34;_blank&#34;&gt;Medis&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/meids.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Medis 是一款Mac上优秀的Redis图形界面客户端，提供了大部分常用的功能，包括键空间的浏览、键和键值的增删改查、重命名修改 TTL 等。也提供了一些 redis-cli 难以实现的功能，包括创建键副本、修改列表值等，很不错！&lt;/p&gt;

&lt;h4 id=&#34;6-prometheus-formatter-https-github-com-fhemberger-chrome-prometheus-formatter&#34;&gt;6. &lt;a href=&#34;https://github.com/fhemberger/chrome-prometheus-formatter&#34; target=&#34;_blank&#34;&gt;Prometheus Formatter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/prometheus-formatter.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;随着 Prometheus 从 CNCF 正式毕业，各种工具如雨后春笋。这款 Chrome 扩展就是用来高亮显示纯文本的 Prometheus 指标。&lt;/p&gt;

&lt;h4 id=&#34;7-promauthproxy-https-github-com-cherti-promauthproxy&#34;&gt;7. &lt;a href=&#34;https://github.com/cherti/PromAuthProxy&#34; target=&#34;_blank&#34;&gt;PromAuthProxy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个 Prometheus 的加成工具，允许与多个用户共享 Prometheus 实例，每个用户只能看到自己的指标。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-教程-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;教程&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-kubebuilder-https-book-kubebuilder-io&#34;&gt;1. &lt;a href=&#34;https://book.kubebuilder.io/&#34; target=&#34;_blank&#34;&gt;KubeBuilder&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;如今的 Kubernetes 是如此的受欢迎。它继续主导容器技术的未来发展，同时 Kubernetes 也会带来越来越多的好东西。Kubebuilder 是一个用于在 Go 中快速构建和发布 Kubernetes API 的 SDK。它建立在用于构建核心 Kubernetes API 的规范技术之上，以提供简化的抽象，减少样板和工作。类似于 Ruby on Rails 和 SpringBoot 等 Web 开发框架，Kubebuilder 提高了速度并降低了开发人员管理的复杂性。&lt;/p&gt;

&lt;p&gt;简而言之，Kubebuilder 提供了开发人员为构建和发布 Kubernetes API 所需的所有强大的库和工具。它的理念非常简单。Kubebuilder 希望提供清晰的库的抽象，包括清晰且完好的示例。&lt;/p&gt;

&lt;h4 id=&#34;2-the-site-reliability-workbook-https-landing-google-com-sre-book-html&#34;&gt;2. &lt;a href=&#34;https://landing.google.com/sre/book.html&#34; target=&#34;_blank&#34;&gt;The Site Reliability Workbook&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/workbook-2x.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在 7 月 24 日的 Google Next &amp;lsquo;18 大会上，Google 发布了 SRE 系列新书《The Site Reliability Workbook — Practical Ways to Implement SRE》纸质版。&lt;/p&gt;

&lt;p&gt;这是 Google SRE 系列的第二本书，第一本书《Site Reliability Engineering：How Google Runs Production Systems》于 2016 年 4 月 16 日首次出版，中译版《SRE：Google 运维解密》于 2016 年 10 月 1 日出版。如果你读过《SRE：Google 运维解密》，不妨也可以接着看看这本新书。现在 Google 提供了这本书的免费 PDF 下载，&lt;strong&gt;限时到 8 月 23 日！&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&#34;3-prometheus-up-and-running-https-www-robustperception-io-prometheus-up-and-running-is-out&#34;&gt;3. &lt;a href=&#34;https://www.robustperception.io/prometheus-up-and-running-is-out&#34; target=&#34;_blank&#34;&gt;Prometheus: Up and Running&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/book-cover-914x1200.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是一本 Prometheus 的操作指南，内容非常详实，从架构设计到仪表盘、配置、查询和管理，应有尽有。全书共 386 页，目前美国亚马逊官网有出售，国内尚未引进。&lt;/p&gt;

&lt;h4 id=&#34;4-vue-js-源码分析-https-github-com-ustbhuangyi-vue-analysis&#34;&gt;4. &lt;a href=&#34;https://github.com/ustbhuangyi/vue-analysis&#34; target=&#34;_blank&#34;&gt;Vue.js 源码分析&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/vue-analysis.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;目前社区有很多 Vue.js 的源码解析文章，但是质量层次不齐，不够系统和全面，这本电子书的目标是全方位细致深度解析 Vue.js 的实现原理，让同学们可以彻底掌握 Vue.js。&lt;/p&gt;

&lt;h4 id=&#34;5-you-don-t-know-js-https-github-com-getify-you-dont-know-js&#34;&gt;5. &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34; target=&#34;_blank&#34;&gt;You Don&amp;rsquo;t Know JS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/you-don%27t-know-js.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是一套深入探讨 JavaScript 语言核心机制的系列丛书。本系列的第一版已经完成，诚意推荐给所有的前端工程师（或者 JavaScript 工程师，以及其它想了解这门语言一些细节的人），不过初学者并不建议阅读，这本书里没有任何基础知识，主要面向的是有经验的工程师，用来加深对一些概念和细节的认识和理解，但并不能教会你如何写 JavaScript。&lt;/p&gt;

&lt;h4 id=&#34;6-interview-notes-chinese-https-github-com-imhuay-interview-notes-chinese&#34;&gt;6. &lt;a href=&#34;https://github.com/imhuay/Interview_Notes-Chinese&#34; target=&#34;_blank&#34;&gt;Interview_Notes-Chinese&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;2018/2019/校招/春招/秋招/自然语言处理(NLP)/深度学习(Deep Learning)/机器学习(Machine Learning)/C/C++/Python/面试笔记&lt;/p&gt;

&lt;h4 id=&#34;7-build-your-own-x-https-github-com-danistefanovic-build-your-own-x&#34;&gt;7. &lt;a href=&#34;https://github.com/danistefanovic/build-your-own-x&#34; target=&#34;_blank&#34;&gt;build-your-own-x&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/feynman.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;费曼：“我不能创造的东西，我就不了解。”该项目收集了不同编程语言造轮子的教程。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-资源-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;资源&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-google空间-gplayspace-http-gplayspace-com&#34;&gt;1. &lt;a href=&#34;http://gplayspace.com/&#34; target=&#34;_blank&#34;&gt;Google空间（Gplayspace）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个可以直连 Google Play 商店的良心应用。软件内置的国外节点，相当于中转的功能。安装后自动安装谷歌框架和服务，在搜索框中输入关键词，就可以搜索美国、香港、日本、韩国等多地的谷歌市场。&lt;/p&gt;

&lt;p&gt;Gplayspace 相当于生成一个空间，空间内的软件有富强功能，可以用它来看 bilibili 的海外版权视频，也可以用来玩外服的安卓游戏，也可以将本地的软件添加进去，达到富强目的。&lt;/p&gt;

&lt;h4 id=&#34;2-paascloud-master-https-github-com-paascloud-paascloud-master&#34;&gt;2. &lt;a href=&#34;https://github.com/paascloud/paascloud-master&#34; target=&#34;_blank&#34;&gt;paascloud-master&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;spring cloud + vue 全家桶实战，模拟商城，完整的购物流程、后端运营平台，可以实现快速搭建企业级微服务项目。&lt;/p&gt;

&lt;h4 id=&#34;3-react-tetris-https-github-com-chvin-react-tetris&#34;&gt;3. &lt;a href=&#34;https://github.com/chvin/react-tetris&#34; target=&#34;_blank&#34;&gt;react-tetris&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/react-tetris.gif&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;逼真的俄罗斯方块（非常逼真、强大！），有详细的技术介绍。&lt;a href=&#34;https://chvin.github.io/react-tetris/?lan=zh&#34; target=&#34;_blank&#34;&gt;在线试玩&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;4-chinese-programmer-wrong-pronunciation-https-github-com-shimohq-chinese-programmer-wrong-pronunciation&#34;&gt;4. &lt;a href=&#34;https://github.com/shimohq/chinese-programmer-wrong-pronunciation&#34; target=&#34;_blank&#34;&gt;chinese-programmer-wrong-pronunciation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;收集了中国程序员容易发音错误的单词，比如 App 正确读音为 ✅ [æp] 而不是 [eipi&amp;rsquo;pi]&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-奇闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;奇闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-日本人名的历史起源&#34;&gt;1. 日本人名的历史起源&lt;/h4&gt;

&lt;p&gt;幕府时代的日本很穷，在黑暗的等级制度下，再加上资源匮乏，日本的生产力水平不仅无法跟当时的中华帝国相比，在全世界范围内都算比较低的。根据一些史料记载，很长一段时间里日本人都没有解决住房问题。一家人要居住了，就随便找个地方挖个洞，而这个洞要挖得很有水平。&lt;/p&gt;

&lt;p&gt;他们叫“直洞”，也就是在地上直挖下去，洞口用茅草挡着雨水，洞中间插根木棒棒作为双手攀爬的直梯工具。早上出去劳动，爬上之前要朝洞口大喊一声：“我出去了！”这是为了防止有人在洞外准备撒尿或者鸟拉屎到头上；同理，晚上回来跳下来之前还要大喊一声：“我回来了！”&lt;/p&gt;

&lt;p&gt;如果事先不打那声招呼，那是很容易踩到洞里家人的头上的。&lt;/p&gt;

&lt;p&gt;西方人称日本人为“亚洲黄猴”，除了脸长，脖子短、腿短等因素外，会爬树也是一个原因。“嗖”的一声，他就出去了。&lt;/p&gt;

&lt;p&gt;还有一种说法，日本人挖这些洞有另外的一些讲究。为了能遮风挡雨，方便进出，经常挖在一些对生活比较便利的地方，比如“松下”、“渡边”、“山口”、“田中”、“竹下”等，天长日久，这些地标就成了日本人最常见的姓氏，方便大家记忆————你是从松下来的，你是从渡边来的。。。&lt;/p&gt;

&lt;h4 id=&#34;2-黑洞很污&#34;&gt;2. 黑洞很污&lt;/h4&gt;

&lt;p&gt;1915年左右的时代，黑洞的名字叫做“史瓦西奇点”。由于大物理学家如爱因斯坦，爱丁顿，奥本海默都不愿意承认黑洞的存在，这个名字就这么用着。&lt;/p&gt;

&lt;p&gt;1965年左右的时代，苏联称黑洞为“冻星”，西方称黑洞为“视界”，前者在意人们观测到的，星体似乎在临界周长处冻结的静止特点，后者在意光无法从临界周长处逃出的运动特点。两者都有道理，也都不够形象。&lt;/p&gt;

&lt;p&gt;于是，大物理学家惠勒，取名“黑洞”。信。达。这个词在法语里是“trou noir”，不雅，法国抵制了很多年。据说法国的黑洞研究因此停滞。&lt;/p&gt;

&lt;p&gt;后来，物理学家金兹堡提出黑洞形成后不会保留形成之前恒星的特性，物理学家伊斯雷尔首先在论文中使用“无毛”一词，由此传开。这回，在法语和俄语里一起不雅，但还是被广泛使用了。因为十分信。十分达。&lt;/p&gt;

&lt;p&gt;据说物理学家们为了追求真理，才不在乎雅不雅的，是吧。&lt;/p&gt;

&lt;h4 id=&#34;3-韩国国旗的来历&#34;&gt;3. 韩国国旗的来历&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/chaoxian.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在明朝，朝鲜（包括现在的朝鲜和韩国）是大明帝国的藩属国，天聪元年（1627年），皇太极对明作战失败，缺少银两，就先易后难，派大将阿敏攻下了朝鲜（打朝鲜不攻山海关），从此朝鲜成为八旗军的后勤供应基地，&lt;strong&gt;粮食可能不管饱，但人参随便拿。。。&lt;/strong&gt;你想没事就喝个参汤的军队打仗有多猛。就这样，八旗一边流鼻血一边砍敌人，一路杀进山海关。大清建立后，朝鲜自然而然沦为大清藩属国（虽然他们一直很想念明朝）。&lt;/p&gt;

&lt;p&gt;所谓藩属国，有点类似于被老大保护老二的意思。朝鲜只有“国王”，而没有“皇帝”，因为他们的“皇帝”就是大清皇帝，使用的年号也是大清的年号。而朝鲜国王在级别上只相当于大清国的亲王。由于这个原因，朝鲜国王的王宫和老百姓的民居都必须比清国的矮小。我们知道如今大韩民国的国旗是太极旗，实际上当年朝鲜人设计国旗时，清国依据自己的国旗是黄龙旗，给朝鲜的指导方案是————蟒旗（蟒是一种在地上爬的龙）。朝鲜人终于有想法了：大家都是做龙的，你们在天上飞，我们在地上爬，娘的这版本也差得太大了吧，于是就改成了太极旗。&lt;/p&gt;

&lt;h4 id=&#34;4-wi-fi-之母&#34;&gt;4. Wi-Fi 之母&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Hedy_Lamarr_Publicity_Photo_for_The_Heavenly_Body_1944.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;今天我要介绍一位超级大美女给大家认识。&lt;/p&gt;

&lt;p&gt;她是好莱坞艳绝一时的女明星，创办过自己的电影公司，被称为&lt;strong&gt;“世界上最美丽的女人”&lt;/strong&gt;，也是世界上第一个&lt;strong&gt;全裸出镜&lt;/strong&gt;的女演员，第一个在电影里“高潮”的女演员，甚至惊动了教皇。。。&lt;/p&gt;

&lt;p&gt;更重要的是，她发明的跳频技术，是现代 CDMA、Wi-Fi、GPS、军事卫星系统的基础，如今&lt;strong&gt;市场价值约300亿美元。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;她就是&lt;strong&gt;海蒂·拉玛（Hedy Lamarr）&lt;/strong&gt;，有史以来颜值最高的科学家、发明家，通信行业的骄傲。想不到给了我第二条生命（Wi-Fi）的母亲竟然这么美！&lt;/p&gt;

&lt;p&gt;在 2005 年出版的《高通方程式》一书中，著名通讯专家&lt;strong&gt;戴夫·莫克&lt;/strong&gt;是这样评价她的：只要你使用过移动电话，你就有必要感谢海蒂·拉玛。要知道，这位性感的女明星为全球无线通讯技术所做的贡献至今&lt;strong&gt;无人能及&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;她有着近乎完美的容颜，几乎是所有男人的梦中情人，所有女性羡慕的对象。&lt;strong&gt;“比我漂亮的没我聪明，比我聪明的没我漂亮。”&lt;/strong&gt; 能说这句话的，估计只有她了。天下群芳，莫敢与之争。就连《乱世佳人》女主费雯·丽，也因被说长得像海蒂·拉玛而感到暗自窃喜。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;此刻正在玩手机的你，一定要认识感谢她呀！&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-欢迎关注-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;欢迎关注&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;该系列每周六发布，同步更新在我的&lt;a href=&#34;https://www.yangcs.net/&#34; target=&#34;_blank&#34;&gt;个人博客&lt;/a&gt;和微信公众号上。&lt;/p&gt;

&lt;p&gt;微信搜索 “云原生实验室” 或者扫描二维码即可关注。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
  </channel>
</rss>
