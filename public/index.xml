<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryan Yang</title>
    <link>https://www.yangcs.net/</link>
    <description>Recent content on Ryan Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 23 Jan 2018 08:26:58 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Linux全局智能分流方案</title>
      <link>https://www.yangcs.net/posts/linux-circumvent/</link>
      <pubDate>Tue, 23 Jan 2018 08:26:58 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/linux-circumvent/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p id=&#34;div-border-left-red&#34;&gt;Github 地址：&lt;a href=&#34;https://github.com/yangchuansheng/love-gfw&#34; target=&#34;_blank&#34;&gt;Linux 和 MacOS 设备智能分流方案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本来我是决定不再写这样的文章了的。但是呢，最近连续配置了两次 &lt;code&gt;ArchLinux&lt;/code&gt;，在配置这种东西的时候连续撞到了同样的坑，加上这段时间经常有人问我关于 &lt;code&gt;Linux&lt;/code&gt; 下的 &lt;code&gt;shadowsocks&lt;/code&gt; 的问题，所以我想了想还是写一篇记录一下吧，也免得自己以后再忘记了。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这里有两种方案，都可以实现全局智能分流。第一种方案的思路是使用 &lt;code&gt;ipset&lt;/code&gt; 载入 &lt;code&gt;chnroute&lt;/code&gt; 的 &lt;code&gt;IP&lt;/code&gt; 列表并使用 &lt;code&gt;iptables&lt;/code&gt; 实现带自动分流国内外流量的全局代理。为什么不用 &lt;code&gt;PAC&lt;/code&gt; 呢？因为 &lt;code&gt;PAC&lt;/code&gt; 这种东西只对浏览器有用。难道你在浏览器之外就不需要科学上网了吗？反正我是不信的……&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=Blue&gt;本教程所用系统为 &lt;code&gt;Archlinux&lt;/code&gt;，其他发型版类似，请自行参考相关资料。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;p-markdown-1-style-margin-bottom-2em-margin-right-5px-padding-8px-15px-letter-spacing-2px-background-image-linear-gradient-to-right-bottom-rgb-0-188-212-rgb-63-81-181-background-color-rgb-63-81-181-color-rgb-255-255-255-border-left-10px-solid-rgb-51-51-51-border-radius-5px-text-shadow-rgb-102-102-102-1px-1px-1px-box-shadow-rgb-102-102-102-1px-1px-2px-1-通过-iptables-实现智能分流-p&#34;&gt;&lt;p markdown=&#34;1&#34; style=&#34;margin-bottom:2em; margin-right: 5px; padding: 8px 15px; letter-spacing: 2px; background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181)); background-color: rgb(63, 81, 181); color: rgb(255, 255, 255); border-left: 10px solid rgb(51, 51, 51); border-radius:5px; text-shadow: rgb(102, 102, 102) 1px 1px 1px; box-shadow: rgb(102, 102, 102) 1px 1px 2px;&#34;&gt;1. 通过 iptables 实现智能分流&lt;/p&gt;&lt;/h2&gt;

&lt;h3 id=&#34;1-1-安装相关软件&#34;&gt;1.1 安装相关软件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;shadowsocks-libev&lt;/li&gt;
&lt;li&gt;ipset&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pacman -S shadowsocks-libev ipset
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-2-配置shadowsocks-libev-略过&#34;&gt;1.2 配置shadowsocks-libev（略过）&lt;/h3&gt;

&lt;p&gt;假设shadowsocks配置文件为/etc/shadowsocks.json&lt;/p&gt;

&lt;h3 id=&#34;1-3-获取中国ip段&#34;&gt;1.3 获取中国IP段&lt;/h3&gt;

&lt;p&gt;将以下命令写入脚本保存执行（假设保存在/home/yang/bin/路由表/目录下）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
wget -c http://ftp.apnic.net/stats/apnic/delegated-apnic-latest
cat delegated-apnic-latest | awk -F &#39;|&#39; &#39;/CN/&amp;amp;&amp;amp;/ipv4/ {print $4 &amp;quot;/&amp;quot; 32-log($5)/log(2)}&#39; | cat &amp;gt; /home/yang/bin/路由表/cn_rules.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-4-创建启动和关闭脚本&#34;&gt;1.4 创建启动和关闭脚本&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /home/yang/bin/shadowsocks/ss-up.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

SOCKS_SERVER=$SERVER_IP # SOCKS 服务器的 IP 地址
# Setup the ipset
ipset -N chnroute hash:net maxelem 65536

for ip in $(cat &#39;/home/yang/bin/路由表/cn_rules.conf&#39;); do
  ipset add chnroute $ip
done

# 在nat表中新增一个链，名叫：SHADOWSOCKS
iptables -t nat -N SHADOWSOCKS

# Allow connection to the server
iptables -t nat -A SHADOWSOCKS -d $SOCKS_SERVER -j RETURN

# Allow connection to reserved networks
iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN

# Allow connection to chinese IPs
iptables -t nat -A SHADOWSOCKS -p tcp -m set --match-set chnroute dst -j RETURN
# 如果你想对 icmp 协议也实现智能分流，可以加上下面这一条
# iptables -t nat -A SHADOWSOCKS -p icmp -m set --match-set chnroute dst -j RETURN

# Redirect to Shadowsocks
# 把1081改成你的shadowsocks本地端口
iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-port 1081
# 如果你想对 icmp 协议也实现智能分流，可以加上下面这一条
# iptables -t nat -A SHADOWSOCKS -p icmp -j REDIRECT --to-port 1081

# 将SHADOWSOCKS链中所有的规则追加到OUTPUT链中
iptables -t nat -A OUTPUT -p tcp -j SHADOWSOCKS
# 如果你想对 icmp 协议也实现智能分流，可以加上下面这一条
# iptables -t nat -A OUTPUT -p icmp -j SHADOWSOCKS

# 内网流量流经 shadowsocks 规则链
iptables -t nat -A PREROUTING -s 192.168/16 -j SHADOWSOCKS
# 内网流量源NAT
iptables -t nat -A POSTROUTING -s 192.168/16 -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;这是在启动 &lt;code&gt;shadowsocks&lt;/code&gt; 之前执行的脚本，用来设置 &lt;code&gt;iptables&lt;/code&gt; 规则，对全局应用代理并将 &lt;code&gt;chnroute&lt;/code&gt; 导入 &lt;code&gt;ipset&lt;/code&gt; 来实现自动分流。注意要把服务器 &lt;code&gt;IP&lt;/code&gt; 和本地端口相关的代码全部替换成你自己的。
&amp;emsp;&amp;emsp;这里就有一个坑了，就是在把 &lt;code&gt;chnroute.txt&lt;/code&gt; 加入 &lt;code&gt;ipset&lt;/code&gt; 的时候。因为 &lt;code&gt;chnroute.txt&lt;/code&gt; 是一个 &lt;code&gt;IP&lt;/code&gt; 段列表，而中国持有的 &lt;code&gt;IP&lt;/code&gt; 数量上还是比较大的，所以如果使用 &lt;code&gt;hash:ip&lt;/code&gt; 来导入的话会使内存溢出。我在第二次重新配置的时候就撞进了这个大坑……
&amp;emsp;&amp;emsp;但是你也不能尝试把整个列表导入 &lt;code&gt;iptables&lt;/code&gt;。虽然导入 &lt;code&gt;iptables&lt;/code&gt; 不会导致内存溢出，但是 &lt;code&gt;iptables&lt;/code&gt; 是线性查表，即使你全部导入进去，也会因为低下的性能而抓狂。
&lt;br \&gt;
然后再创建 &lt;code&gt;/home/yang/bin/shadowsocks/ss-down.sh&lt;/code&gt;, 这是用来清除上述规则的脚本，比较简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# iptables -t nat -D OUTPUT -p icmp -j SHADOWSOCKS
iptables -t nat -D OUTPUT -p tcp -j SHADOWSOCKS
iptables -t nat -F SHADOWSOCKS
iptables -t nat -X SHADOWSOCKS
ipset destroy chnroute
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chmod +x ss-up.sh
$ chmod +x ss-down.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-5-配置ss-redir服务&#34;&gt;1.5 配置ss-redir服务&lt;/h3&gt;

&lt;p&gt;首先，默认的 &lt;code&gt;ss-local&lt;/code&gt; 并不能用来作为 &lt;code&gt;iptables&lt;/code&gt; 流量转发的目标，因为它是 &lt;code&gt;socks5&lt;/code&gt; 代理而非透明代理。我们至少要把 &lt;code&gt;systemd&lt;/code&gt; 执行的程序改成 &lt;code&gt;ss-redir&lt;/code&gt;。其次，上述两个脚本还不能自动执行，必须让 &lt;code&gt;systemd&lt;/code&gt; 分别在启动 &lt;code&gt;shadowsocks&lt;/code&gt; 之前和关闭之后将脚本执行，这样才能自动配置好 &lt;code&gt;iptables&lt;/code&gt; 规则。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /usr/lib/systemd/system/shadowsocks-libev@.service
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Unit]
Description=Shadowsocks-Libev Client Service
After=network.target

[Service]
User=root
CapabilityBoundingSet=~CAP_SYS_ADMIN
ExecStart=
ExecStartPre=/home/yang/bin/shadowsocks/ss-up.sh
ExecStart=/usr/bin/ss-redir -u -c /etc/%i.json
ExecStopPost=/home/yang/bin/shadowsocks/ss-down.sh

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl start shadowsocks-libev@shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开机自启&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl enable shadowsocks-libev@shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-6-配置智能-dns-服务&#34;&gt;1.6 配置智能 DNS 服务&lt;/h3&gt;

&lt;p&gt;完成了以上工作之后是不是就可以实现全局科学上网了呢？答案是否定的，我们还有最后一项工作需要完成，那就是解决 &lt;code&gt;DNS&lt;/code&gt; 污染问题。如果你不知道什么是 &lt;code&gt;DNS&lt;/code&gt; 污染，我可以简单地给你普及一下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 污染是一种让一般用户由于得到虚假目标主机 &lt;code&gt;IP&lt;/code&gt; 而不能与其通信的方法，是一种 &lt;code&gt;DNS&lt;/code&gt; 缓存投毒攻击（DNS cache poisoning）。其工作方式是：由于通常的 &lt;code&gt;DNS&lt;/code&gt; 查询没有任何认证机制，而且 &lt;code&gt;DNS&lt;/code&gt; 查询通常基于的 &lt;code&gt;UDP&lt;/code&gt; 是无连接不可靠的协议，因此 &lt;code&gt;DNS&lt;/code&gt; 的查询非常容易被篡改，通过对 &lt;code&gt;UDP&lt;/code&gt; 端口 53 上的 &lt;code&gt;DNS&lt;/code&gt; 查询进行入侵检测，一经发现与关键词相匹配的请求则立即伪装成目标域名的解析服务器（NS，Name Server）给查询者返回虚假结果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 污染症状：目前一些被禁止访问的网站很多就是通过 &lt;code&gt;DNS&lt;/code&gt; 污染来实现的，例如 &lt;code&gt;YouTube&lt;/code&gt;、&lt;code&gt;Facebook&lt;/code&gt; 等网站。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;应对dns污染的方法&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;DNS&lt;/code&gt; 污染，可以说，个人用户很难单单靠设置解决，通常可以使用 &lt;code&gt;VPN&lt;/code&gt; 或者域名远程解析的方法解决，但这大多需要购买付费的 &lt;code&gt;VPN&lt;/code&gt; 或 &lt;code&gt;SSH&lt;/code&gt; 等&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;Hosts&lt;/code&gt; 的方法，手动设置域名正确的 &lt;code&gt;IP&lt;/code&gt; 地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dns&lt;/code&gt; 加密解析：&lt;a href=&#34;https://dnscrypt.org/&#34; target=&#34;_blank&#34;&gt;DNSCrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;忽略 &lt;code&gt;DNS&lt;/code&gt; 投毒污染小工具：&lt;a href=&#34;https://github.com/chengr28/Pcap_DNSProxy&#34; target=&#34;_blank&#34;&gt;Pcap_DNSProxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们选择用 &lt;code&gt;Pcap_DNSProxy&lt;/code&gt; 来解决这个问题，以前用的是 &lt;code&gt;Pdnsd + Dnsmasq&lt;/code&gt; 组合， 后来发现 &lt;code&gt;TCP&lt;/code&gt; 请求效率太低加上家里网络与那些国外的 &lt;code&gt;DNS&lt;/code&gt; 丢包实在是严重， 所以打算用 &lt;code&gt;Pcap_DNSProxy&lt;/code&gt; 代替 &lt;code&gt;Pdnsd&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;关于 &lt;code&gt;Pcap_DNSProxy&lt;/code&gt; 的详细介绍，可以参考:
&lt;a href=&#34;https://github.com/chengr28/Pcap_DNSProxy&#34; target=&#34;_blank&#34;&gt;https://github.com/chengr28/Pcap_DNSProxy&lt;/a&gt;
安装过程可以参考：
&lt;a href=&#34;https://github.com/chengr28/Pcap_DNSProxy/blob/master/Documents/ReadMe_Linux.zh-Hans.txt&#34; target=&#34;_blank&#34;&gt;https://github.com/chengr28/Pcap_DNSProxy/blob/master/Documents/ReadMe_Linux.zh-Hans.txt&lt;/a&gt;
更详细的使用说明可以参考：
&lt;a href=&#34;https://github.com/chengr28/Pcap_DNSProxy/blob/master/Documents/ReadMe.zh-Hans.txt&#34; target=&#34;_blank&#34;&gt;https://github.com/chengr28/Pcap_DNSProxy/blob/master/Documents/ReadMe.zh-Hans.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里主要重点强调一些需要注意的配置项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DNS&lt;/code&gt; - 境外域名解析参数区域（这是最关键的一项配置）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[DNS]
# 这里一定要填 IPv4 + TCP！！！表示只使用 TCP 协议向境外远程 DNS 服务器发出请求
Outgoing Protocol = IPv4 + TCP
# 建议当系统使用全局代理功能时启用，程序将除境内服务器外的所有请求直接交给系统而不作任何过滤等处理，系统会将请求自动发往远程服务器进行解析
Direct Request = IPv4
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Local DNS&lt;/code&gt; - 境内域名解析参数区域&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Local DNS]
# 发送请求到境内 DNS 服务器时所使用的协议
Local Protocol = IPv4 + UDP
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Addresses&lt;/code&gt; - 普通模式地址区域&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Addresses]
...
...
# IPv4 主要境外 DNS 服务器地址
IPv4 Main DNS Address = 8.8.4.4:53
# IPv4 备用境外 DNS 服务器地址
IPv4 Alternate DNS Address = 8.8.8.8:53|208.67.220.220:443|208.67.222.222:5353
# IPv4 主要境内 DNS 服务器地址，用于境内域名解析，推荐使用 onedns
IPv4 Local Main DNS Address = 112.124.47.27:53
# IPv4 备用境内 DNS 服务器地址，用于境内域名解析
IPv4 Local Alternate DNS Address = 114.215.126.16:53
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-7-配置系统-dns-服务器设置&#34;&gt;1.7 配置系统 DNS 服务器设置&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可参见 &lt;a href=&#34;https://developers.google.com/speed/public-dns/docs/using&#34; target=&#34;_blank&#34;&gt;https://developers.google.com/speed/public-dns/docs/using&lt;/a&gt; 中 &lt;code&gt;Changing your DNS servers settings&lt;/code&gt; 中 &lt;code&gt;Linux&lt;/code&gt; 一节&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;图形界面以 &lt;code&gt;GNOME 3&lt;/code&gt; 为例：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打开所有程序列表，并 -&amp;gt; 设置 – 硬件分类 – 网络&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果要对当前的网络配置进行编辑 -&amp;gt; 单击齿轮按钮&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;选中 &lt;code&gt;IPv4&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 栏目中，将自动拨向关闭&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在服务器中填入 &lt;code&gt;127.0.0.1&lt;/code&gt; （或103.214.195.99:7300）并应用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;选中 &lt;code&gt;IPv6&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 栏目中，将自动拨向关闭&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在服务器中填入 ::1 并应用&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;请务必确保只填入这两个地址，填入其它地址可能会导致系统选择其它 DNS 服务器绕过程序的代理&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重启网络连接&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接修改系统文件修改 DNS 服务器设置：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自动获取地址(DHCP)时：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以 &lt;code&gt;root&lt;/code&gt; 权限进入 &lt;code&gt;/etc/dhcp&lt;/code&gt; 或 &lt;code&gt;/etc/dhcp3&lt;/code&gt; 目录（视乎 dhclient.conf 文件位置）&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接修改 &lt;code&gt;dhclient.conf&lt;/code&gt; 文件，修改或添加 &lt;code&gt;prepend domain-name-servers&lt;/code&gt; 一项即可&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果 &lt;code&gt;prepend domain-name-servers&lt;/code&gt; 一项被 # 注释则需要把注释去掉以使配置生效，不需要添加新的条目&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;dhclient.conf&lt;/code&gt; 文件可能存在多个 &lt;code&gt;prepend domain-name-servers&lt;/code&gt; 项，是各个网络接口的配置项目，直接修改总的配置项目即可&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;service network(/networking) restart&lt;/code&gt; 或 &lt;code&gt;ifdown/ifup&lt;/code&gt; 或 &lt;code&gt;ifconfig stop/start&lt;/code&gt; 重启网络服务/网络端口&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;非自动获取地址(DHCP)时：&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以 &lt;code&gt;root&lt;/code&gt; 权限进入 &lt;code&gt;/etc&lt;/code&gt; 目录&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接修改 &lt;code&gt;resolv.conf&lt;/code&gt; 文件里的 &lt;code&gt;nameserver&lt;/code&gt; 即可&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果重启后配置被覆盖，则需要修改或新建 &lt;code&gt;/etc/resolvconf/resolv.conf.d&lt;/code&gt; 文件，内容和 &lt;code&gt;resolv.conf&lt;/code&gt; 一样&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;service network(/networking) restart&lt;/code&gt; 或 &lt;code&gt;ifdown/ifup&lt;/code&gt; 或 &lt;code&gt;ifconfig stop/start&lt;/code&gt; 重启网络服务/网络端口&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-8-打开流量转发&#34;&gt;1.8 打开流量转发&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/sysctl.d/30-ipforward.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;net.ipv4.ip_forward=1

net.ipv6.conf.all.forwarding = 1

net.ipv4.tcp_congestion_control=westwood

net.ipv4.tcp_syn_retries = 5

net.ipv4.tcp_synack_retries = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑完成后，执行以下命令使变动立即生效&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sysctl -p
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;p-markdown-1-style-margin-bottom-2em-margin-right-5px-padding-8px-15px-letter-spacing-2px-background-image-linear-gradient-to-right-bottom-rgb-0-188-212-rgb-63-81-181-background-color-rgb-63-81-181-color-rgb-255-255-255-border-left-10px-solid-rgb-51-51-51-border-radius-5px-text-shadow-rgb-102-102-102-1px-1px-1px-box-shadow-rgb-102-102-102-1px-1px-2px-2-通过-nftables-实现智能分流-p&#34;&gt;&lt;p markdown=&#34;1&#34; style=&#34;margin-bottom:2em; margin-right: 5px; padding: 8px 15px; letter-spacing: 2px; background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181)); background-color: rgb(63, 81, 181); color: rgb(255, 255, 255); border-left: 10px solid rgb(51, 51, 51); border-radius:5px; text-shadow: rgb(102, 102, 102) 1px 1px 1px; box-shadow: rgb(102, 102, 102) 1px 1px 2px;&#34;&gt;2. 通过 nftables 实现智能分流&lt;/p&gt;&lt;/h2&gt;

&lt;h3 id=&#34;2-1-安装相关软件&#34;&gt;2.1 安装相关软件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;shadowsocks-libev&lt;/li&gt;
&lt;li&gt;nftables&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pacman -S shadowsocks-libev nftables
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-2-配置shadowsocks-libev-略过&#34;&gt;2.2 配置shadowsocks-libev（略过）&lt;/h3&gt;

&lt;p&gt;假设shadowsocks配置文件为/etc/shadowsocks.json&lt;/p&gt;

&lt;h3 id=&#34;2-3-获取中国ip段&#34;&gt;2.3 获取中国IP段&lt;/h3&gt;

&lt;p&gt;将以下命令写入脚本保存执行（假设保存在/home/yang/bin/路由表/目录下）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
wget -c http://ftp.apnic.net/stats/apnic/delegated-apnic-latest
cat delegated-apnic-latest | awk -F &#39;|&#39; &#39;/CN/&amp;amp;&amp;amp;/ipv4/ {print $4 &amp;quot;/&amp;quot; 32-log($5)/log(2)}&#39; | cat &amp;gt; /home/yang/bin/路由表/cn_rules.conf
cat cn_rules.conf|sed &#39;:label;N;s/\n/, /;b label&#39;|sed &#39;s/$/&amp;amp; }/g&#39;|sed &#39;s/^/{ &amp;amp;/g&#39; &amp;gt; /home/yang/bin/路由表/cn_rules1.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-4-创建启动和关闭脚本&#34;&gt;2.4 创建启动和关闭脚本&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /home/yang/bin/shadowsocks/nftables-up.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

nft_pre=&amp;quot;/usr/sbin/nft add rule nat prerouting&amp;quot;
nft_out=&amp;quot;/usr/sbin/nft add rule nat output&amp;quot;
chnroute=$(cat &#39;/home/yang/bin/路由表/cn_rules1.conf&#39;)

/usr/bin/nft -f /etc/nftables.conf

${nft_pre} tcp dport 8385 return
${nft_pre} ip daddr 139.162.87.98 return
${nft_pre} ip daddr { 0.0.0.0/8, 10.0.0.0/8, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.168.0.0/16, 224.0.0.0/4, 240.0.0.0/4, 172.16.39.0/24} return
${nft_pre} ip daddr $chnroute return
${nft_pre} tcp sport { 32768-61000} redirect to 1081
#${nft_pre} ip protocol icmp redirect to 1081
# 内网流量源NAT
nft add rule nat postrouting ip saddr 192.168.0.0/12 masquerade

${nft_out} tcp dport 8385 return
${nft_out} ip daddr 139.162.87.98 return
${nft_out} ip daddr { 0.0.0.0/8, 10.0.0.0/8, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.168.0.0/16, 224.0.0.0/4, 240.0.0.0/4, 172.16.39.0/24} return
${nft_out} ip daddr $chnroute return
# /proc/sys/net/ipv4/ip_local_port_range，本地发起的连接的端口范围
${nft_out} tcp sport { 32768-61000} redirect to 1081
${nft_out} ip protocol icmp redirect to 1081
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;这是在启动 &lt;code&gt;shadowsocks&lt;/code&gt; 之前执行的脚本，用来设置 &lt;code&gt;nftables&lt;/code&gt; 规则。
然后再创建 &lt;code&gt;/home/yang/bin/shadowsocks/nftables-down.sh&lt;/code&gt;, 这是用来清除上述规则的脚本，比较简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

sudo nft flush table nat
#sudo nft flush table filter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ chmod +x nftables-up.sh
$ chmod +x nftables-down.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-5-配置ss-redir服务&#34;&gt;2.5 配置ss-redir服务&lt;/h3&gt;

&lt;p&gt;首先，默认的 &lt;code&gt;ss-local&lt;/code&gt; 并不能用来作为 &lt;code&gt;nftables&lt;/code&gt; 流量转发的目标，因为它是 &lt;code&gt;socks5&lt;/code&gt; 代理而非透明代理。我们至少要把 &lt;code&gt;systemd&lt;/code&gt; 执行的程序改成 &lt;code&gt;ss-redir&lt;/code&gt;。其次，上述两个脚本还不能自动执行，必须让 &lt;code&gt;systemd&lt;/code&gt; 分别在启动 &lt;code&gt;shadowsocks&lt;/code&gt; 之前和关闭之后将脚本执行，这样才能自动配置好 &lt;code&gt;nftables&lt;/code&gt; 规则。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /usr/lib/systemd/system/shadowsocks-libev@.service
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Unit]
Description=Shadowsocks-Libev Client Service
After=network.target

[Service]
User=root
CapabilityBoundingSet=~CAP_SYS_ADMIN
ExecStart=
ExecStartPre=/home/yang/bin/shadowsocks/nftables-up.sh
ExecStart=/usr/bin/ss-redir -u -c /etc/%i.json
ExecStopPost=/home/yang/bin/shadowsocks/nftables-down.sh

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl start nftables
$ systemctl start shadowsocks-libev@shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开机自启&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl enable nftables
$ systemctl enable shadowsocks-libev@shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-6-配置智能-dns-服务&#34;&gt;2.6 配置智能 DNS 服务&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h3 id=&#34;2-7-配置系统-dns-服务器设置&#34;&gt;2.7 配置系统 DNS 服务器设置&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h3 id=&#34;2-8-打开流量转发&#34;&gt;2.8 打开流量转发&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h2 id=&#34;p-markdown-1-style-margin-bottom-2em-margin-right-5px-padding-8px-15px-letter-spacing-2px-background-image-linear-gradient-to-right-bottom-rgb-0-188-212-rgb-63-81-181-background-color-rgb-63-81-181-color-rgb-255-255-255-border-left-10px-solid-rgb-51-51-51-border-radius-5px-text-shadow-rgb-102-102-102-1px-1px-1px-box-shadow-rgb-102-102-102-1px-1px-2px-3-通过策略路由实现智能分流-p&#34;&gt;&lt;p markdown=&#34;1&#34; style=&#34;margin-bottom:2em; margin-right: 5px; padding: 8px 15px; letter-spacing: 2px; background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181)); background-color: rgb(63, 81, 181); color: rgb(255, 255, 255); border-left: 10px solid rgb(51, 51, 51); border-radius:5px; text-shadow: rgb(102, 102, 102) 1px 1px 1px; box-shadow: rgb(102, 102, 102) 1px 1px 2px;&#34;&gt;3. 通过策略路由实现智能分流&lt;/p&gt;&lt;/h2&gt;

&lt;h3 id=&#34;3-1-安装相关软件&#34;&gt;3.1 安装相关软件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;badvpn&lt;/li&gt;
&lt;li&gt;shadowsocks&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pacman -S badvpn shadowsocks
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-2-配置shadowsocks-略过&#34;&gt;3.2 配置shadowsocks（略过）&lt;/h3&gt;

&lt;p&gt;假设shadowsocks配置文件为/etc/shadowsocks.json&lt;/p&gt;

&lt;h3 id=&#34;3-3-获取中国ip段&#34;&gt;3.3 获取中国IP段&lt;/h3&gt;

&lt;p&gt;将以下命令写入脚本保存执行（假设保存在/home/yang/bin/路由表/目录下）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
wget -c http://ftp.apnic.net/stats/apnic/delegated-apnic-latest
cat delegated-apnic-latest | awk -F &#39;|&#39; &#39;/CN/&amp;amp;&amp;amp;/ipv4/ {print $4 &amp;quot;/&amp;quot; 32-log($5)/log(2)}&#39; | cat &amp;gt; /home/yang/bin/路由表/cn_rules.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-4-配置智能-dns-服务&#34;&gt;3.4 配置智能 DNS 服务&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h3 id=&#34;3-5-配置系统-dns-服务器设置&#34;&gt;3.5 配置系统 DNS 服务器设置&lt;/h3&gt;

&lt;p&gt;同上&lt;/p&gt;

&lt;h3 id=&#34;3-6-写路由表启动和终止脚本&#34;&gt;3.6 写路由表启动和终止脚本&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /usr/local/bin/socksfwd
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
SOCKS_SERVER=$SERVER_IP # SOCKS 服务器的 IP 地址
SOCKS_PORT=1081 # 本地SOCKS 服务器的端口
GATEWAY_IP=$(ip route|grep &amp;quot;default&amp;quot;|awk &#39;{print $3}&#39;) # 家用网关（路由器）的 IP 地址，你也可以手动指定
TUN_NETWORK_DEV=tun0 # 选一个不冲突的 tun 设备号
TUN_NETWORK_PREFIX=10.0.0 # 选一个不冲突的内网 IP 段的前缀


start_fwd() {
ip tuntap del dev &amp;quot;$TUN_NETWORK_DEV&amp;quot; mode tun
# 添加虚拟网卡
ip tuntap add dev &amp;quot;$TUN_NETWORK_DEV&amp;quot; mode tun
# 给虚拟网卡绑定IP地址
ip addr add &amp;quot;$TUN_NETWORK_PREFIX.1/24&amp;quot; dev &amp;quot;$TUN_NETWORK_DEV&amp;quot;
# 启动虚拟网卡
ip link set &amp;quot;$TUN_NETWORK_DEV&amp;quot; up
ip route del default via &amp;quot;$GATEWAY_IP&amp;quot;
ip route add &amp;quot;$SOCKS_SERVER&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
# 特殊ip段走家用网关（路由器）的 IP 地址（如局域网联机）
# ip route add &amp;quot;172.16.39.0/24&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
# 国内网段走家用网关（路由器）的 IP 地址
for i in $(cat /home/yang/bin/路由表/cn_rules.conf)
do
ip route add &amp;quot;$i&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
done
# 将默认网关设为虚拟网卡的IP地址
ip route add 0.0.0.0/1 via &amp;quot;$TUN_NETWORK_PREFIX.1&amp;quot;
ip route add 128.0.0.0/1 via &amp;quot;$TUN_NETWORK_PREFIX.1&amp;quot;
# 将socks5转为vpn
badvpn-tun2socks --tundev &amp;quot;$TUN_NETWORK_DEV&amp;quot; --netif-ipaddr &amp;quot;$TUN_NETWORK_PREFIX.2&amp;quot; --netif-netmask 255.255.255.0 --socks-server-addr &amp;quot;127.0.0.1:$SOCKS_PORT&amp;quot;
TUN2SOCKS_PID=&amp;quot;$!&amp;quot;
}


stop_fwd() {
ip route del 128.0.0.0/1 via &amp;quot;$TUN_NETWORK_PREFIX.1&amp;quot;
ip route del 0.0.0.0/1 via &amp;quot;$TUN_NETWORK_PREFIX.1&amp;quot;
for i in $(cat /home/yang/bin/路由表/cn_rules.conf)
do
ip route del &amp;quot;$i&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
done
ip route del &amp;quot;172.16.39.0/24&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
ip route del &amp;quot;$SOCKS_SERVER&amp;quot; via &amp;quot;$GATEWAY_IP&amp;quot;
ip route add default via &amp;quot;$GATEWAY_IP&amp;quot;
ip link set &amp;quot;$TUN_NETWORK_DEV&amp;quot; down
ip addr del &amp;quot;$TUN_NETWORK_PREFIX.1/24&amp;quot; dev &amp;quot;$TUN_NETWORK_DEV&amp;quot;
ip tuntap del dev &amp;quot;$TUN_NETWORK_DEV&amp;quot; mode tun
}



start_fwd
trap stop_fwd INT TERM
wait &amp;quot;$TUN2SOCKS_PID&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim /etc/systemd/system/socksfwd.service
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Unit]

Description=Transparent SOCKS5 forwarding

After=network-online.target

[Service]

Type=simple

ExecStart=/usr/local/bin/socksfwd

LimitNOFILE=1048576


[Install]

WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl start socksfwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开机自启&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ systemctl enable socksfwd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-7-打开流量转发&#34;&gt;3.7 打开流量转发&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/sysctl.d/30-ipforward.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;net.ipv4.ip_forward=1

net.ipv6.conf.all.forwarding = 1

net.ipv4.tcp_congestion_control=westwood

net.ipv4.tcp_syn_retries = 5

net.ipv4.tcp_synack_retries = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑完成后，执行以下命令使变动立即生效&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sysctl -p
&lt;/code&gt;&lt;/pre&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Istio CRD 汇总与 Helm Chart 配置解析</title>
      <link>https://www.yangcs.net/posts/istio-helm-chart-and-crd/</link>
      <pubDate>Tue, 18 Sep 2018 19:11:16 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/istio-helm-chart-and-crd/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;istio-中包含的-crd-总共-50-个-及其分类和用途&#34;&gt;Istio 中包含的 &lt;code&gt;CRD&lt;/code&gt;(总共 &lt;code&gt;50&lt;/code&gt; 个) 及其分类和用途&lt;/h3&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}
.tg .tg-baqh{text-align:center;vertical-align:top}
.tg .tg-0lax{text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&#34;tg&#34; style=&#34;undefined;table-layout: fixed; width: 1003px&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 67px&#34;&gt;
&lt;col style=&#34;width: 227px&#34;&gt;
&lt;col style=&#34;width: 367px&#34;&gt;
&lt;col style=&#34;width: 279px&#34;&gt;
&lt;col style=&#34;width: 63px&#34;&gt;
&lt;/colgroup&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-baqh&#34;&gt;﻿序号&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;名称&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;用途&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;分类&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;归属&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;1&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;virtualservices.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义virtual service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;networking&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;pilot&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;2&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;destinationrules.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义destination rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;3&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceentries.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义service entry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;4&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateways.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;5&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;envoyfilters.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;使用filter为特定envoy添加特定配置&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;6&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;policies.authentication.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authn，作用域为namespace&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;authentication&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;citadel&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;7&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshpolicies.authentication.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authn，作用域为global&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;8&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;httpapispecbindings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;apim&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;9&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;httpapispecs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;10&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotaspecbindings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;11&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotaspecs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;12&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rules.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer rule，用于绑定handler和instance&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer core&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;13&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributemanifests.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义envoy传递给mixer的用于policy和telemetry的attribute&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;14&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;bypasses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer adapter用于处理从envoy收集的数据&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;15&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;circonuses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义circonus adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;16&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deniers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义dinier adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;17&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;fluentds.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义fluentd adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;18&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetesenvs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义kubernetesenv adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;19&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;listcheckers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义list adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;20&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;memquotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义memquota adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;21&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;noops.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;22&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;opas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义opa adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;23&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheuses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义prometheus adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;24&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbacs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义rbac adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;25&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;redisquotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义redisquota adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;26&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicecontrols.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义servicecontrol adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;27&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;signalfxs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义signalfx adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;28&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;solarwindses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义solarwinds adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;29&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stackdrivers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义stackdriver adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;30&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;statsds.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义statsd adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;31&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdios.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义stdio adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;32&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;apikeys.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义apikey template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer instance用于定义从envoy收集的数据&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;33&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;authorizations.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义authorization template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;34&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;checknothings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义checknothing template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;35&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kuberneteses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义kubernetes template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;36&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;listentries.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义listentry template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;37&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;logentries.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义logentry template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;38&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;edges.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;39&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metrics.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义metric template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;40&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义quota template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;41&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;reportnothings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义reportnothing template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;42&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicecontrolreports.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义servicecontrolreport template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;43&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracespans.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义tracespan template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;44&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbacconfigs.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义istio的rbac策略&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbac&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;45&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceroles.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义service role&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;46&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicerolebindings.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义service role binding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;47&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;adapters.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;others&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;48&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;instances.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;49&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;templates.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;50&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handlers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;h3 id=&#34;istio-helm-chart-的安装配置解析&#34;&gt;Istio Helm Chart 的安装配置解析&lt;/h3&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}
.tg .tg-baqh{text-align:center;vertical-align:top}
.tg .tg-0lax{text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&#34;tg&#34; style=&#34;undefined;table-layout: fixed; width: 1290px&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 60px&#34;&gt;
&lt;col style=&#34;width: 161px&#34;&gt;
&lt;col style=&#34;width: 251px&#34;&gt;
&lt;col style=&#34;width: 214px&#34;&gt;
&lt;col style=&#34;width: 219px&#34;&gt;
&lt;col style=&#34;width: 385px&#34;&gt;
&lt;/colgroup&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-baqh&#34;&gt;﻿序号&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;chart&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;文件&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;k8s组件类型&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;k8s组件名称&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;用途&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;1&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;main&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_affinity.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义各个组件deployment chart中的nodeAffinity&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义各个组件chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio主配置configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;crds.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;CustomResourceDefinition&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;共50个&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio需要的所有的crd资源&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;install-custom-resources.sh.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana和security chart中configmap中所包含的脚本，验证istio-galley validatingwebhookconfiguration已经存在并且部署组件相关其他资源&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;sidecar-injector-configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecar injector的configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;2&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;sidecarInjectorWebhook默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector-admin-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mutatingwebhook.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;MutatingWebhookConfiguration&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的mutatingwebhookconfiguration&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-sidecar-injector-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义sidecarInjectorWebhook使用的serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;3&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;security默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义security chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;cleanup-secrets.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-cleanup-secrets-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在helm删除istio后对citadel中的secret进行清理&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-cleanup-secrets-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-cleanup-secrets-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Job&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-cleanup-secrets&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citadel相关clusterole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citdel相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-custom-resources&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citidel相关configmap，与global values中的mtls.enabled相关，是否启用全局的mtls authn&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;create-custom-resources-job.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-post-install-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的mtls.enabled设置为true后才会生效，建立mtls相关serviceaccount，clusterrole，clusterrolebinding，以及comfigmap中定义的其他相关对象&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-post-install-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-post-install-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Job&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-security-post-install&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citadel相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;enable-mesh-mtls.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;MeshPolicy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;default&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的mtls.enabled设置为true后，这些资源会写入configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;default&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;api-server&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-citadel&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的meshExpansion设置为true后，新建citadel相关virtualservice&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-ilb-citadel&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的meshExpansionILB设置为true后，新建citadel相关virtualservice&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citade相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-citadel-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义citade相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;4&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;galley默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley-admin-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley-configuration&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义galley相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;validatingwehookconfiguration.yaml.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ValidatingWebhookConfiguration&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-galley&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义对pilot和mixer的配置进行验证，与galley deployment关联&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;5&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;autoscale.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;HorizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer，包括policy和telemetry的horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;HorizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-mixer-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer相关clusterole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-mixer-admin-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer相关clusterolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;config.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributemanifest&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istioproxy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从envoy到mixer的attributemanifest&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributemanifest&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetes&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从k8s到mixer的attributemanifest&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdio&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义stdio handler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;logentry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;accesslog&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义http logentry instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;logentry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tcpaccesslog&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义tcp logentry instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdio&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从accesslog.logentry到handler.stdio的rule，将accesslog发送至stdio&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdiotcp&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从tcpaccesslog.logentry到handler.stdio的rule，将tcpaccesslog发送至stdio&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;requestcount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义requestcount metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;requestduration&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义requestduration metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;requestsize&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义requestsize metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;responsesize&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义responsesize metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tcpbytesent&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义tcpbytesent metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metric&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tcpbytereceived&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义tcpbytereceived metric instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus handler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;promhttp&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从requestcount.metric，requestduration.metric，requestsize.metric和responsesize.metric到handler.prometheus的rule，将http metric发送至prometheus&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;promtcp&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从tcpbytesent.metric和tcpbytereceived.metric到handler.prometheus的rule，将tcp metric发送至prometheus&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetesenv&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kubernetesenv handler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubeattrgenrulerule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从attributes.kubernetes到handler.kubernetesenv的rule，生成kubernetes相关attribute&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tcpkubeattrgenrulerule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义从attributes.kubernetes到handler.kubernetesenv的rule，生成kubernetes tcp相关attribute&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetes&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributes&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kubernetes相关attribute instance&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-policy相关destinationrule&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-telemetry相关destinationrule&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-statsd-prom-bridge&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-statsd-prom-bridge相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-policy相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-telemetry相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-policy相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-telemetry相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-mixer-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义mixer相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;statsdtoprom.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-statsd-prom-bridge&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-statsd-prom-bridge相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-statsd-prom-bridge&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义istio-statsd-prom-bridge相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;6&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;pilot默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;autoscale.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;horizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateway.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-autogenerated-k8s-ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关gateway，缺省向前兼容，使用ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关gateway，如果global.meshExpansion设置为true，则将pilot暴露在gateway&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-ilb-gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关gateway，如果global.meshExpansionILB设置为true，则将pilot暴露在internal gateway&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshexpansion-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的meshExpansion设置为true后，新建pilot相关virtualservice&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ilb-meshexpansion-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;在global values的meshExpansionILB设置为true后，新建pilot相关virtualservice&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-pilot-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义pilot相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;7&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateways默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;autoscale.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;horizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;horizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;horizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关horizontalpodautoscaler，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关clusterrole，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway-{{ $.Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关clusterrolebindig，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关deployment，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关service，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingressgateway-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingressgateway相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-egressgateway-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义egressgateway相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ilbgateway-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ilbgateway相关serviceaccount，默认关闭，只支持gcp&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;8&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus默认开启&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;9&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;telemetry-gateway默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateway.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-telemetry-gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus和grafana的gateway，如果prometheusEnabled设置为true，则添加prometheus相关gateway配置，如果grafanaEnabled设置为true，则添加grafana相关gateway配置&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义prometheus相关destinationrule&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;DestinationRule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheus&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义grafana相关destinationrule&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;VirtualService&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;telemetry-virtual-service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义prometheus和grafana的virtualservice，如果prometheusEnabled设置为true，则添加prometheus相关virtualservice配置，如果grafanaEnabled设置为true，则添加grafana相关virtualservice配置&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;10&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress默认关闭legacy ingress support&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;autoscale.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;HorizontalPodAutoscaler&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关horizontalpodautoscaler&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-ingress-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义ingress相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;11&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-custom-resources&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;create-custom-resources-job.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-post-install-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana post install相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-post-install-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana post install相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-post-install-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana post install相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Job&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-post-install&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana post install相关job&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana-ports-mtls.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Policy&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana-ports-mtls-disabled&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;对grafana访问开启mtls&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;pvc.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;PersistentVolumeClaim&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-grafana-pvc&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;如果persist设置为true，则为grafana新建pvc和pv&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;secret.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Secret&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;如果security.enabled设置为true，则为grafana启用authn&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;grafana&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义grafana相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;12&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicegraph默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义servicegraph chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicegraph&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义servicegraph相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicegraph&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义servicegraph相关ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicegraph&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义servicegraph相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;13&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracing默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义tracing chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-tracing&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress-jaeger.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;jaeger-query&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing相关ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracing&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义zipkin tracing相关ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service-jaeger.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;jaeger-query&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing query相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;jaeger-collector&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing collector相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;jaeger-agent&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing agent相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;zipkin&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义zipkin tracing相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracing&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义jaeger tracing相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;14&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrole.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterrolebinding.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;istio-kiali-admin-role-binding-{{ .Release.Namespace }}&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;configmap.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ConfigMap&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关configmap&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ingress.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Ingress&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关ingress&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;secrets.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Secret&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关secret&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;service.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关service&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceaccount.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kiali-service-account&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义kiali相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;15&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager默认关闭&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;_helpers.tpl&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;无&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager chart中一些变量的默认值&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;crds.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;CustomResourceDefinition&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;clusterissuers.certmanager.k8s.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关crd&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;CustomResourceDefinition&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;issuers.certmanager.k8s.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;CustomResourceDefinition&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certificates.certmanager.k8s.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deployment.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;Deployment&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关deployment&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;issuer.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterIssuer&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;letsencrypt-staging&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关clusterissuer&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterIssuer&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;letsencrypt&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbac.yaml&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRole&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关clusterrole&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ClusterRoleBinding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关clusterrolebinding&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-baqh&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;ServiceAccount&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;certmanager&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于定义certmanager相关serviceaccount&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>暴露 Istio Service Mesh 中的 Gateway</title>
      <link>https://www.yangcs.net/posts/expose-gateway-of-istio/</link>
      <pubDate>Mon, 17 Sep 2018 13:14:55 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/expose-gateway-of-istio/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;在之前的文章 &lt;a href=&#34;https://www.yangcs.net/posts/istio-ingress/&#34; target=&#34;_blank&#34;&gt;Istio 服务网格中的网关&lt;/a&gt; 中，我已经介绍了简单的暴露 &lt;code&gt;Ingress Gateway&lt;/code&gt; 的方案。当时的方案只是用于临时测试，不适合在大规模场景下使用，本文将探讨更加优化的暴露 Ingress Gateway 的方案。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-hostnetwork-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;HostNetwork&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;第一种方法比较简单，可以直接使用 &lt;code&gt;HostNetwork&lt;/code&gt; 模式运行 Ingress Gateway。但你会发现无法启动 ingressgateway 的 Pod，因为如果 Pod 设置了 &lt;code&gt;HostNetwork=true&lt;/code&gt;，则 dnsPolicy 就会从 &lt;code&gt;ClusterFirst&lt;/code&gt; 被强制转换成 &lt;code&gt;Default&lt;/code&gt;。而 Ingress Gateway 启动过程中需要通过 DNS 域名连接 &lt;code&gt;pilot&lt;/code&gt; 等其他组件，所以无法启动。&lt;/p&gt;

&lt;p&gt;我们可以通过强制将 &lt;code&gt;dnsPolicy&lt;/code&gt; 的值设置为 &lt;code&gt;ClusterFirstWithHostNet&lt;/code&gt; 来解决这个问题，详情参考：&lt;a href=&#34;https://www.yangcs.net/posts/kubernetes-dns/&#34; target=&#34;_blank&#34;&gt;Kubernetes DNS 高阶指南&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;修改后的 ingressgateway deployment 配置文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-ingressgateway
  namespace: istio-system
  ...
spec:
  ...
  template:
    metadata:
    ...
    spec:
      affinity:
        nodeAffinity:
          ...
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - 192.168.123.248   # 比如你想调度到这台主机上
      ...
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      restartPolicy: Always
      ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来我们就可以在浏览器中通过 Gateway 的 URL 来访问服务网格中的服务了。&lt;/p&gt;

&lt;p&gt;但是作为服务网格的流量接入层，Ingress Gateway 的高可靠性显得尤为重要，高可靠性首先要解决的就是单点故障问题，一般常用的是采用多副本部署的方式。而上述方案只适用于单实例（Deployment 的副本数为 1）的情况，为了适应多节点部署架构，需要寻求更好的暴露方案。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-使用-envoy-作为前端代理-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;使用 Envoy 作为前端代理&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;我们已经知道，Ingress Gateway 实际上内部运行的是 &lt;code&gt;Envoy&lt;/code&gt; 代理，我们可以在 Ingress Gateway 前面再加一层代理，这样就解决了高可用问题，你可以将 Ingress Gateway 的副本数扩展为多个，前端代理只需要通过 &lt;code&gt;Service Name&lt;/code&gt; 来连接后端的 Gateway 就行了。同时建议采用独占节点的方式部署前端代理，以避免业务应用与前端代理服务发生资源争抢。&lt;/p&gt;

&lt;p&gt;前端代理可以使用一般的负载均衡软件（如 &lt;code&gt;Haproxy&lt;/code&gt;、&lt;code&gt;Nginx&lt;/code&gt; 等），也可以使用 &lt;code&gt;Envoy&lt;/code&gt;。由于 Envoy 是 Istio Service Mesh 中默认的 data plane，所以这里推荐使用 Envoy。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34; target=&#34;_blank&#34;&gt;Envoy 官方&lt;/a&gt;提供了一组 Envoy 的用例，我们只需要用到其中的 &lt;code&gt;Dockerfile&lt;/code&gt;。首先克隆 Envoy 的代码仓库并转到 &lt;code&gt;examples/front-proxy&lt;/code&gt; 目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/envoyproxy/envoy
$ cd envoy/examples/front-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 &lt;code&gt;front-envoy.yaml&lt;/code&gt; 配置文件，修改后的内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.tcp_proxy  ①
        config:
          stat_prefix: ingress_tcp
          cluster: ingressgateway
          access_log:
            - name: envoy.file_access_log
              config:
                path: /dev/stdout
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 443
    filter_chains:
    - filters:
      - name: envoy.tcp_proxy
        config:
          stat_prefix: ingress_tcp
          cluster: ingressgateway_tls
          access_log:
            - name: envoy.file_access_log
              config:
                path: /dev/stdout
  clusters:
  - name: ingressgateway
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    hosts:
    - socket_address:
        address: istio-ingressgateway.istio-system  ②
        port_value: 80
  - name: ingressgateway_tls
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    hosts:
    - socket_address:
        address: istio-ingressgateway.istio-system
        port_value: 443
admin:
  access_log_path: &amp;quot;/dev/null&amp;quot;
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;① &lt;span id=&#34;inline-blue&#34;&gt;envoy.tcp_proxy&lt;/span&gt; 表示要实例化的过滤器的名称。该名称必须与内置支持的过滤器匹配，也就是说，该字段的值不可随意填写，必须使用指定的几个值。这里 &lt;code&gt;envoy.tcp_proxy&lt;/code&gt; 表示使用 TCP 代理。详情参考：&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/listener/listener.proto#listener-filter&#34; target=&#34;_blank&#34;&gt;listener.Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;② &lt;span id=&#34;inline-blue&#34;&gt;istio-ingressgateway.istio-system&lt;/span&gt; 表示 Ingress Gateway 在集群内部的 DNS 域名。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他配置解析请参考：&lt;a href=&#34;https://jimmysong.io/posts/envoy-archiecture-and-terminology/&#34; target=&#34;_blank&#34;&gt;Envoy 的架构与基本术语&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接下来通过 &lt;code&gt;Dockerfile-frontenvoy&lt;/code&gt; 和 &lt;code&gt;front-envoy.yaml&lt;/code&gt; 来构建 Docker 镜像，我们来看下该 Dockerfile 的内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM envoyproxy/envoy:latest

RUN apt-get update &amp;amp;&amp;amp; apt-get -q install -y \
    curl
CMD /usr/local/bin/envoy -c /etc/front-envoy.yaml --service-cluster front-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;/etc/front-envoy.yaml&lt;/code&gt; 是本地的 &lt;code&gt;front-envoy.yaml&lt;/code&gt; 挂载进去的。在 Kubernetes 中可以通过 &lt;code&gt;ConfigMap&lt;/code&gt; 来挂载，所以我们还要创建一个 ConfigMap：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl -n istio-system create cm front-envoy --from-file=front-envoy.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以将构建好的镜像 push 到私有镜像仓库中或者公共仓库中，也可以使用我已经上传好的镜像。&lt;/p&gt;

&lt;p&gt;最后我们就可以通过该镜像来部署前端代理了，需要创建一个 &lt;code&gt;Deployment&lt;/code&gt;，配置文件 &lt;code&gt;front-envoy-deploy.yaml&lt;/code&gt; 内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: front-envoy
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: front-envoy
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - 192.168.123.248 # 比如你想调度到这台主机上
      containers:
      - name: front-envoy
        image: yangchuansheng/front-envoy
        ports:
        - containerPort: 80
        volumeMounts:
        - name: front-envoy
          mountPath: /etc/front-envoy.yaml
          subPath: front-envoy.yaml
      hostNetwork: true
      volumes:
        - name: front-envoy
          configMap:
            name: front-envoy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以将镜像换成你自己的镜像，然后通过该 yaml 文件来部署：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl -n istio-system create -f front-envoy-deploy.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来我们就可以在浏览器中通过前端代理所在节点的 URL 来访问服务网格中的服务了。&lt;/p&gt;

&lt;p&gt;更一般的场景，我们还可以配置前端代理的高可用。对于 Kubernetes 集群以外只暴露一个访问入口，可以使用 &lt;code&gt;keepalived&lt;/code&gt; 排除单节点问题。具体实现方式与 Ingress 的高可用类似，可以参考 Ingress 的高可用方案。&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>干货与湿货分享第8期</title>
      <link>https://www.yangcs.net/posts/weekly-8/</link>
      <pubDate>Sat, 08 Sep 2018 12:32:27 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/weekly-8/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;style type=&#34;text/css&#34;&gt;
.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}
.tg .tg-0lax{text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class=&#34;tg&#34;&gt;
  &lt;tr&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;﻿序号&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;名称&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;用途&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;分类&lt;/th&gt;
    &lt;th class=&#34;tg-0lax&#34;&gt;归属&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;1&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;virtualservices.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义virtual service&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;networking&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;pilot&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;2&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;destinationrules.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义destination rule&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;3&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceentries.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义service entry&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;4&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;gateways.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于路由，定义gateway&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;5&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;envoyfilters.networking.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;使用filter为特定envoy添加特定配置&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;6&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;policies.authentication.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authn，作用域为namespace&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;authentication&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;citadel&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;7&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;meshpolicies.authentication.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authn，作用域为global&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;8&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;httpapispecbindings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;apim&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;9&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;httpapispecs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;10&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotaspecbindings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;11&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotaspecs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;12&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rules.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer rule，用于绑定handler和instance&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer core&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;13&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;attributemanifests.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义envoy传递给mixer的用于policy和telemetry的attribute&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;14&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;bypasses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer adapter用于处理从envoy收集的数据&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;15&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;circonuses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义circonus adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;16&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;deniers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义dinier adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;17&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;fluentds.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义fluentd adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;18&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kubernetesenvs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义kubernetesenv adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;19&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;listcheckers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义list adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;20&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;memquotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义memquota adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;21&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;noops.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;22&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;opas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义opa adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;23&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;prometheuses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义prometheus adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;24&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbacs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义rbac adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;25&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;redisquotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义redisquota adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;26&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicecontrols.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义servicecontrol adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;27&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;signalfxs.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义signalfx adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;28&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;solarwindses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义solarwinds adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;29&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stackdrivers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义stackdriver adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;30&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;statsds.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义statsd adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;31&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;stdios.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义stdio adapter&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;32&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;apikeys.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义apikey template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;mixer instance用于定义从envoy收集的数据&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;33&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;authorizations.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义authorization template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;34&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;checknothings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义checknothing template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;35&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;kuberneteses.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义kubernetes template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;36&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;listentries.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义listentry template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;37&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;logentries.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义logentry template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;38&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;edges.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;39&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;metrics.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义metric template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;40&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;quotas.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义quota template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;41&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;reportnothings.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义reportnothing template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;42&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicecontrolreports.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义servicecontrolreport template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;43&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;tracespans.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;定义tracespan template&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;44&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbacconfigs.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义istio的rbac策略&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;rbac&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;45&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;serviceroles.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义service role&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;46&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;servicerolebindings.rbac.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;用于authz，定义service role binding&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;47&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;adapters.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;others&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;48&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;instances.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;49&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;templates.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;50&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;handlers.config.istio.io&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
    &lt;td class=&#34;tg-0lax&#34;&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

这是《干货与湿货分享》系列的第8期，主要记录过去一周我所见到的听到的值得分享的东西。

近年来，传统计算机发展中已经逐渐遭遇功耗墙、通信墙等一系列问题，加上摩尔定律开始失效，芯片性能的增长开始放缓，传统计算机的性能增长潜力和增长速度都已大不如前。在这种情形下，探索全新物理原理的高性能计算技术的需求就应运而生。

量子计算的基本原理是以量子位作为信息编码和存储的基本单元，通过大量量子位的受控演化来完成计算任务。一般选用处于纠缠状态的量子，比如光子的两个偏振态、电子的两个自旋态、离子的两个能级来构建量子位。

想必很多人都听说过薛定谔的猫，而量子位就类似于那只猫的状态。一个量子位可以同时处于 0 状态和 1 状态，当量子系统的状态变化时，迭加的各个状态都可以发生变化。

相对于只能表示 0 和 1 的晶体管，量子位能同时表示0和1两个状态，这就使量子计算机在并行计算上具有巨大优势——毕竟N个量子位可同时存储 2 的 N 次方个数据，数据量随 N 呈指数增长。同时，量子计算机操作一次等效于电子计算机要进行 2 的 N 次方次操作的效果，等于是一次演化相当于完成了 2 的 N 次方个数据的并行处理，这是现在的电子计算机所不具备的。

这会导致什么后果呢？假如你要实现一个 300 位的一个大数的质因数分解，用传统计算机来算的话，你需要 **15 万年**。但是如果你用量子计算机来算，只需要一秒钟！那么，假如你用一秒钟就实现了大数的质因数分解，那你几乎可以破解世界上所有的银行。所以说，量子计算机出现了之后，对人类社会的冲击还是很大的。再比如现在比较火的比特币和区块链，如果量子计算机出现了之后，这些币就会井喷，井喷了之后，它的价值就没了，整个的生态就会崩溃。

为什么计算机很难有人的思维，因为人的思维是并行的，而计算机是单线的。如果我们有了量子计算机，也许就可以弄明白人的思维到底是怎么回事了，也许人最终的思维是量子化的，这个事看起来很神奇。

### &lt;p id=&#34;h2&#34;&gt;新闻&lt;/p&gt;

----

#### 1. [Google 为 Chrome 浏览器带来了全新 UI](http://bbs.chongbuluo.com/thread-5360-1-1.html)

![](http://o7z41ciog.bkt.clouddn.com/chromenewdesign.0.jpg)

2018 年 9 月 5 日，谷歌浏览器首次推出 10 年后，Chrome 焕然一新。新设计包括圆形和标签，清新的调色板和更新的图标。 Google 正在更新整个 Chrome 以包含此新用户界面，并更改地址栏中的提示，菜单和网址以匹配新设计。这是一场大修。

新的圆形标签可能是最引人注目的变化，将 Chrome 从多年来可用的类似梯形的标签移开。 Chrome 的新标签设计为一目了然，这对于那些喜欢在浏览器中打开过多标签的用户非常有用。

![](http://o7z41ciog.bkt.clouddn.com/chrome-new-ui.png)

#### 2. [Facebook 扩建门罗帕克总部](https://newsroom.fb.com/news/2018/09/expanding-our-home-in-menlo-park/)

![](http://o7z41ciog.bkt.clouddn.com/21-lobby-six.jpg)

为了继续招募人才，以支持其快速增长的业务，Facebook 将在其门罗帕克（Menlo Park）总部内建设一座新办公楼。这栋名为 MPK 21 的大楼由著名建筑师弗兰克·盖里（Frank Gehry）操刀，楼顶配有 3.6 英亩的花园，上面有 200 多棵树。整栋建筑都采用环保材料。

该公司还表示：“自己正在修建一座人行天桥，让骑自行车的人和行人可以安全地穿越高速公路，并将社区重新连接到海湾。”

![](http://o7z41ciog.bkt.clouddn.com/21-bowl-terrace.jpg)

#### 3. [科学家发明大数据传输算法，网速可提高 50%](https://www.7tin.cn/news/117311.html)

![](http://www.7tin.cn/wp-content/uploads/2018/09/20180904184143418-800x533.jpg)

近日，俄罗斯萨马拉大学与美国密苏里大学联合发表了一篇关于网络和业务管理的科研论文，论文中描述了一款新算法，使用这款算法可更快、更可靠地使用大数据处理中心。科研人员给这款算法起名为“The Neighborhoods Methods”(“近邻法”)，其原理就是寻找传输数据的最短路径。使用这种算法可以快速接入世界上最大的数据处理中心，对于解决科学理论和应用两个领域中需要高精度计算的问题可起到很好的帮助作用。

据悉，使用这款算法在传输高峰时，数据传输速度至少可提高 50%。此外，不同框架之间可使用这款算法分享数据和路径，不管使用什么网络连接，算法的功能都不会改变。

#### 4. [日本科技公司正组建“太空电梯”，火星救援不再是梦](http://mil.news.sina.com.cn/world/2018-09-04/doc-ihiqtcap0966287.shtml)

![](http://n.sinaimg.cn/mil/crawl/103/w550h353/20180904/SxNh-hiqtcap0951984.jpg)

“太空电梯”这个概念最初诞生于 19 世纪，是俄罗斯火箭科学家 Konstantin Tsiolkovsky 在看到了巴黎的埃菲尔铁塔后，脑中闪现的一个灵感。因此 Tsiolkovsky 提出了一种连接地球与静止轨道上的太空站之间的管道系统的想法，也就是**太空电梯**。

而近日，日本科学家将对太空电梯概念进行首次试验，这项试验将在 2018 年 9 月 11 日举行。试验内容为：从日本的种子岛太空中心向国际空间站发送两颗尺寸约为 10×10×10 厘米的超小型卫星，两颗卫星之间由 10 米长的钢绳链接，在钢绳上装有一个形似电梯的箱子。这两颗卫星在到达国际空间站后将被放入太空，日本的研究人员将尝试使用电机来移动钢绳上的箱子，用以模拟太空电梯的工作原理。

#### 5. [美国等国研究人员“重新编程”细胞，可使大伤口愈合如初](http://finance.sina.com.cn/roll/2018-09-06/doc-ihiixyeu4297975.shtml)

近日美国等国研究人员成功“重新编程”了伤口中的细胞，将其转化为皮肤细胞前体，从而有助于皮肤伤口愈合。这一技术还可用于修复皮肤损伤和抗衰老，也有助于进一步理解皮肤癌发病机理。

论文作者、美国索尔克研究所教授贝尔蒙特说，新方法不单单是单一类型细胞的再生，而是像皮肤这样的全三维组织的体内再生。这一方法将来也可为其他体内再生疗法提供指导。

#### 6. [六六用百度搜索遇骗子广告，微博质问李彦宏](https://tech.sina.com.cn/i/2018-09-06/doc-ihitesuz1641447.shtml)

![](http://n.sinaimg.cn/tech/transform/100/w602h298/20180906/luPY-fzrwica2605301.png)

作家六六今日发布微博称，她在百度上查一个上海美国领事馆官网的地址，翻了多少个都是骗子广告，最后不得已上谷歌，在谷歌上搜索出来的第一个就是美国领事馆官网的地址。作家六六在微博上@李彦宏称 ，你是做搜索引擎还是做骗子首领？

#### 7. [谷歌成立 20 周年，杜蕾斯发第一份贺电](http://www.expreview.com/63902.html)

![](http://img.expreview.com/news/2018/09/04/google.jpg)

20 年前谷歌公司成立，两个年轻人在车库里做了谷歌这个公司，20 年后的今天谷歌已经成长为全球互联网巨头，全年营收超过 1100 亿美元，在搜索引擎及移动操作系统上更是影响了无数人。

考虑到时差关系，国内媒体上似乎对谷歌成立 20 周年好像没啥动静呢，不过杜蕾斯官微这次率先行动了，给谷歌20周年纪念发来了第一份贺电——**学会 AI，你用了20年**。文案强大的杜蕾斯团队每次的双关语都很精妙，AI既可以当做“爱”，也可以当作谷歌目前的重点 AI 人工智能，而杜蕾斯包装与安卓机器人的形象更是神来之笔。

### &lt;p id=&#34;h2&#34;&gt;工具&lt;/p&gt;

----

#### 1. [Cowtransfer 奶牛快传](https://cowtransfer.com)

![](http://o7z41ciog.bkt.clouddn.com/9522885e588814f2.jpg)

Cowtransfer 奶牛快传不是一个网盘，官方给它的定位是大文件临时存放传输的工具网站。Cowtransfer 奶牛快传对标的是国外大文件中转站 Wetransfer，工作中邮箱无法发送的大文件可以使用此类网站传输。用户可以简单方便的上传文件分享给其他用户，最大支持 6 个文件同时上传，文件大小上限为 2G，文件可存放 7 天。

#### 2. [TrafficMonitor](https://github.com/zhongyang219/TrafficMonitor)

这是一个用于显示当前网速、CPU 及内存利用率的桌面悬浮窗软件，并支持任务栏显示，支持更换皮肤。

#### 3. [HTTPie](https://github.com/jakubroztocil/httpie)

![](http://o7z41ciog.bkt.clouddn.com/httpie.png)

HTTPie （读aych-tee-tee-pie）是一个 HTTP 的命令行客户端。其目标是让 CLI 和 web 服务之间的交互尽可能的人性化。这个工具提供了简洁的 http 命令，允许通过自然的语法发送任意 HTTP 请求数据，展示色彩化的输出。HTTPie 可用于与 HTTP 服务器做测试、调试和常规交互。

#### 4. [noti](https://github.com/variadico/noti)

![](http://o7z41ciog.bkt.clouddn.com/macos_banner.png)

这是一个进程完成时的通知工具，当一个进程需要长时间运行时，noti 可以使你不需要长时间等待，当任务完成时可以弹窗通知用户，用户不需要频繁地去检查终端的任务是否运行完毕，提高用户的工作效率。

#### 5. [Redis Desktop Manager](https://github.com/uglide/RedisDesktopManager)

![](http://o7z41ciog.bkt.clouddn.com/687474703a2f.png)

Redis Desktop Manager 是一款基于 Qt5 开发的 Redis 桌面管理工具，支持 SSH 连接。

#### 6. [公式字符化网站](http://webdemo.myscript.com/#/home)

你还在苦恼复杂的数学公式和化学方程式没办法用电脑打出来吗？有了这个神器，你就可以轻松地以手绘的方式画出来，交给电脑自动帮你转化哟！

#### 7. [Neofetch](https://github.com/dylanaraps/neofetch)

![](http://o7z41ciog.bkt.clouddn.com/neofetch1.png)

Neofetch 是在 BASH 中编写的 CLI 系统信息工具。Neofetch 显示您系统的镜像信息、操作系统 Logo、或者你选择的任意 ASCII 编码的文件。Neofetch 主要用与向其他用户以屏幕截图的方式展示您运行的系统，主题、图标等，支持 Linux，MacOS，iOS，BSD，Solaris，Android，Haiku，GNU Hurd，MINIX，AIX，IRIX 和 Windows（Cygwin / MSYS2 / MinGW / Windows 10 Linux 子系统）。

#### 8. [Vegeta](https://github.com/tsenart/vegeta)

Vegeta 是个 Go 语言编写的 http 服务压力测试工具，拥有各种参数支持，功能服务。支持 json 形式报告输出，同时支持 html 形式图形化报告生成。

### &lt;p id=&#34;h2&#34;&gt;教程&lt;/p&gt;

----

#### 1. [Spring Boot Examples](https://github.com/ityouknow/spring-boot-examples)

Spring Boot 教程、技术栈示例代码，快速简单上手教程。

#### 2. [Nginx 入门教程](https://github.com/xuexb/learn-nginx)

这是一个 Nginx 入门指南，包括: 编译安装、反向代理、重定向、重写、缓存、跨域配置等。

#### 3. [60_Days_RL_Challenge](https://github.com/andri27-ts/60_Days_RL_Challenge)

![](http://o7z41ciog.bkt.clouddn.com/logo5.png)

深度强化学习系列教程（视频）。

#### 4. [The Open Guide to Amazon Web Services](https://github.com/open-guides/og-aws)

亚马逊 Web Services 实用指南。

#### 5. [JavaScript 教程](https://wangdoc.com/javascript/)

本教程全面介绍 JavaScript 核心语法，从最简单的开始讲起，循序渐进、由浅入深，力求清晰易懂。所有章节都带有大量的代码实例，便于理解和模仿，可以用到实际项目中，即学即用。

本教程适合初学者当作 JavaScript 语言的入门教程，也适合当作日常使用的参考手册。

#### 6. [MacOS 的安全和隐私指南](https://github.com/drduh/macOS-Security-and-Privacy-Guide)

这里汇集了一些想法，它们是有关如何保护运行了 macOS 10.12 &#34;&#34;Sierra&#34;&#34; 操作系统（以前是 OS X）的现代化苹果 Mac 电脑，也包含了一些提高个人网络隐私的小贴士。

这份指南的目标读者是那些希望采用企业级安全标准的&#34;高级用户&#34;，但是也适用于那些想在 Mac 上提高个人隐私和安全性的初级用户们。

#### 7. [Markdown 简介](https://github.com/mzlogin/markdown-intro)

本文档的目的不在于面面俱到地介绍 Markdown，只是作为作者对其理解的笔记整理，希望能同时帮助一些对 Markdown 感兴趣的人快速上手，或是作为一个工具，供对其已经有所了解的人在需要时参考。

#### 8. [利用 LXCFS 提升容器资源可见性](https://yq.aliyun.com/articles/566208)

Linuxs 利用 Cgroup 实现了对容器的资源限制，但在容器内部依然缺省挂载了宿主机上的 procfs 的 /proc 目录，其包含如：meminfo, cpuinfo，stat， uptime 等资源信息。一些监控工具如 free/top 或遗留应用还依赖上述文件内容获取资源配置和使用情况。当它们在容器中运行时，就会把宿主机的资源状态读取出来，引起错误和不便。

本文将介绍如何在 Docker 和 Kubernetes 环境中解决遗留应用无法识别容器资源限制的问题。

### &lt;p id=&#34;h2&#34;&gt;资源&lt;/p&gt;

----

#### 1. [一些命令行工具的增强版](https://www.kawabangga.com/posts/3084)

本文要介绍的工具基本都是原来工具的增强版，也就是说原来工具有的，增强版也都有。因为习惯很难改变，所以完全可以用 alias 替换掉。

#### 2. [Hackintosh 黑苹果驱动 Clover](https://github.com/sqlsec/clover)

网友分享的一些黑苹果 Clover 驱动配置文件。

#### 3. [asd-price](http://asd-price.com/)

![](http://o7z41ciog.bkt.clouddn.com/d535aff2e2e98d72.jpg)

V2EX 网友制作的网站，可以方便快捷的查询各大电商网站的商品历史价格，支持的网站有：京东、淘宝、天猫、亚马逊、苏宁、一号店、当当、考拉、国美、蘑菇街、优购等。

#### 4. [Awesome Bookmarks](https://github.com/PanJiaChen/awesome-bookmarks)

Awesome Bookmarks 是 [Github Awesome](https://github.com/topics/awesome) 主题下的一个子话题，致力于整理并收集适用于主流的现代浏览器如 Google Chrome / Mozilla Firefox / Microsoft Edge 的书签。书签收集的方式是索引、分类和注释，旨在为搜索提供一个便捷高效的浏览器集成方案。

#### 5. [让 Firefox 界面变成 Chrome 的 Material Design 风格主题](http://www.apprcn.com/using-chrome-material-design-ui-in-firefox.html)

之前 Chrome 更新使用了新 UI 后有人喜欢有人不喜欢，而有些 Firefox 用户则是遗憾没有机会使用上 Material Design 风格主题。这不，就有开发者制作了一个 Firefox 主题，让你的 Firefox 浏览器也可以用上 Material Design 风格。

#### 6. [WebSiteUseful](WebSiteUseful)

![](http://o7z41ciog.bkt.clouddn.com/chuangkou.png)

科学上网，免费 ss 帐号分享、ssr 订阅源，免费 VPN 下载，获取及使用教程。就问你怕不怕？

#### 7. [Terminals Are Sexy](https://github.com/k4m4/terminals-are-sexy)

命令行工具和插件集合。

### &lt;p id=&#34;h2&#34;&gt;奇闻&lt;/p&gt;

----

#### 1. 中文屋思想实验

1980年，UCBerkley 的哲学教授 John Searle 发表了一篇题为 &#34;Minds, Brains and Programs&#34; 的论文。在这篇论文中，Searle 旗帜鲜明地反对图灵：他认为一个计算机程序通过图灵测试并不意味着它具有智能，而至多只能是对智能的一个模拟。为了论证自己的观点，Searle 提出了一个名为“中文屋”(Chinese Room)的思想实验。

这个思想实验的内容大概如下：

想象一个从小说英语但完全不会中文的人被反锁在一个房间里。房间里有一盒中文字卡片和一本规则书(rulebook)。这本规则用英文写就，告诉房间里的人一些如何操作汉字卡片的规则，但并没有告诉这个人任何一个中文字或者中文词句表示的含义。（注意，这本规则不是汉英字典！只是一个操作特定汉字卡片的规程）这本规则的本质其实是一个程序（任何一个图灵机上可运行的程序都可以被写成这样的一本规则书）。现在，房间外面有人向房间内递送纸条，纸条上用中文写了一些问题（输入）。假设房间内的规则书（程序）写得如此之好，以至于，房间里的人只要严格按照规则书操作，就可以用房间内的中文字卡片组合出一些词句（输出）来完美地回答输入的问题。于是，这个人提供的输出通过了关于“理解中文”这个心智状态的图灵测试。然而，Searle指出，这个人仍然一点不会中文。更进一步，在无论是在这个房间中，还是考虑这个房间整体，都找不到任何理解中文的心智存在(There is no mental state of understanding Chinese in the room)。因此，通过图灵测试并不意味着拥有智能或者心智。

![](http://o7z41ciog.bkt.clouddn.com/v2-8537fb2f832e09452f78cf35214f547c_hd.jpg)

这个论证在狭义上驳斥了图灵测试（Turing 1950），即即使我们没有找到机器和人的差别，机器依然是无心的，他没有理解意义的能力。但从广义来看，他对人类思维是类似计算机的计算或信息处理系统的理论造成了巨大威胁。毕竟，Searle 认为思想必须来自生物过程，计算机最多可以模拟这些生物过程。

但对于中文屋的反驳层出不穷，大致有三条思路：

1. 不能说塞尔不理解中文，而作出中文屋这个运行程序没有理解的结论。（系统应答和虚拟心灵应答）

    系统应答是最常见的应答（Searle 1980），它主张塞尔只是中文屋的一个CPU（Rey 1986），是个实施者（Kurzweil 2002），他处在更大的系统中，而 实施者的属性并不等于系统属性。所以说塞尔不懂中文，也就不能代表中文屋整个系统没有理解。就像是民间通俗版本的质问一样：难道中国人的细胞懂中文？显然不是。
    
    虚拟心灵应答认为我们没有必要纠结于塞尔是不是理解的实施者，更重要的是是否发生了理解。即问题不是在“系统理解中文”上，而应该只是“运行的系统能否创造对中文理解”。

2. 用中文处理程序确实不会产生理解，但对计算机系统的变体可以造成理解。可以为 CPU 配上传感器进行交互（机器人应答），也可以安装一个模拟大脑神经元操作的系统（脑模拟器应答）。

    塞尔确实不懂中文，但我们是否可以在机器人体内安装数字计算器，利用感受器和效应器作为和外部世界的交互，像小孩子一样通过观察和行动来学习呢？像这样，这些数字计算器就确确实实能赋予符号意义，理解自然语言。
    
    但塞尔认为增加的数字计算器只是额外的输入，它依旧只是语法输入，中文屋的塞尔仍然无法将意义和汉字进行联系。
    
    那假如有一种程序，它能够完全模拟一个理解中文的人的每一个神经，使得每次理解发生时，系统模拟的序列和那个理解中文的人的神经冲动系列完全相同，那么我们是不是就可以说系统理解中文了？

3. 在屋外人来看，塞尔只要通过汉字测试，他就算懂汉语（他心应答）。

    他心应答则认为，塞尔自己所具有的“我不懂中文”的主观直觉并不能作为他是否懂中文的标准。只要他没有表现出与中文使用者的差别（没有被识破），那么在旁观人的直觉看来塞尔就是懂中文的。
    
#### 2. 科学界的第一起谋杀案

故事发生在古希腊，公元前5世纪左右，那里出了一位非常著名的数学家-毕达哥拉斯。他证明许多重要的定理，包括以他的名字命名的**毕达哥拉斯定理**（我们中国人通常叫 勾股定理）。

当时很多人由于仰慕毕达哥拉斯的学术，成为了他的学生。毕达哥拉斯将他们组织到一起，成立了一个秘密会社， 人们叫做 **毕达哥拉斯学派**。

毕达哥拉斯学派 将数学知识运用得炉火纯青之后，觉得不能只满足于用来算题解题，于是他试着从数学领域扩大到哲学，用数的观点去解释一下世界。经过一番刻苦实践，他提出“万物皆为数”的观点：数的元素就是万物的元素，世界是由数组成的，世界上的一切没有不可以用数来表示的，数本身就是世界的秩序。他们的哲学甚至到了匪夷所思的地步， 比如: 用“二”表示意见，用“五”表示婚姻， 用“十”表示完美。

公元前500年，毕达哥拉斯学派的弟子希伯索斯（Hippasus）发现了一个惊人的事实: **若正方形的边长为1，则对角线的长度是测不出来的**。这个说法和毕达哥拉斯学派的观点严重冲突，因为他们认为万物皆可数，一个东西那么是整数 1， 2，5， 6， 7， 8，要么是两个整数的比值 5/6， 8/9， 5/18。

希伯索斯不但发现了“ 根号2 不可能表示成两个整数的比值”，而且给出了巧妙的证明：

![](http://o7z41ciog.bkt.clouddn.com/WechatIMG131.jpeg)

这一发现使该学派领导人惶恐，认为这将动摇他们在学术界的统治地位，于是极力封锁该真理的流传。希伯索斯被迫流亡他乡，不幸的是，在一条海船上还是遇到他的同学。结果被同学徒残忍地投入了水中杀害。

无理数的发现被称为 第一次数学危机。在此后的 2000 多年里， 其他地方的科学家也发现了 类似的不能用分数表示的数。比如印度，在7世纪发现了 无理数的 现象，埃及到了大约 9 世纪也发现了类似现象。在欧洲数学家对无理数进行了孜孜不倦的研究。比如： 哲学家芝诺，15 世纪的达芬奇，17 世纪的天文学家开普勒。直到 19 世纪，1872 年，德国数学家 戴德金从连续性的要求出发，才真正地对无理数有一个全面的认识，建立起实数理论。

#### 3. 能进行光合作用的动物

如果要评选世界奇葩生物，**海蛞蝓**绝对算一个。这类软体动物是雌雄同体，不仅“能攻能受”，还可以群体交配。它们也是偷窃大师，有的能用食物中的色素给皮肤换色，有的还会存储猎物的细胞。

它们当中，还有动物界的终极“死宅”——**绿叶海天牛**（Elysia chlorotica）。这种海蛞蝓不到 5 厘米长，能长达 9 个月甚至更长时间不吃东西，只用皮肤里的叶绿体进行光合作用。

![](http://o7z41ciog.bkt.clouddn.com/NLDIrQgKjiJo.jpg)

等等，动物哪来的叶绿体？而且这些叶绿体还有用？

答案并不颠覆你的生物常识，叶绿体是它们在啃食藻类时“偷”来的。按理说，叶绿体会被动物的肠胃破坏掉，或者遭到免疫系统的攻击。但绿叶海天牛能长期维持叶绿体，也不会受到它们的伤害——大部分动物都难以忍受光合作用产生的游离氧的浓度。

其实，也有其他种类的海蛞蝓能夺取藻类的叶绿体，用其捕获某些射线等，但它们需要不断更新叶绿体。这是因为叶绿体要消耗各种蛋白，而这些蛋白的相关基因在藻类的核基因中，叶绿体是无法自产自足的。

换句话说，要维持叶绿体的话，动物必须利用藻类基因或者藻类基因表达的产物。

绿叶海天牛似乎不用担心这一点。有研究表明，它们的基因组含有转移自藻类的基因，这些基因随着进食的过程发生转移。这是一种惊人的生化本领，我们或许可以用其操控人类或其他动物的基因。

不过也有研究者对此提出质疑，他们发现，绿叶海天牛的卵和幼虫体内已经存在藻类基因，这就意味着，这些基因可能是与生俱来的。

![](http://o7z41ciog.bkt.clouddn.com/YtjY9LrPpJ9qR.jpg)

#### 4. 曼德勃罗集

![](http://o7z41ciog.bkt.clouddn.com/WechatIMG26.jpeg)

曼德勃罗集可称是人类有史以来做出的最奇异、最瑰丽的几何图形，被人称为“上帝的指纹”、“魔鬼的聚合物”。这个点集均出自公式: $z_n+1=z_n^2+c$，这是一个迭代公式，式中的变量都是复数。这是一个大千世界，从他出发可以产生无穷无尽美丽图案，它是曼德勃罗教授在二十世纪七十年代发现的。只要你计算的点足够多，不管你把图案放大多少倍，都能显示出更加复杂的局部。这些局部既与整体不同,又有某种相似的地方，好像着梦幻般的图案具有无穷无尽的细节和自相似性。曼德勃罗教授称此为&#34;魔鬼的聚合物&#34;。为此，曼德勃罗在 1988 年获得了&#34;科学为艺术大奖&#34;。

![](http://o7z41ciog.bkt.clouddn.com/WechatIMG27.jpeg)

这其中的数学解析太复杂了，要凭我的能力来解释清楚，那有点勉为其难了。还是以轻松的心情来欣赏其中的美丽好了。但是之所以曼德勃罗集迷人，就在于这么一个简单的数学公式竟然能孕育出如此纷繁复杂的图形来。

曼德勃罗集的创造人更进一步发明了“碎形”的概念，区别于欧几里德式基于长度，深度，厚度上的古典几何学。碎形演绎的是一种自然几何学：在不规则中蕴藏着某种规则的秩序，却和尺寸无关，就算放大或缩小，其中的复杂程度并未因此减弱。碎形试图解释过去被科学忽略的非线性现象与大自然的复杂结构间的联系。

![](http://o7z41ciog.bkt.clouddn.com/WechatIMG30.jpeg)

真正有一种 “一沙一世界”的体验呢。

### &lt;p id=&#34;h2&#34;&gt;欢迎关注&lt;/p&gt;

----

该系列每周六发布，同步更新在我的[个人博客](https://www.yangcs.net/)和微信公众号上。

微信搜索 “云原生实验室” 或者扫描二维码即可关注。

![](http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg)

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Prometheus 中文文档</title>
      <link>https://www.yangcs.net/prometheus-handbook/</link>
      <pubDate>Fri, 07 Sep 2018 18:10:36 +0800</pubDate>
      
      <guid>https://www.yangcs.net/prometheus-handbook/</guid>
      <description>

&lt;h1 id=&#34;prometheus-中文文档&#34;&gt;Prometheus 中文文档&lt;/h1&gt;

&lt;p&gt;随着容器技术的迅速发展，Kubernetes 已然成为大家追捧的容器集群管理系统。&lt;a href=&#34;https://prometheus.io&#34; target=&#34;_blank&#34;&gt;Prometheus&lt;/a&gt; 作为生态圈 Cloud Native Computing Foundation（简称：CNCF）中的重要一员,其活跃度仅次于 Kubernetes, 现已广泛用于 Kubernetes 集群的监控系统中。&lt;/p&gt;

&lt;p&gt;本文是 Prometheus 官方文档的中文版，同时包括了本人平时在使用 Prometheus 时的参考指南和实践总结，形成一个系统化的参考指南以方便查阅。欢迎大家关注和添加完善内容。&lt;/p&gt;

&lt;h2 id=&#34;在线阅读&#34;&gt;在线阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Gitbook : &lt;a href=&#34;https://www.yangcs.net/prometheus/&#34; target=&#34;_blank&#34;&gt;https://www.yangcs.net/prometheus/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gitbook 新版 : &lt;a href=&#34;https://ryanyang.gitbook.io/prometheus/&#34; target=&#34;_blank&#34;&gt;https://ryanyang.gitbook.io/prometheus/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;项目源码&#34;&gt;项目源码&lt;/h2&gt;

&lt;p&gt;项目源码存放于 Github 上，&lt;a href=&#34;https://github.com/yangchuansheng/prometheus-handbook&#34; target=&#34;_blank&#34;&gt;https://github.com/yangchuansheng/prometheus-handbook&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;微信公众号&#34;&gt;微信公众号&lt;/h2&gt;

&lt;p&gt;扫码关注微信公众号，后续部分章节会在微信公众号中同步更新。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;贡献者&#34;&gt;贡献者&lt;/h2&gt;

&lt;p&gt;欢迎参与贡献和完善内容，贡献方法参考 &lt;a href=&#34;https://github.com/yangchuansheng/prometheus-handbook/blob/master/CONTRIBUTING.md&#34; target=&#34;_blank&#34;&gt;CONTRIBUTING&lt;/a&gt;。感谢所有的贡献者，贡献者列表见 &lt;a href=&#34;https://github.com/yangchuansheng/prometheus-handbook/graphs/contributors&#34; target=&#34;_blank&#34;&gt;contributors&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>干货与湿货分享第7期</title>
      <link>https://www.yangcs.net/posts/weekly-7/</link>
      <pubDate>Sat, 01 Sep 2018 17:49:18 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/weekly-7/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;这是《干货与湿货分享》系列的第7期，主要记录过去一周我所见到的听到的值得分享的东西。&lt;/p&gt;

&lt;p&gt;现在人工智能这么火，一个初创企业如果不加上点相关内容都不好意思叫自己是“创新企业”了，那么到底有多少企业是真正创新的呢？寥寥无几。最近有一位国外的互联网企业家向我们揭示了人工智能行业的骗局。&lt;/p&gt;

&lt;p&gt;我们有充分的理由相信，人工智能是技术领域最热门的流行词汇。它是已知历史上最具破坏性的技术，在人类成为进化树中的过去时之前，人工智能将成为人类的最终最终发明。但是炒作让人工智能成为一个广泛滥用的词。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;大多数 AI 创业公司都没有人工智能。&lt;/strong&gt;他们只是很简单地使用一些很平常的软件，然后贴上 AI 的标签，使他们的软件听起来更有趣。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;大多数聊天机器人都是简单的预构建对话树。&lt;/strong&gt;大多数 AI 机器人创业公司都是使用来自大公司的库和 API 来创建对话树，然后聊天机器人只是遵循预先构建的对话树，并没有使用机器学习等 AI 技术。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;很多伪 AI 产品。&lt;/strong&gt;很多公司通过人工助理来完成工作，比如人工处理邮件和会议，然后假装这些工作是由 AI 完成的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过这些谎言似乎可以快速帮助人们获得成功，一路走到顶峰，但是只有真正的技术进步才是实现信息和技术获取民主化的最公平的方式，人类的未来需要那些重视诚实和使命感而不是眼里只有金钱的人，他们才是我们最大的希望。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-新闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;新闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-mit-媒体实验室研究人员开发了水下无线通讯技术-https-scitechdaily-com-mit-media-lab-researchers-develop-wireless-underwater-to-air-communications&#34;&gt;1. &lt;a href=&#34;https://scitechdaily.com/mit-media-lab-researchers-develop-wireless-underwater-to-air-communications/&#34; target=&#34;_blank&#34;&gt;MIT 媒体实验室研究人员开发了水下无线通讯技术&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Wireless-Water-to-Air-Communications.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;麻省理工学院媒体实验室的研究人员设计了一个系统，允许水下的设备和飞机上的传感器直接共享数据。水下发射器将声呐信号引导到水面，然后产生与传输的 0 和 1 相对应的微小振动。在水面上方，高灵敏度的接收器读取这些微小的振动干扰并解码声呐信号。&lt;/p&gt;

&lt;h4 id=&#34;2-法国一公园训练乌鸦充当清洁工人-http-jandan-net-2018-08-26-rooks-corvids-html&#34;&gt;2. &lt;a href=&#34;http://jandan.net/2018/08/26/rooks-corvids.html&#34; target=&#34;_blank&#34;&gt;法国一公园训练乌鸦充当清洁工人&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/be5d1ecb7f7070f16bcc13353111a27b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;乌鸦是一种非常聪明的鸟类。它们能够制作并改良工具，会使用为它们特制的无人售卖机；现在这些长了羽毛的天才已经有了一份正式工作：在法国西部的 Puy du Fou 历史主题公园里，有6位雀形目鸦科鸦属的清洁工。&lt;/p&gt;

&lt;p&gt;每当Boubou，Bamboo，Bill，Black，Bricole和Baco往一个特殊的容器内放置烟头或其他小块垃圾时，员工就会洒下食物作为给鸟儿们的奖品。&lt;/p&gt;

&lt;h4 id=&#34;3-日本使用机器人来送寿司-https-yellrobot-com-sushi-autonomous-delivery-robots&#34;&gt;3. &lt;a href=&#34;https://yellrobot.com/sushi-autonomous-delivery-robots/&#34; target=&#34;_blank&#34;&gt;日本使用机器人来送寿司&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/CarriRo-Delivery.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;最近日本最受欢迎的寿司品牌 &lt;a href=&#34;https://www.ginsara.jp/&#34; target=&#34;_blank&#34;&gt;Gin no Sara&lt;/a&gt; 与机器人公司 &lt;a href=&#34;https://www.zmp.co.jp/en/products/carriro-delivery&#34; target=&#34;_blank&#34;&gt;ZMP&lt;/a&gt; 合作，通过机器人来给人们送午餐。这个可爱的机器人名叫 CarriRo，它有一个大大的眼睛，闪烁着蓝色的灯光，看起来像一个卡通娃娃，所以它在人行道上来回走动时不会吓到路人。它身高 3 英尺，使用相机和激光传感器来进行导航，运行时长可达 8 小时，期间可以送大约 60 份的寿司，白天或晚上都可以工作。&lt;/p&gt;

&lt;h4 id=&#34;4-在人和老鼠的免疫系统中发现了一种全新的-微器官-http-jandan-net-2018-08-26-lymph-node-html&#34;&gt;4. &lt;a href=&#34;http://jandan.net/2018/08/26/lymph-node.html&#34; target=&#34;_blank&#34;&gt;在人和老鼠的免疫系统中发现了一种全新的「微器官 」&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/1b9c50bb1794d58a1eaf5b61668d864c.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;基于几个世纪的临床经验，我们知道身体一旦遇到特定类型的感染，下次就能更好地免疫它。最近研究人员在小鼠的免疫系统淋巴结顶部发现了一种薄而扁平的结构，他们将其称为“包膜下增殖病灶”(简称SPF)。这项新的研究表明，新的微器官可能是我们身体“记忆”感染产生免疫的关键。这些 SPF 似乎像生物体内国土安全局的特别行动小组一样，负责规划打击入侵的微生物。&lt;/p&gt;

&lt;h4 id=&#34;5-1973-年-mit-一模型做出预言-文明将在-2040-年走到终点-http-jandan-net-2018-08-31-limits-growth-html&#34;&gt;5. &lt;a href=&#34;http://jandan.net/2018/08/31/limits-growth.html&#34; target=&#34;_blank&#34;&gt;1973 年 MIT 一模型做出预言：文明将在 2040 年走到终点&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/f6d21a32e75485295d54e4269149e624.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;20 世纪 70 年代初期，麻省理工学院的研究人员受到一个名为罗马俱乐部的精英组织的委托，预测在有限的行星资源下，全球增长的未来是什么样的。该模型考察了最有可能影响人类社会全体的五大因素：人口增长、农业生产、不可再生资源枯竭、工业产出和环境污染，使用一种名为 World3 的精致的计算机模型——基于 Forrester 最初的 World1 系统——研究人员计算出，沿着“一切照旧”的轨迹，我们的社会将在本世纪的某个时间点遭遇真正的崩溃。&lt;/p&gt;

&lt;p&gt;几十年以来，研究表明，这一开创性模型所做的许多预测都是准确的，有些人甚至认为我们应该做好迎接“很快就会出现的全球崩溃的早期阶段”的准备。你可以查看 &lt;a href=&#34;https://www.youtube.com/watch?v=cCxPOqwCr1I&#34; target=&#34;_blank&#34;&gt;youtube 上面的视频&lt;/a&gt;，看看世界在1973年的样子——记住，从现在开始有所作为永远不会太晚。&lt;/p&gt;

&lt;h4 id=&#34;6-声音也是一种粒子-还带有负质量-http-jandan-net-2018-08-24-negative-gravity-html&#34;&gt;6. &lt;a href=&#34;http://jandan.net/2018/08/24/negative-gravity.html&#34; target=&#34;_blank&#34;&gt;声音也是一种粒子，还带有负质量？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/3e73965317efb9c2665c33662f36f8fb.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;我们所知道的宏观世界受牛顿运动和引力定律所支配，但是，哥伦比亚大学的物理学家团队提交一篇新论文，冲击了我们头脑中的固有观念。他们说实际上可能存在具有负质量的粒子——它们在重力作用下向上而不是向下运动——就在我们的身边。根据论文，他们指的并非是某种神奇的亚原子结构，而是我们每天听到并制造的声音“粒子”——声子——它们反抗重力，负质量的粒子产生微小的负引力场，在重力场中被推向远方。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-工具-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;工具&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-videofk-https-www-videofk-com&#34;&gt;1. &lt;a href=&#34;https://www.videofk.com/&#34; target=&#34;_blank&#34;&gt;Videofk&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/QQ20180822-153658.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Videofk 是一款用来下载流媒体视频网站的视频文件的工具，支持包括快手、梨视频、微博、B站、YouTube、Instagram、Vimeo、汤不热等站点的视频下载。&lt;/p&gt;

&lt;h4 id=&#34;2-easy-to-rss-https-chrome-google-com-webstore-detail-easy-to-rss-hbcmpkcpbnecinpngdnfbnknfkdpdfli&#34;&gt;2. &lt;a href=&#34;https://chrome.google.com/webstore/detail/easy-to-rss/hbcmpkcpbnecinpngdnfbnknfkdpdfli&#34; target=&#34;_blank&#34;&gt;Easy to RSS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/demo-rsshub.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Easy-to-RSS 是一个支持 RSSHub 的一键式发现当前网页 RSS 的 chrome 扩展。&lt;/p&gt;

&lt;h4 id=&#34;3-winds-https-github-com-getstream-winds&#34;&gt;3. &lt;a href=&#34;https://github.com/GetStream/Winds&#34; target=&#34;_blank&#34;&gt;Winds&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/7562e706e67.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;由 Getstream.io 提供的订阅 RSS 和 Podcast 的 APP，支持 Windows、MacOS 和 Linux 平台。&lt;/p&gt;

&lt;h4 id=&#34;4-finalshell-https-liyuans-com-2018-08-finalshell-html&#34;&gt;4. &lt;a href=&#34;https://liyuans.com/2018/08/finalshell.html&#34; target=&#34;_blank&#34;&gt;FinalShell&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/WechatIMG52.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;可替代 Xshell 的 SSH 工具，支持 Linux、Windows、Mac，免费海外服务器远程桌面加速、ssh加速、双边tcp加速、内网穿透。&lt;/p&gt;

&lt;h4 id=&#34;5-monlor-tools-https-github-com-monlor-monlor-tools&#34;&gt;5. &lt;a href=&#34;https://github.com/monlor/Monlor-Tools&#34; target=&#34;_blank&#34;&gt;Monlor-Tools&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/img.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;小米路由器 Shell 工具箱，支持 Shadowsocks、Aria2、KoolProxy 等插件。&lt;/p&gt;

&lt;h4 id=&#34;6-gsil-https-github-com-feeicn-gsil&#34;&gt;6. &lt;a href=&#34;https://github.com/FeeiCN/GSIL&#34; target=&#34;_blank&#34;&gt;GSIL&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;GitHub 敏感信息泄露监控，近实时监控 GitHub 敏感信息泄露，并发送告警通知。&lt;/p&gt;

&lt;h4 id=&#34;7-shyaml-https-github-com-0k-shyaml&#34;&gt;7. &lt;a href=&#34;https://github.com/0k/shyaml&#34; target=&#34;_blank&#34;&gt;shyaml&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;格式化 YAML 文件输出的命令行工具，与 jq 类似（jq 用来格式化 json 文件输出）。&lt;/p&gt;

&lt;h4 id=&#34;8-gatsby-https-github-com-gatsbyjs-gatsby&#34;&gt;8. &lt;a href=&#34;https://github.com/gatsbyjs/gatsby&#34; target=&#34;_blank&#34;&gt;gatsby&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个静态网站生成器，能够让你在不考虑数据源的情况下构建快速响应的网站。&lt;/p&gt;

&lt;h4 id=&#34;9-mortar-https-github-com-kontena-mortar&#34;&gt;9. &lt;a href=&#34;https://github.com/kontena/mortar&#34; target=&#34;_blank&#34;&gt;Mortar&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/kontena-mortar.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Mortar 是一个用来轻松处理复杂的 Kubernetes 资源的工具。对于大多数简单的使用场景，我们只需要通过 &lt;code&gt;kubectl apply -f some_folder/&lt;/code&gt; 来管理资源就行了，但在 CI/CD pipeline 中，情况将会变得很复杂。然而通过 Helm 仓库来编写组织所有资源又太繁琐了，因此就诞生了 Mortar。&lt;/p&gt;

&lt;h4 id=&#34;10-docusaurus-https-github-com-facebook-docusaurus&#34;&gt;10. &lt;a href=&#34;https://github.com/facebook/Docusaurus&#34; target=&#34;_blank&#34;&gt;Docusaurus&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;易于维护的开源文档网站，由 Facebook 开源。&lt;/p&gt;

&lt;h4 id=&#34;11-boss-https-github-com-crosbymichael-boss&#34;&gt;11. &lt;a href=&#34;https://github.com/crosbymichael/boss&#34; target=&#34;_blank&#34;&gt;boss&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;基于 Containerd 开发的容器平台。&lt;/p&gt;

&lt;h4 id=&#34;12-ebpf-exporter-https-github-com-cloudflare-ebpf-exporter&#34;&gt;12. &lt;a href=&#34;https://github.com/cloudflare/ebpf_exporter&#34; target=&#34;_blank&#34;&gt;ebpf_exporter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;由 Cloudflare 提供的用来收集 ePBF 监控指标的 Prometheus exporter。&lt;/p&gt;

&lt;h4 id=&#34;13-modsecurity-envoy-https-github-com-octarinesec-modsecurity-envoy&#34;&gt;13. &lt;a href=&#34;https://github.com/octarinesec/ModSecurity-envoy&#34; target=&#34;_blank&#34;&gt;ModSecurity-envoy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;ModSecurity-Envoy 是使用运行 ModSecurity（V3）的 HTTP 过滤器编译的 Envoy 版本。&lt;/p&gt;

&lt;h4 id=&#34;14-shuttle-https-github-com-sipt-shuttle&#34;&gt;14. &lt;a href=&#34;https://github.com/sipt/shuttle&#34; target=&#34;_blank&#34;&gt;Shuttle&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/shuttle.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Shuttle 是一个基于 Go 开发的全平台 ss-local 工具，具有代理、多服务器选择、HTTP/HTTPS 抓包、独立 DNS 解析机制，目标为开发者提供便利。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-教程-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;教程&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-什么是-istio-http-cizixs-com-2018-08-26-what-is-istio&#34;&gt;1. &lt;a href=&#34;http://cizixs.com/2018/08/26/what-is-istio&#34; target=&#34;_blank&#34;&gt;什么是 istio&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;如果你比较关注新兴技术的话，那么很可能在不同的地方听说过 istio，并且知道它和 service mesh 有着牵扯。这篇文章是作者之前在公司内部做过的分享，可以作为了解 istio 的入门介绍，了解什么是 istio，istio 为什么最近这么火，以及 istio 能够我们带来什么好处。&lt;/p&gt;

&lt;h4 id=&#34;2-ethereum-development-with-go-https-github-com-miguelmota-ethereum-development-with-go-book&#34;&gt;2. &lt;a href=&#34;https://github.com/miguelmota/ethereum-development-with-go-book&#34; target=&#34;_blank&#34;&gt;Ethereum Development with Go&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/ethereum-development-with-go.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是一本描述了如何通过 Go 语言来开发以太坊的小册子。&lt;/p&gt;

&lt;h4 id=&#34;3-openshift-和-kubernetes-之间最重要的10个区别-https-cloudowski-com-articles-10-differences-between-openshift-and-kubernetes&#34;&gt;3. &lt;a href=&#34;https://cloudowski.com/articles/10-differences-between-openshift-and-kubernetes/&#34; target=&#34;_blank&#34;&gt;OpenShift 和 Kubernetes 之间最重要的10个区别&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;OpenShift 经常被其供应商 Red Hat 称为“企业级 Kubernetes”。本文描述了 OpenShift 和 Kubernetes 之间的真正差异。&lt;/p&gt;

&lt;h4 id=&#34;4-go-语言的内存分配与垃圾回收-https-about-sourcegraph-com-go-gophercon-2018-allocator-wrestling&#34;&gt;4. &lt;a href=&#34;https://about.sourcegraph.com/go/gophercon-2018-allocator-wrestling/&#34; target=&#34;_blank&#34;&gt;Go 语言的内存分配与垃圾回收&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Go 语言是一种内存托管语言，大多数情况下你不必手动管理内存，因为很多工作已经由 Go runtime 为你做好了。但是动态内存分配并不是完全没有代价的，有时候会严重影响程序性能。本文介绍了可用于检测和解决内存分配瓶颈的技术和工具。&lt;/p&gt;

&lt;h4 id=&#34;5-从零开始写区块链-https-github-com-opensourcebooks-blockchain&#34;&gt;5. &lt;a href=&#34;https://github.com/OpensourceBooks/blockchain&#34; target=&#34;_blank&#34;&gt;从零开始写区块链&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本教程用来说明，如何用 Python 语言来写一个区块链。&lt;/p&gt;

&lt;h4 id=&#34;6-构建一个计算器-https-tutorialedge-net-golang-go-webassembly-tutorial&#34;&gt;6. &lt;a href=&#34;https://tutorialedge.net/golang/go-webassembly-tutorial/&#34; target=&#34;_blank&#34;&gt;构建一个计算器&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本文介绍了如何使用 Go 和 WebAssembly 来构建前端应用程序。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-资源-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;资源&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-虫部落快搜-http-search-chongbuluo-com&#34;&gt;1. &lt;a href=&#34;http://search.chongbuluo.com/&#34; target=&#34;_blank&#34;&gt;虫部落快搜&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Jietu20180901-163120.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这个网站真的无所不能，大家看图片就知道了，你想查的所有的东西基本上都能在这上面找到，查字体，查文献，查ACG资源，电子书资源，GitHub程序，论文数据，你想要的全都有！&lt;/p&gt;

&lt;h4 id=&#34;2-美剧在线看-http-moviesunus01-com&#34;&gt;2. &lt;a href=&#34;http://moviesunus01.com/&#34; target=&#34;_blank&#34;&gt;美剧在线看&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在如今的时代，WiFi遍地都是，我们更加倾向于在线看视频，由于某些特殊的原因，如今在各大视频网站想找到你想看的美剧资源越来越难了，我们更多地是在网盘里讨生活，这个网站提供了绝大多数主流美剧的在线观看，绝对能满足很多人的追剧需求。&lt;/p&gt;

&lt;h4 id=&#34;3-youtube-频道推荐-https-zhuanlan-zhihu-com-p-20061774&#34;&gt;3. &lt;a href=&#34;https://zhuanlan.zhihu.com/p/20061774&#34; target=&#34;_blank&#34;&gt;YouTube 频道推荐&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;YouTube 不仅仅是一个视频网站，它和国内的优酷等网站完全不是同一种东西，就像 Google 和百度，Facebook 和人人的关系类似。很多人也许不知道，YouTube 上除了搞笑视频、猫咪视频、MTV 之外还有许多高质量的科普。这些科普频道兼顾专业性、科学性（科普的“科”）和娱乐性、生活性（科普的“普”），制作精良，诚意十足，堪称科普的优秀范本。不管你是喜欢科普知识，还是纯粹猎奇，还是科普从业或相关人士，这些频道都非常值得关注。&lt;/p&gt;

&lt;h4 id=&#34;4-发现导航-v2-https-github-com-xjh22222228-nav&#34;&gt;4. &lt;a href=&#34;https://github.com/xjh22222228/nav&#34; target=&#34;_blank&#34;&gt;发现导航 - V2&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个采用三叉树分类的导航网站，现在还在不断的完善和新增当中，每天保持3+。&lt;/p&gt;

&lt;h4 id=&#34;5-awesome-chinese-podcasts-https-github-com-fffx-awesome-chinese-podcasts&#34;&gt;5. &lt;a href=&#34;https://github.com/fffx/awesome-chinese-podcasts&#34; target=&#34;_blank&#34;&gt;awesome-chinese-podcasts&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;收集了比较高质量的中文播客。&lt;/p&gt;

&lt;h4 id=&#34;6-每日一题-http-daily-letechinfo-com&#34;&gt;6. &lt;a href=&#34;http://daily.letechinfo.com/&#34; target=&#34;_blank&#34;&gt;每日一题&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;程序员面试的题目网站，每日公布一个面试题。&lt;/p&gt;

&lt;h4 id=&#34;7-ml-from-scratch-https-github-com-eriklindernoren-ml-from-scratch&#34;&gt;7. &lt;a href=&#34;https://github.com/eriklindernoren/ML-From-Scratch&#34; target=&#34;_blank&#34;&gt;ML-From-Scratch&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一些基本的机器学习模型和算法的 Python 实现。&lt;/p&gt;

&lt;h4 id=&#34;8-telegram-电影下载资源频道&#34;&gt;8. Telegram 电影下载资源频道&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;帮找资源: &lt;a href=&#34;https://t.me/lovesource&#34; target=&#34;_blank&#34;&gt;https://t.me/lovesource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;美剧资源推送: &lt;a href=&#34;https://t.me/SSKMJBTS&#34; target=&#34;_blank&#34;&gt;https://t.me/SSKMJBTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sync资源更新: &lt;a href=&#34;https://t.me/shenkey&#34; target=&#34;_blank&#34;&gt;https://t.me/shenkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;蓝光电影频道: &lt;a href=&#34;https://t.me/voidrss&#34; target=&#34;_blank&#34;&gt;https://t.me/voidrss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;中国高清电影: &lt;a href=&#34;https://t.me/CNHDTV&#34; target=&#34;_blank&#34;&gt;https://t.me/CNHDTV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CosPlay R18 索引频道: &lt;a href=&#34;https://t.me/CosR18&#34; target=&#34;_blank&#34;&gt;https://t.me/CosR18&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;9-powerlevel9k-https-github-com-bhilburn-powerlevel9k&#34;&gt;9. &lt;a href=&#34;https://github.com/bhilburn/powerlevel9k&#34; target=&#34;_blank&#34;&gt;Powerlevel9k&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Powerlevel9k 是使用 Powerline 字体的 Zsh 主题，它可以用于 Zsh 或者 Zsh 框架，如 Oh-My-Zsh、Prezto、 Antigen 等。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-文摘-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;文摘&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-王小波-什么样的生活值得一过&#34;&gt;1. 王小波：什么样的生活值得一过？&lt;/h4&gt;

&lt;p&gt;人从工作中可以得到乐趣，这是一种巨大的好处。&lt;/p&gt;

&lt;p&gt;我知道在中国，农村的人把生儿育女看作是一生的主题。&lt;/p&gt;

&lt;p&gt;把儿女养大，自己就死掉，给他们空出地方来——这是很流行的想法。在城市里则另有一种想法，但不知是不是很流行：它把取得社会地位看作一生的主题。&lt;/p&gt;

&lt;p&gt;站在北京八宝山的骨灰墙前，可以体会到这种想法。&lt;/p&gt;

&lt;p&gt;我在那里看到一位已故的大叔墓上写着：副系主任、支部副书记、副教授、某某教研室副主任，等等。假如能把这些“副”字去掉个把，对这位大叔当然更好一些，但这些“副”字最能证明有这样一种想法。&lt;/p&gt;

&lt;p&gt;顺便说一句，我到美国的公墓里看过，发现他们的墓碑上只写两件事：一是生卒年月，二是某年至某年服兵役。&lt;/p&gt;

&lt;p&gt;这就是说，他们以为人的一生只有这两件事值得记述：这位上帝的子民曾经来到尘世，以及这位公民曾去为国尽忠，写别的都是多余的，我觉得这种想法比较质朴……恐怕在一份青年刊物上写这些墓前的景物是太过伤感，还是及早回到正题上来罢。&lt;/p&gt;

&lt;p&gt;我想要把自己对人生的看法推荐给青年朋友们：人从工作中可以得到乐趣，这是一种巨大的好处。&lt;/p&gt;

&lt;p&gt;根据我的经验，人在年轻时，最头疼的一件事就是决定自己这一生要做什么。在这方面，我倒没有什么具体的建议：干什么都可以，但最好不要写小说，这是和我抢饭碗。&lt;/p&gt;

&lt;p&gt;当然，假如你执意要写，我也没理由反对。总而言之，干什么都是好的；但要干出个样子来，这才是人的价值和尊严所在。&lt;/p&gt;

&lt;p&gt;人在工作时，不单要用到手、腿和腰，还要用脑子和自己的心胸。我总觉得国人对这后一方面不够重视，这样就会把工作看成是受罪。失掉了快乐最主要的源泉，对生活的态度也会因之变得灰暗……&lt;/p&gt;

&lt;p&gt;人活在世上，不但有身体，还有头脑和心胸——对此请勿从解剖学上理解。&lt;/p&gt;

&lt;p&gt;人脑是怎样的一种东西，科学还不能说清楚。&lt;/p&gt;

&lt;p&gt;心胸是怎么回事就更难说清。对我自己来说，心胸是我在生活中想要达到的最低目标。&lt;/p&gt;

&lt;p&gt;某件事有悖于我的心胸，我就认为它不值得一做；某个人有悖于我的心胸，我就觉得他不值得一交；某种生活有悖于我的心胸，我就会以为它不值得一过。&lt;/p&gt;

&lt;p&gt;罗素先生曾言，对人来说，不加检点的生活，确实不值得一过。我同意他的意见：不加检点的生活，属于不能接受的生活之一种。&lt;/p&gt;

&lt;p&gt;人必须过他可以接受的生活，这恰恰是他改变一切的动力。&lt;/p&gt;

&lt;p&gt;人有了心胸，就可以用它来改变自己的生活。&lt;/p&gt;

&lt;p&gt;中国人喜欢接受这样的想法：只要能活着就是好的，活成什么样子无所谓。从一些电影的名字就可以看出来：《活着》、《找乐》……我对这种想法是断然地不赞成，因为抱有这种想法的人就可能活成任何一种糟糕的样子，从而使生活本身失去意义。&lt;/p&gt;

&lt;p&gt;高尚、清洁、充满乐趣的生活是好的，人们很容易得到共识。卑下、肮脏、贫乏的生活是不好的，这也能得到共识。但只有这两条远远不够。&lt;/p&gt;

&lt;p&gt;我以写作为生，我知道某种文章好，也知道某种文章坏。仅知道这两条尚不足以开始写作。&lt;/p&gt;

&lt;p&gt;还有更加重要的一条，那就是：某种样子的文章对我来说不可取，绝不能让它从我笔下写出来，冠以我的名字登在报刊上。以小喻大，这也是我对生活的态度。&lt;/p&gt;

&lt;h4 id=&#34;2-俞敏洪8月25日在亚布力论坛上的演讲节选&#34;&gt;2. 俞敏洪8月25日在亚布力论坛上的演讲节选&lt;/h4&gt;

&lt;p&gt;我们几乎所有的互联网公司做的都是国内的生意，而且都是利用了人们的低级趣味，不管是拼多多，包括阿里巴巴和腾讯，都是利用了中国人民喜欢买卖东西、喜欢互相八卦的这样的低级趣味，如果有哪一家科技公司创造出了真正的影响全世界的科技产品才是牛逼的。现在阿里巴巴有一点这样的苗头，但是如何真正升级为世界重要的经济体才是重要的。人工智能等技术极有可能催生出世界级别的产品来，中国有大数据的优势，人工智能基于的是大数据，但是到底能不能起来就看我们这些企业家的高度如何了。如果高度不够，依然是想着从老百姓身上的低级趣味赚钱，那我们依然永远起不来。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-奇闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;奇闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-达-芬奇在-1492-年设计的冰箱-https-www-bbc-co-uk-news-blogs-news-from-elsewhere-33478364&#34;&gt;1. &lt;a href=&#34;https://www.bbc.co.uk/news/blogs-news-from-elsewhere-33478364&#34; target=&#34;_blank&#34;&gt;达·芬奇在 1492 年设计的冰箱&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/_84198753_met.provincia.fi.it.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;&lt;em&gt;达·芬奇设计的冰箱原型&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;人类历史上公认的旷世奇才只有两个人，一个是发明了交流电的尼古拉•特斯拉，另一个就是&lt;strong&gt;莱昂纳多•达芬奇&lt;/strong&gt;。在我看来，达·芬奇更加传奇一些，当他在给中世纪意大利贵族画肖像时，他就在研究如何冷藏他们的饮料。他的概念图中描绘了把空气泵入三个皮革腔室的复杂的风箱系统，它们通过18个喷管把空气快速地压进中间的空间，要冷却的容器就在存放在那里。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/13094240pvy5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;em&gt;制冷机的详细图纸&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;以现代眼光来看，达·芬奇的设备看似笨重——占这么多空间只制一点点冷。但我们生活在充斥琳琅满目的高科技冷藏冷冻箱的世界；我们把整购物车甚至都不需要冷藏的食品塞进它们里面。在达·芬奇的年代，只存在被动冷却方式(自然通风、地窖储存)，这个机器会是令人瞩目的。&lt;/p&gt;

&lt;p&gt;达·芬奇生前可能建造过它，因为达·芬奇也为奢华宴会设计过特殊的喷泉，“没有理由排除他也在实验室里建造了这台机器的可能性。”它可能冷藏过从潘趣酒到雪葩的各种东西(意式冰淇淋几十年后才被发明)。&lt;/p&gt;

&lt;h4 id=&#34;2-关于屁的江湖恩怨&#34;&gt;2. 关于屁的江湖恩怨&lt;/h4&gt;

&lt;p&gt;屁不仅仅是一阵带着臭味的风而已。过去，它曾经是人们立法的对象、战争的罪魁祸首甚至还曾被神学化。&lt;/p&gt;

&lt;p&gt;虽然这话违反直觉，但&lt;strong&gt;在人类的心目中屁曾经有着灵性的一面&lt;/strong&gt;。摩尼教(旧译明教)是一个源自古代波斯宗教祆教的宗教，为公元3世纪中叶波斯人摩尼所创立，圣奥古斯丁也曾是该教的一员。这个宗教曾认为放屁是身体释放神圣之“光”的行为。就像学者 Robin Lane Fox 指出的那样，摩尼教可能曾经是世界上唯一一个相信屁有神圣力量的宗教，不过他们并不是唯一一个对屁进行深思的古代组织。除了奠定三角几何的基础之外，哲学家毕达哥拉斯曾担忧过人们放屁的时候是否会同时放掉自己的灵魂。想到灵魂是一种气息而屁是另外一种气息，这种担忧不无道理。&lt;/p&gt;

&lt;p&gt;看过几个历史故事之后，我们就会发现古人的担忧其实非常有道理，因为&lt;strong&gt;屁曾经不止一次引发战争&lt;/strong&gt;。希腊历史学家希罗多德曾记载过一个屁引发一连串针对埃及法老阿普里伊起义的故事。在一世纪的耶路撒冷，屁的影响甚至更加严重。历史学家约瑟夫曾讲述过一名无礼的罗马士兵，脱掉了他的裤子并弯腰说了点脏话。这件事发生在逾越节(犹太人的宗教节日)的前几天，其结果是一万多人死亡。&lt;/p&gt;

&lt;p&gt;屁的负面影响远不止于此。美国圣母大学的科学史家 Jessica Baron 博士曾表示，曾有医生认为屁与性有关系。盖伦医生就曾认为胀气食物有助性之效，他之后的医生也曾持有相同观点，比如佛兰德医生 Hugo Fridaevallis 就曾在1569年写过胀气如何助性，并推荐新婚夫妇吃胀气食物(芦笋)。&lt;/p&gt;

&lt;p&gt;对于大部分基督教徒来说，屁有着更加阴沉的影响。圣奥古斯丁曾说人们放屁的时候就像在用屁股“唱歌”，有他这种观点的只是少数人。中世纪的大部分神学家都认为屁是腐败的产物，也是死亡的标志。&lt;/p&gt;

&lt;p&gt;有趣的是，屁早就成为人们的笑谈。公元前 1900 年有句苏美尔谚语这样说：&lt;strong&gt;“哪个年轻女人从不在她丈夫的大腿上放屁；这事儿自古以来就没发生过。”&lt;/strong&gt;希腊戏剧家阿里斯芬多尼斯也曾写过差不多的句子，莎士比亚、乔叟、马克·吐温以及一千零一夜都不例外。&lt;/p&gt;

&lt;p&gt;在很多时候，与屁有关的笑话都不适合在公众场合说。19世纪除理查德·伯顿之外的一千零一夜英译版本，均删除掉了与屁有关的故事。马克·吐温的 Elizabethan-period 1601 最初也是因为涉及屁才匿名发表。&lt;/p&gt;

&lt;p&gt;而&lt;strong&gt;最成功的放屁戏剧提供者&lt;/strong&gt;是 Roland le Sarcere，他也被称作 Roland the Farter，他是英国国王亨利二世的宫廷吟游诗人。Roland 最喜欢在表演完一曲舞蹈的时候，以一个口哨和一个屁结束他的表演。Roland 的天赋为他在沙福克赢得了一座庄园住宅和一百英亩土地。Roland 如此受人喜爱以至于此后不断有人复述他的故事并扩充他的传记，这一过程居然在无意中将他的寿命延长到了120岁。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roland 并不是唯一一个为了钱而放屁的男人&lt;/strong&gt;。中世纪的一个日本卷轴曾简述一名为福克托玛(Fukutomi)的男人，他专为贵族表演放屁舞。这是一个传奇故事，不过根据记载，18世纪日本确实有专门在工作时放屁的人。在18世纪末19世纪初的巴黎，著名放屁人 Joseph Pujol 得以在红磨坊表演他那历时九十分钟的表演，显然弗洛伊德在研究恋肛癖之前去看过这场表演。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不论何时何地，放屁都是一件让人尴尬的事情&lt;/strong&gt;，对于那些社会地位较高的人而言尤为如此。但人们却更不愿意冒险憋屁。罗马作家苏埃托尼乌斯曾记录过，暴君克劳多斯在听闻一人因羞怯而试图憋屁差点憋死自己之后，就试图颁布一项法令，允许人们在餐桌旁发泄任何腹部胀气。&lt;/p&gt;

&lt;p&gt;不论屁给文化带来了怎样的影响，它都让人们饱受折磨。打嗝会引来一些尴尬，但却能逗乐大家；传染疾病的打喷嚏也能讨人喜欢，如果能用袖子或者手遮住的话，就连咳嗽也能被大家接受。可&lt;strong&gt;屁的社会地位一直有待提高&lt;/strong&gt;，即便科学家们称每个人一天要放14次屁。&lt;/p&gt;

&lt;h4 id=&#34;3-紫禁城的来历&#34;&gt;3. 紫禁城的来历&lt;/h4&gt;

&lt;p&gt;清朝时整个北京分为三大区域：宫城、皇城和京城。宫城就是皇宫，也就是在如今叫作“故宫”的地方，它又称为紫禁城，皇上和他的后宫妃子们吃饭、睡觉、工作以及搞争风吃醋活动的地方非常之广大，又无比之庄严，处处有禁军把守，因此他是“禁城”。而“紫”指的是天上的&lt;strong&gt;紫微星（北极星）&lt;/strong&gt;，明亮的紫微星象征天帝的君临，因而传说中天帝居住的地方也叫紫宫。作为天的儿子，皇上的紫禁城自然也是“紫宫”的一部分，于是它就叫“紫禁城”————天上紫微宫，人间帝王城。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-欢迎关注-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;欢迎关注&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;该系列每周六发布，同步更新在我的&lt;a href=&#34;https://www.yangcs.net/&#34; target=&#34;_blank&#34;&gt;个人博客&lt;/a&gt;和微信公众号上。&lt;/p&gt;

&lt;p&gt;微信搜索 “云原生实验室” 或者扫描二维码即可关注。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes DNS 高阶指南</title>
      <link>https://www.yangcs.net/posts/kubernetes-dns/</link>
      <pubDate>Mon, 27 Aug 2018 18:11:52 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-dns/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; 是 Kubernetes 的核心功能之一，Kubernetes 通过 &lt;code&gt;kube-dns&lt;/code&gt; 或 &lt;code&gt;CoreDNS&lt;/code&gt; 作为集群的必备扩展来提供命名服务，通过 DNS 扩展，每一个 &lt;code&gt;Service&lt;/code&gt; 都会产生一个独一无二的 FQDN（Fully Qualified Domain Name）名称。&lt;/p&gt;

&lt;p&gt;在大多数使用场景下，我们并不会太关心 DNS 插件的内部运作细节，直接使用 Kubernetes 预设的 DNS 配置和策略就可以满足需求。然而随着使用场景越来越复杂，譬如跟 NFV（Network Function Virtualization）相关的场景，我们的应用（Pod）可能就会需要更加个性化的 DNS 配置。&lt;/p&gt;

&lt;p&gt;接下来使用下面这张架构图来说明可能的使用场景：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/DcFCnLw.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-1-为什么需要自定义-dns-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;1. 为什么需要自定义 DNS&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;一般的使用场景下，我们的 Kubernetes 集群的使用方式就像图中&lt;strong&gt;紫色/粉红色（Pod3）&lt;/strong&gt;区域一样，所有的 Pod 如果有任何要存取 &lt;code&gt;DNS&lt;/code&gt; 的需求，都会透过集群内的的 &lt;code&gt;k8s DNS&lt;/code&gt; 来处理对应的请求与回复。&lt;/p&gt;

&lt;p&gt;然而在 &lt;code&gt;NFV&lt;/code&gt; 的使用场景下，网络变成一个很重要的区域，整体的性能都取决于该应用的设计与集群的网络架构设计。这部分应用通常都会追求高输出或是低延迟，为了得到更好的性能，需要避免这些流量跟其他无关的流量使用相同的网络线路进行传输。&lt;/p&gt;

&lt;p&gt;在这种情况下，通常就会把整个集群的网络设计成两种架构，分别是 &lt;code&gt;Control Network&lt;/code&gt; 和 &lt;code&gt;Data Network&lt;/code&gt; 这两个不同用途的网络架构。在 Kubernetes 中，&lt;code&gt;Control Network&lt;/code&gt; 就类似于图中的 &lt;code&gt;Cluster Network&lt;/code&gt;，负责整个集群之间的沟通。图中&lt;strong&gt;绿色/橘色（Pod1，Pod2）&lt;/strong&gt;这两个区域就是所谓的 &lt;code&gt;Data Network&lt;/code&gt;，其网卡本身也被独立出来，不会与本来的 Kubernetes 集群发生冲突，它们之间的流量通过独立的网络进行传输。&lt;/p&gt;

&lt;p&gt;存在于独立出来的网络架构中的这些特殊的 Pod 基本上没法跟 Kubernetes 集群内的 DNS 互连，而且这些应用还有可能在外部有自己的 &lt;code&gt;DNS Server&lt;/code&gt;，所以在这种场景下，我们希望这些应用（Pod1/Pod2）能够使用自定义的 &lt;code&gt;DNS Server&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-2-如何自定义-dns-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;2. 如何自定义 DNS&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;为了让用户更容易控制 Pod 中的 DNS 设置，Kubernetes v1.9 引入了一项新的 Alpha 特性（在 v1.10 中处于 Beta 阶段）。该特性在 v1.10 中被默认启用，在 v1.9 中如果想要启用此功能，集群管理员需要在 apiserver 和 kubelet 上启用 &lt;code&gt;CustomPodDNS&lt;/code&gt; 特性，例如：&lt;code&gt;“--feature-gates=CustomPodDNS=true,...”&lt;/code&gt;。启用了该特性之后，用户可以将 Pod 的 &lt;code&gt;dnsPolicy&lt;/code&gt; 字段设置为 &lt;code&gt;&amp;quot;None&amp;quot;&lt;/code&gt;，并且可以在 &lt;code&gt;Pod.Spec&lt;/code&gt; 中添加新的字段 &lt;code&gt;dnsConfig&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其中 &lt;code&gt;dnsConfig&lt;/code&gt; 用来自定义 DNS 参数，而 &lt;code&gt;dnsPolicy&lt;/code&gt; 用来给 Pod 选取预设的 DNS。接下来就看看可以通过哪些手段自定义 DNS。&lt;/p&gt;

&lt;h4 id=&#34;dnsconfig&#34;&gt;dnsConfig&lt;/h4&gt;

&lt;p&gt;dnsConfig 可以让操作者延伸到 Pod 内部关于 DNS 的配置，这边需要特别注意的是，我使用的字眼是 &lt;strong&gt;延伸&lt;/strong&gt; 而不是 &lt;strong&gt;配置&lt;/strong&gt;，这是因为通过下一节的 dnsPolicy，每个 Pod 都会有一组预设的 DNS 配置。通过 dnsConfig 我们可以继续往上叠加相关的 DNS 参数到 Pod 之中。&lt;/p&gt;

&lt;p&gt;目前总共支持三个参数，分别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nameservers&lt;/li&gt;
&lt;li&gt;searches&lt;/li&gt;
&lt;li&gt;options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三个参数对应的就是大家熟悉的 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 里面的三个参数，这里就不针对 DNS 进行详细解释了，不熟悉的朋友可以自行去 &lt;strong&gt;Google&lt;/strong&gt; 学一下这些参数的意思。&lt;/p&gt;

&lt;p&gt;在 Kubernetes 里面，这三个参数都包含在 dnsConfig 配置项中，而 dnsConfig 包含在 &lt;code&gt;PodSpec&lt;/code&gt; 配置项中，因为 Pod 内所有的容器都共享相同的 Network Namespace，所以网络方面的配置都会共享。&lt;/p&gt;

&lt;p&gt;这边提供一个简单的 yaml 示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-setting
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  restartPolicy: Always
  dnsConfig:
    nameservers:
      - 1.2.3.4
    searches:
      - ns1.svc.cluster.local
      - my.dns.search.suffix
    options:
      - name: ndots
        value: &amp;quot;2&amp;quot;
      - name: edns0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令可以观察到容器中 DNS 配置文件中会出现额外的配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-setting cat /etc/resolv.conf

nameserver 10.254.0.2
nameserver 1.2.3.4
search default.svc.cluster.local svc.cluster.local cluster.local ns1.svc.cluster.local my.dns.search.suffix
options ndots:2 edns0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到 nameserver 多了一个 1.2.3.4，而 search 则多了 &lt;code&gt;ns1.svc.cluster.local my.dns.search.suffix&lt;/code&gt; 这两个自定义的值，最后 options 则增加了我们示例中指定的 &lt;code&gt;ndots:2 edns0&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;dnsConfig 非常简单直观，如果你需要自定义 DNS 参数，就可以通过这个字段来指定。&lt;/p&gt;

&lt;h4 id=&#34;dnspolicy&#34;&gt;dnsPolicy&lt;/h4&gt;

&lt;p&gt;前面提过，&lt;code&gt;dnsConfig&lt;/code&gt; 提供的是延伸 Pod 内预设的 DNS 配置，而 &lt;code&gt;dnsPolicy&lt;/code&gt; 就是决定 Pod 内预设的 DNS 配置有哪些。&lt;/p&gt;

&lt;p&gt;目前总共有四个类型可以选择：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;li&gt;Default&lt;/li&gt;
&lt;li&gt;ClusterFirst&lt;/li&gt;
&lt;li&gt;ClusterFirstHostNet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来针对这四个类型分别介绍。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;None&lt;/p&gt;

&lt;p&gt;&lt;code&gt;None&lt;/code&gt; 表示会清除 Pod 预设的 DNS 配置，当 dnsPolicy 设置成这个值之后，Kubernetes 不会为 Pod 预先载入任何自身逻辑判断得到的 DNS 配置。因此若要将 dnsPolicy 的值设为 None，为了避免 Pod 里面没有配置任何 DNS，最好再添加 dnsConfig 来描述自定义的 DNS 参数。&lt;/p&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-none
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  restartPolicy: Always
  dnsPolicy: None
  dnsConfig:
    nameservers:
      - 1.2.3.4
    searches:
      - ns1.svc.cluster.local
      - my.dns.search.suffix
    options:
      - name: ndots
        value: &amp;quot;2&amp;quot;
      - name: edns0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令可以观察容器中的 DNS 配置文件，可以观察到跟之前的 &lt;code&gt;dnsConfig&lt;/code&gt; 的结果有一点差异，这里只有我们在 yaml 里配置的那些参数，而没有加入集群预设的 DNS 配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-none cat /etc/resolv.conf

nameserver 1.2.3.4
search ns1.svc.cluster.local my.dns.search.suffix
options ndots:2 edns0
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=&#34;blue&#34;&gt;Default&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Default&lt;/code&gt; 表示 Pod 里面的 DNS 配置继承了宿主机上的 DNS 配置。简单来说，就是该 Pod 的 DNS 配置会跟宿主机完全一致。&lt;/p&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-default
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  restartPolicy: Always
  dnsPolicy: Default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先，我们先观察 Node 上面的 DNS 配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/resolv.conf

# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 10.0.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以观察到，Node 上面的 DNS 配置得很简单，只有单纯的 &lt;code&gt;10.0.2.3&lt;/code&gt;。
接下来我们观察该 Pod 内的 DNS 配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-default cat /etc/resolv.conf

nameserver 10.0.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到这两个的 DNS 配置完全一致，该 Pod 内的 DNS 配置已经直接继承 Node 上面的配置了。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;ClusterFirst&lt;/p&gt;

&lt;p&gt;相对于上述的 Default，&lt;code&gt;ClusterFirst&lt;/code&gt; 是完全相反的操作，它会预先把 &lt;code&gt;kube-dns&lt;/code&gt;（或 CoreDNS）的信息当作预设参数写入到该 Pod 内的 DNS 配置。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;ClusterFirst 是预设的行为，若没有在 Pod 內特別描述 PodPolicy, 则会将 dnsPolicy 预设为 ClusterFirst。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-clusterfirst
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  restartPolicy: Always
  dnsPolicy: ClusterFirst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令观察容器中的 DNS 配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-clusterfirst cat /etc/resolv.conf

nameserver 10.254.0.2
search default.svc.cluster.local svc.cluster.local cluster.local
options ndots:5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到这里使用的是 k8s DNS 的设置。&lt;/p&gt;

&lt;p&gt;此外，ClusterFirst 还有一个冲突，如果你的 Pod 设置了 &lt;code&gt;HostNetwork=true&lt;/code&gt;，则 ClusterFirst 就会被强制转换成 &lt;code&gt;Default&lt;/code&gt;。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;HostNetwork&lt;/p&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-hostnetwork-policy-default
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  hostNetwork: true
  restartPolicy: Always
  dnsPolicy: ClusterFirst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令观察容器中的 DNS 配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec ubuntu-hostnetwork-policy-default cat /etc/resolv.conf

nameserver 10.0.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以观察到，Pod 里面的 DNS 配置直接继承了宿主机上的 DNS 配置。&lt;/p&gt;

&lt;p&gt;这边稍微来解释一下这个设计上的原理以及流程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;因为设置了 &lt;code&gt;HostNetwork=true&lt;/code&gt;, 会让该 Pod 与该节点共用相同的网路空间(网卡/路由等功能)。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;预设的 k8s DNS 是使用 &lt;code&gt;ClusterIP&lt;/code&gt; 的 kubernetes serivce. 这种情况下，只有属于 Cluster 內的 &lt;code&gt;Pod&lt;/code&gt; 可以获取该 ClusterIP。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;所以设置了 &lt;code&gt;HostNetwork=true&lt;/code&gt; 的 Pod 就没有办法获取该 ClusterIP。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;于是预设就会将对应的 DNS 配置改回 &lt;code&gt;Default&lt;/code&gt; 的形式，从节点继承其 DNS 配置信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这种情况下，就会有人想要问，如果我刻意想要这样设置不行吗？&lt;/p&gt;

&lt;p&gt;原先的设计中，是没有办法刻意处理的，原因是当 &lt;code&gt;Pod yaml&lt;/code&gt; 配置文件被发送出去后，在发现没有设定 &lt;code&gt;dnsPolicy&lt;/code&gt; 的情况下，会自动帮你把该 dnsPolicy 补上 &lt;code&gt;ClusterFirst&lt;/code&gt; 的数值。&lt;/p&gt;

&lt;p&gt;然后最后面的程序处理逻辑中，其实並没有办法分別下列两种情况：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HostNetwork：我希望走 Host DNS&lt;/li&gt;
&lt;li&gt;HostNetwork &amp;amp; dnsPolicy=ClusterFirst：我希望走 ClusterIP DNS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上述两种情况对于后端的程序来看都长得一样，完全没有办法分辨，我们可以直接从 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.11/pkg/kubelet/network/dns/dns.go#L258&#34; target=&#34;_blank&#34;&gt;Kubernetes 源码&lt;/a&gt; 来阅读一下其运作流程：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func getPodDNSType(pod *v1.Pod) (podDNSType, error) {
	dnsPolicy := pod.Spec.DNSPolicy
	switch dnsPolicy {
	case v1.DNSNone:
		if utilfeature.DefaultFeatureGate.Enabled(features.CustomPodDNS) {
			return podDNSNone, nil
		}
		// This should not happen as kube-apiserver should have rejected
		// setting dnsPolicy to DNSNone when feature gate is disabled.
		return podDNSCluster, fmt.Errorf(fmt.Sprintf(&amp;quot;invalid DNSPolicy=%v: custom pod DNS is disabled&amp;quot;, dnsPolicy))
	case v1.DNSClusterFirstWithHostNet:
		return podDNSCluster, nil
	case v1.DNSClusterFirst:
		if !kubecontainer.IsHostNetworkPod(pod) {
			return podDNSCluster, nil
		}
		// Fallback to DNSDefault for pod on hostnetowrk.
		fallthrough
	case v1.DNSDefault:
		return podDNSHost, nil
	}
	// This should not happen as kube-apiserver should have rejected
	// invalid dnsPolicy.
	return podDNSCluster, fmt.Errorf(fmt.Sprintf(&amp;quot;invalid DNSPolicy=%v&amp;quot;, dnsPolicy))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这边可以看到一旦是 &lt;code&gt;DNSClusterFirst&lt;/code&gt; 的情况下，若设置了 HostNetwork, 最后就会直节回传 &lt;code&gt;podDNSHost&lt;/code&gt; 节点的 DNS 设定回去。&lt;/p&gt;

&lt;p&gt;为了解决上述的问题，所以引进了一个新的类型 &lt;code&gt;ClusterFirstHostNet&lt;/code&gt;。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;ClusterFirstWithHostNet&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ClusterFirstWithHostNet&lt;/code&gt; 用途非常简单，我希望满足使用 HostNetwork 同时使用 &lt;code&gt;k8s DNS&lt;/code&gt; 作为我 Pod 预设 DNS 的配置。&lt;/p&gt;

&lt;p&gt;根据上面的源码也可以观察到：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;case v1.DNSClusterFirstWithHostNet:
	return podDNSCluster, nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要將 dnsPolicy 设置为 &lt;code&gt;ClusterFirstWithHostNet&lt;/code&gt;, 就会一律返回 k8s DNS 的 &lt;code&gt;clusterIP&lt;/code&gt; 这种形式。&lt;/p&gt;

&lt;p&gt;使用下面的示例来进行测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-hostnetwork-policy
  namespace: default
spec:
  containers:
  - image: hwchiu/netutils
    command:
      - sleep
      - &amp;quot;360000&amp;quot;
    imagePullPolicy: IfNotPresent
    name: ubuntu
  hostNetwork: true
  restartPolicy: Always
  dnsPolicy: ClusterFirstWithHostNet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上述 yaml 创建 Pod 之后，通过下面的命令观察该 Pod 的状态：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ kubectl exec ubuntu-hostnetwork-policy cat /etc/resolv.conf

nameserver 10.254.0.2
search default.svc.cluster.local svc.cluster.local cluster.local
options ndots:5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以发现这时候的 DNS 就会配置成 k8s DNS 的 &lt;code&gt;ClusterIP&lt;/code&gt; 了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;扫一扫关注微信公众号&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>干货与湿货分享第6期</title>
      <link>https://www.yangcs.net/posts/weekly-6/</link>
      <pubDate>Sat, 25 Aug 2018 14:33:39 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/weekly-6/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;这是《干货与湿货分享》系列的第六期，主要记录过去一周我所见到的听到的值得分享的东西。&lt;/p&gt;

&lt;p&gt;科技让生活更美好，似乎是一句不可否认的口号，但在网络审查日益严格，科技公司的灰色产业被披露的浪潮下，我们开始明白互联网不再是连接每一个人的乌托邦。&lt;/p&gt;

&lt;p&gt;为了维护社交媒体平台的健康和吸引力，让广告金主和用户对自己平台不抛弃不放弃。YouTube、Google 和 Facebook 等科技巨头都会建立双重审核制度，一是通过人工智能和算法进行首层审核，接着是通过建立在东南亚的外包公司来进行人工过滤。据不完全统计，各大科技公司在菲律宾的外包内容审查员人数超过了 100000 人，Facebook 在全球的外包雇佣工人达到 20000 名。作为一项庞大的劳动密集型产业，大多数人受到保密协定的约束，&lt;strong&gt;他们的工作直面互联网的黑暗角落：过滤暴力、色情、仇恨内容，他们被成为“电子清道夫”。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在算法和人工智能过滤的背后，科技公司在发展中国家成立外包公司，通过网络招募大量通晓英文的低薪员工。这个隐秘的行业被光鲜亮丽的科技公司藏匿在数字浪潮的海底，像海洋清洁工般清扫内容的垃圾。他们每天需要处理 25000 张图片或视频，然后根据删除原因，比如恐怖主义，自我伤害等十个选项来贴标签归类。&lt;/p&gt;

&lt;p&gt;不平等的现象发生在权利和资本渗透的每一个角落，电视机、互联网、手机的出现是否真的让我们的世界更加美好，还是令社会的分化更加严重？互联网不会回答我们，科技也不会回答我们。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们无法抵抗时代的进步，但又不知晓该如何拥抱这个高速变换的时代，网络审查员背后的血泪史，折射着当代的残酷现实：信息技术无法消除贫穷和不公，而网络劳工的生存、社会体制的弊端，早已淹没在了缤纷繁杂的娱乐社交之中。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-新闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;新闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-脑纹将成为新的指纹-https-www-earth-com-news-brainprints-new-fingerprints&#34;&gt;1. &lt;a href=&#34;https://www.earth.com/news/brainprints-new-fingerprints/&#34; target=&#34;_blank&#34;&gt;脑纹将成为新的指纹&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Could-brainprints-become-the-new-fingerprints.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在过去很长一段时间内，我们一直使用面部识别、语音识别和指纹识别技术来辨别一个人的身份，但是识别率并不能达到百分之百，很快就会有一种新的万无一失的方法来识别身份，它与大脑中称为&lt;strong&gt;连接组（connectome）&lt;/strong&gt;的区域之间的物理联系有关。&lt;/p&gt;

&lt;p&gt;由于每个人的连接组都是独一无二的，因此使用连接组之间的映射关系创建的脑纹可以精确识别人的身份，甚至可以区分双胞胎。&lt;/p&gt;

&lt;h4 id=&#34;2-城市上空惊现疑似天国的幻象-http-strangesounds-org-2018-08-mysterious-glimpse-of-the-kingdom-of-heaven-appears-in-the-sky-over-china-html&#34;&gt;2. &lt;a href=&#34;http://strangesounds.org/2018/08/mysterious-glimpse-of-the-kingdom-of-heaven-appears-in-the-sky-over-china.html&#34; target=&#34;_blank&#34;&gt;城市上空惊现疑似天国的幻象&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/fata-morgana-china-august-2018.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;近年来，世界各地的人们都在空中看到很多惊奇的现象，有时候是&lt;strong&gt;鬼城&lt;/strong&gt;，有时候是&lt;strong&gt;天使&lt;/strong&gt;&amp;hellip;很多目击者对此感到很困惑，甚至会感到恐惧，那么天空中这些奇怪的现象到底是什么呢？&lt;/p&gt;

&lt;p&gt;据科学家说，这些看似漂浮在浓雾中的的城市是海市蜃楼，或者是一种自然发生的光学现象，是由光线弯曲产生的远处物体或者天空的位移图像。当然，还有一些科学家持不同观点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这有可能是另一个平行宇宙中的现实&lt;/li&gt;
&lt;li&gt;还有可能是通往地球上空的另一个维度世界的大门&lt;/li&gt;
&lt;li&gt;也有可能是在瑞士日内瓦的欧洲核子研究中心试图寻找甚至创造微型黑洞的神秘实验&lt;/li&gt;
&lt;li&gt;其他人认为这些都是通过计算机创造的虚假的图片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了海市蜃楼之外，很多地方还出现了&lt;strong&gt;“上帝之眼”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/fata-morgana-china-august-2018-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-人类活动使得多种野生动物患上癌症-http-jandan-net-2018-08-18-cancer-causing-html&#34;&gt;3. &lt;a href=&#34;http://jandan.net/2018/08/18/cancer-causing.html&#34; target=&#34;_blank&#34;&gt;人类活动使得多种野生动物患上癌症&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/d7b776ec2cc7d6659379fc9d309d51b1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;对全球和美国而言，癌症是第二大死亡原因，仅位居心脏病之下，目前其发病率在全球范围内不断增加。癌症的激增主要归因于我们的生活方式，例如饮食不健康，吸烟，喝酒，以及接触污染物。环境污染物与肿瘤发展之间的关联已经通过对人类和动物进行的大量研究得到了很好的证实。&lt;/p&gt;

&lt;p&gt;但人类并不是唯一暴露在我们自己排放的污染物的中物种，我们大大低估了人类活动导致的野生动物癌症，一项研究发现，生活在高度污染的地区的白鲸中，27％患有癌症。&lt;/p&gt;

&lt;h4 id=&#34;4-科学家逆转了单个细胞的衰老-http-jandan-net-2018-08-21-human-cells-2-html&#34;&gt;4. &lt;a href=&#34;http://jandan.net/2018/08/21/human-cells-2.html&#34; target=&#34;_blank&#34;&gt;科学家逆转了单个细胞的衰老&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;每个人都明白逆转衰老的过程意味着什么。在现实中实现这样的技术，还有很长的路要走，但在最新的实验中，我们已经可以使单个的人类细胞返老还童；这可能成为未来研发“不老药”的基础。&lt;/p&gt;

&lt;h4 id=&#34;5-日本要借助-ai-和机器人来提升英语教育效果-https-cn-engadget-com-2018-08-21-japan-ai-robots-english-skills-schools&#34;&gt;5. &lt;a href=&#34;https://cn.engadget.com/2018/08/21/japan-ai-robots-english-skills-schools/&#34; target=&#34;_blank&#34;&gt;日本要借助 AI 和机器人来提升英语教育效果&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://s.aolcdn.com/hss/storage/midas/88e1fac2e73376dc3b0963c34fe29224/206607723/dims.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;负责日本国内教育事务的文部科学省宣布，将会在明年开始进行一项利用 AI 和机器人来提升英语教育效果的试验。据 NHK 的报道，这预计耗资 2.5 亿日元的计划，将会在明年于 500 家学校设置搭载了 AI 的英语会话机器人，目的是让小朋友能通过以英语与机器人对话，提升会话和书写能力，部分学校更会纳入教学课程之中。&lt;/p&gt;

&lt;h4 id=&#34;6-google-的资料中心已经交由-ai-操作冷却系统-https-cn-engadget-com-2018-08-18-google-deepmind-ai-run-data-center-cooling-systems&#34;&gt;6. &lt;a href=&#34;https://cn.engadget.com/2018/08/18/google-deepmind-ai-run-data-center-cooling-systems/&#34; target=&#34;_blank&#34;&gt;Google 的资料中心已经交由 AI 操作冷却系统&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://s.aolcdn.com/hss/storage/midas/8ee26ed91aefce02c38c344b78d8b1d0/206603622/GOOGLE_CBF_009.width-800.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Google 的数据中心说是世上最先进的之一也不为过，但先进的不仅是在服务器里跑的东西，甚至还包括了数据中心本身。Google 从两年多前就开始套用 AI 到数据中心的日常管理中，协助系统管理人员维持环境温度，而现在 Google 更是将整个温控的决定都交到了 AI 手上，管理人员只负监管的责任，而不介入操作，因为 AI 可以从人类想不到的地方找出节约能源的办法。&lt;/p&gt;

&lt;h4 id=&#34;7-nasa-确认了月球两极有水冰的存在-https-cn-engadget-com-2018-08-22-nasa-confirms-ice-moon-poles&#34;&gt;7. &lt;a href=&#34;https://cn.engadget.com/2018/08/22/nasa-confirms-ice-moon-poles/&#34; target=&#34;_blank&#34;&gt;NASA 确认了月球两极有水冰的存在&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://s.aolcdn.com/hss/storage/midas/6717a580a90157321777f2bf366a7925/206610165/elphic_south_north_lunar_pole_ice.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;过去，人们一直认为月球是一个干燥无水的星球。直到 ２００９ 年 １０ 月，美国航天局的两个航天器相继撞击月球南极附近的凯布斯坑后，才得出月球表面存在水的结论。现在，依靠印度太空署的 Chandrayaan-1 卫星上搭载的 NASA M3 仪器所收集回来的资料，科学家终于可以肯定的说月球上真的有水冰的存在了。&lt;/p&gt;

&lt;p&gt;水除了是生物生存所必需的之外，也是生产火箭燃料的重要原料。如果所有的水都要从地球或是彗星上运往月球的话，将会大幅度地限制月球基地的发展与规模。现在如果月球基地能直接从表面取得水资源，对于月球基地的开发进展可是非常有帮助的呢。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-工具-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;工具&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-不容错过的-github-插件和工具-https-www-52pojie-cn-thread-784785-1-1-html&#34;&gt;1. &lt;a href=&#34;https://www.52pojie.cn/thread-784785-1-1.html&#34; target=&#34;_blank&#34;&gt;不容错过的 GitHub 插件和工具&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;以代码托管平台起家的 GitHub 网站，已然成为全球程序员工作和生活中不可或缺的一份子。从优秀的企业，到优秀的程序员，都将自己最优秀的代码作品存放在这片开源净土里，供彼此学习交流。GitHub Trending 栏目甚至已经成为 IT 从业人员的新闻日报，每日必读。既然 GitHub 这么重要，又被我们使用得这么频繁，那关于 GitHub 的一些优秀浏览器插件或者其他工具，我们就一定不可错过啦。本文就就是作者整理的一些平常使用最得心应手的东西，全都倾力推荐出来，绝对干货！&lt;/p&gt;

&lt;h4 id=&#34;2-picgo-https-molunerfinn-com-picgo&#34;&gt;2. &lt;a href=&#34;https://molunerfinn.com/PicGo/&#34; target=&#34;_blank&#34;&gt;PicGo&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://pix.waerfa.com/0rzkw.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;PicGo 是一款开源免费的图片上传兼任相册管理软件，支持将图片上传到微博，七牛，腾讯云，又拍云，GitHub，SM.MS 这几大常见的存储平台或图床服务空间中。软件底层基于 electron-vue 开发，对于 macOS 系统版本的更迭没有原生开发软件那样特别敏感，兼容性很好。&lt;/p&gt;

&lt;h4 id=&#34;3-wechatplugin-macos-https-github-com-tkkk-ioser-wechatplugin-macos&#34;&gt;3. &lt;a href=&#34;https://github.com/TKkk-iOSer/WeChatPlugin-MacOS&#34; target=&#34;_blank&#34;&gt;WeChatPlugin-MacOS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;WeChatPlugin 是一款可玩性很高的 macOS 版开源的微信小助手，安装后可以实现「消息防撤回」、「自动回复」、「远程控制 macOS」、「开启多窗口登录」功能。&lt;/p&gt;

&lt;h4 id=&#34;4-flow-for-mac-https-www-waitsun-com-flow-1-0-html&#34;&gt;4. &lt;a href=&#34;https://www.waitsun.com/flow-1-0.html&#34; target=&#34;_blank&#34;&gt;Flow for Mac&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://wx2.sinaimg.cn/large/5386e171gy1fueshfjwksj20qw0g279z.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在娱乐横行，内容产业丛生的当代，很多人都发现每天的时间都过的特别快，往往还不知道自己做了什么，一天的工作或者学习就已经结束了。Flow Mac版 是 MacOS 上的一款时长统计软件，可以统计你一天在哪些地方花费的时间最多。Flow Mac 版提供了轻便易用的自动时间统计功能，可以帮助你更加了解自己的 Mac 电脑使用情况。&lt;/p&gt;

&lt;h4 id=&#34;5-bash-snippets-http-blog-jobbole-com-114303&#34;&gt;5. &lt;a href=&#34;http://blog.jobbole.com/114303/&#34; target=&#34;_blank&#34;&gt;Bash-Snippets&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一组适用于命令行重度用户的实用 BASH 脚本，这些脚本被称为 Bash-Snippets，它们对于那些整天都与终端打交道的人来说可能会很有帮助。想要查看你居住地的天气情况？它为你做了。想知道股票价格？你可以运行显示股票当前详细信息的脚本。觉得无聊？你可以看一些 YouTube 视频。这些全部在命令行中完成，你无需安装任何严重消耗内存的 GUI 应用程序。&lt;/p&gt;

&lt;h4 id=&#34;6-kcs-https-blog-scottlowe-org-2018-08-21-a-simple-kubernetes-context-switcher&#34;&gt;6. &lt;a href=&#34;https://blog.scottlowe.org/2018/08/21/a-simple-kubernetes-context-switcher/&#34; target=&#34;_blank&#34;&gt;kcs&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个非常简单实用的 Kubernetes 上下文切换工具。&lt;/p&gt;

&lt;h4 id=&#34;7-picular-https-picular-co&#34;&gt;7. &lt;a href=&#34;https://picular.co/&#34; target=&#34;_blank&#34;&gt;Picular&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;没错，这是一款色彩、颜色搜索引擎，通过不同的关键词，来寻找颜色。Picular 和搜索引擎不同之处在于，它会直接提取「图片搜索」中，图片的颜色，然后以纯色显示出来，支持中文。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-教程-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;教程&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-gitlab-team-handbook-https-about-gitlab-com-handbook&#34;&gt;1. &lt;a href=&#34;https://about.gitlab.com/handbook/&#34; target=&#34;_blank&#34;&gt;Gitlab Team Handbook&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Gitlab 团队手册是 Gitlab 公司内部的运营方面的核心价值，全书超过 1000 页，现在向全世界开放。&lt;/p&gt;

&lt;h4 id=&#34;2-how-to-write-your-own-cni-plug-in-with-bash-https-www-altoros-com-blog-kubernetes-networking-writing-your-own-simple-cni-plug-in-with-bash&#34;&gt;2. &lt;a href=&#34;https://www.altoros.com/blog/kubernetes-networking-writing-your-own-simple-cni-plug-in-with-bash/&#34; target=&#34;_blank&#34;&gt;How to Write Your Own CNI Plug-in with Bash&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;手把手教你如何使用 Bash 为 Kubernetes 编写自己的 CNI 插件。&lt;/p&gt;

&lt;h4 id=&#34;3-https-安全最佳实践-https-advancedweb-hu-2018-08-21-https-security&#34;&gt;3. &lt;a href=&#34;https://advancedweb.hu/2018/08/21/https_security/&#34; target=&#34;_blank&#34;&gt;HTTPS 安全最佳实践&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;随着浏览器和搜索引擎越来越歧视非加密网站，使用 HTTPS 来保护网站已经变得至关重要，这篇文章会告诉你使用 HTTPS 时需要注意的问题以及一些小诀窍。&lt;/p&gt;

&lt;h4 id=&#34;4-共享库-理解动态加载-https-amir-rachum-com-blog-2016-09-17-shared-libraries&#34;&gt;4. &lt;a href=&#34;https://amir.rachum.com/blog/2016/09/17/shared-libraries/&#34; target=&#34;_blank&#34;&gt;共享库：理解动态加载&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;在这篇文章中，作者将尝试解释在 Linux 系统中如何动态加载共享库的内部工作原理。&lt;/p&gt;

&lt;h4 id=&#34;5-promql-for-humans-https-timber-io-blog-promql-for-humans&#34;&gt;5. &lt;a href=&#34;https://timber.io/blog/promql-for-humans/&#34; target=&#34;_blank&#34;&gt;PromQL For Humans&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/PromQL+Cheatsheet.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;PromQL 是为 Prometheus 制作的内置查询语言，这是 Timber 公司制作的 PromQL 基础入门教程。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-资源-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;资源&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-fembed-https-www-fembed-com&#34;&gt;1. &lt;a href=&#34;https://www.fembed.com/&#34; target=&#34;_blank&#34;&gt;Fembed&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://wx3.sinaimg.cn/mw690/0060lm7Tly1ful45nq26qj30ri0plgns.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;自从 QQ 旋风接口被关闭之后，国内离线下载工具基本全部失效，115 网盘也是一蹶不振，这里推荐一款国外的离线下载工具——Fembed。Fembed 是一个国外的“离线下载引擎”网站，其实在国外这类的站点有很多，不过大多数都比较失败，而 Fembed 是同类中的佼佼者，和国内的 115 网盘也不遑多让。&lt;/p&gt;

&lt;p&gt;首先，Fembed 完全免费，无限空间，而且不限制离线下载次数。&lt;/p&gt;

&lt;p&gt;其次，Fembed 支持 种子 磁力 http ftp YouTube 网盘等等渠道链接的离线下载，而一般来说 http ftp YouTube 网盘等固定服务器渠道会更快。&lt;/p&gt;

&lt;p&gt;再次，Fembed 离线下载后的资源，都会保存在自己账号网盘里面，可以在线高速观看，经过测试，在线观看速度流畅，而且下载用 IDM 可以达到满速下载。&lt;/p&gt;

&lt;p&gt;最后，Fembed 是调用的 Aria2 通过自身超级强悍的企业级服务带宽进行离线下载的，Aria2 对于老司机来说，这里就不多说了。&lt;/p&gt;

&lt;h4 id=&#34;2-rapidvideo-https-www-rapidvideo-com&#34;&gt;2. &lt;a href=&#34;https://www.rapidvideo.com/&#34; target=&#34;_blank&#34;&gt;Rapidvideo&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个国外视频网站，可以上传高清视频，用户观看时可自由切换480P、720P、1080P。上传视频后，每有一个用户观看，上传者可以赚钱。&lt;/p&gt;

&lt;h4 id=&#34;3-悦看书屋-https-www-yuekanshuwu-com&#34;&gt;3. &lt;a href=&#34;https://www.yuekanshuwu.com/&#34; target=&#34;_blank&#34;&gt;悦看书屋&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;免费的 kindle 书籍推送服务站点。推送方法：注册登录，然后配置自己的邮箱，选择书籍即可推送至自己的 Kindle 设备。&lt;/p&gt;

&lt;h4 id=&#34;4-resume-maker-online-http-resumemaker-online&#34;&gt;4. &lt;a href=&#34;http://resumemaker.online/&#34; target=&#34;_blank&#34;&gt;Resume Maker Online&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://cdn.ilovefreesoftware.com/wp-content/uploads/2018/08/Free-WYSIWYG-Resume-builder-to-design-Resume-Online-Download-PDF.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是一份在线简历制作网站，用于在线设计简历并以高质量 PDF 的形式下载。&lt;/p&gt;

&lt;h4 id=&#34;5-知名互联网企业内推-https-github-com-bestdingsheng-resources&#34;&gt;5. &lt;a href=&#34;https://github.com/BestDingSheng/resources&#34; target=&#34;_blank&#34;&gt;知名互联网企业内推&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一份知名互联网企业内推资料整理 持续更新ing 。作者目前维护了4个互联网内推求职招聘的群,现成员接近2000人。&lt;/p&gt;

&lt;p&gt;有些朋友技术很好，但是学历和背景不是很好，有时候投些大公司，简历直接被HR刷掉了，作者创建这个群也是为了帮助那些想进大厂的朋友搭建一个平台，通过企业内部推荐能够更大几率的获得面试机会~&lt;/p&gt;

&lt;h4 id=&#34;6-chinese-xinhua-https-github-com-pwxcoo-chinese-xinhua&#34;&gt;6. &lt;a href=&#34;https://github.com/pwxcoo/chinese-xinhua&#34; target=&#34;_blank&#34;&gt;chinese-xinhua&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;中华新华字典数据库和 API 。收录包括 14032 条歇后语，16142 个汉字，264434 个词语，31648 个成语。&lt;/p&gt;

&lt;h4 id=&#34;7-斯坦福-cs229-机器学习备忘录-https-github-com-afshinea-stanford-cs-229-machine-learning&#34;&gt;7. &lt;a href=&#34;https://github.com/afshinea/stanford-cs-229-machine-learning&#34; target=&#34;_blank&#34;&gt;斯坦福 CS229 机器学习备忘录&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Jietu20180825-133445.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在 Github 上，afshinea 贡献了一个备忘录对经典的斯坦福 CS229 课程进行了总结，内容包括监督学习、无监督学习，以及进修所用的概率与统计、线性代数与微积分等知识。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-重大变更和发布-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;重大变更和发布&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blog.openshift.com/okd310release/?sc_cid=701f2000000ZzcUAAS&#34; target=&#34;_blank&#34;&gt;Openshift Origin 从 3.10 版本开始正式更名为 OKD&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://xposed.appkg.com/2877.html&#34; target=&#34;_blank&#34;&gt;Google One 正式开放订阅，不过目前仅限美国地区&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.ifanr.com/app/1086799&#34; target=&#34;_blank&#34;&gt;印象笔记迎来史上最重磅更新，新增 Markdown 笔记功能，并且支持非常丰富的 Markdown 语法。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/aquasecurity/kube-hunter&#34; target=&#34;_blank&#34;&gt;Aqua 推出 Kube-hunber，该工具可以用来探测企业用户 Kubernetes 环境内潜在的存取弱点。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://apporbit.com/appporter/&#34; target=&#34;_blank&#34;&gt;AppOrbit 和 Google 合作推出 AppPorter 2.0。AppPorter 2.0 是自动现代化平台，它将遗留应用程序转换并打包到基于 Kubernetes 的混合云中，为企业客户提供现代化云迁移服务。&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;p-id-h2-奇闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;奇闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-让达芬奇困惑不已的水跃现象&#34;&gt;1. 让达芬奇困惑不已的水跃现象&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/d49046927bb65b5c66c1f6084359f18e.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;15世纪，莱昂纳多·达芬奇想静静的时候，常常在户外找一处溪流，看着下游的漩涡陷入沉思之中。&lt;/p&gt;

&lt;p&gt;文艺复兴时期的大师为这一种现象惊讶不已，后世无数科学家也困惑不解。半个世纪之后，我们仍在为这个叫做水跃的东西挠头。现在，剑桥大学的物理学家可能最终解决了这个问题。&lt;/p&gt;

&lt;p&gt;吓人的术语——水跃，描述的却是异常熟悉的现象，以至于我们完全没有意识到它的不同寻常。只要打开水龙头，观察水槽的底部，就能发现以水流冲击的位置为圆心，有一圈的区域似乎只有薄薄的一层水，就好像下方的水都被落下来的激流冲走。同时在这一圈的边缘处，液面明显变高——这就是水跃的含义——但是它们没法涌过去，填满中央的凹陷。类似的现象也可以在堰、瀑布和潮汐洞穴的底部被观察到。500年前，达芬奇将它记录到笔记中，不过主要是出于哲学上的思考，他认为这是水元素的本质体现，因此也没有做更多的解释。&lt;/p&gt;

&lt;p&gt;在1914年，一位名叫John William的物理学家在一篇关于钻孔和液体冲击波的论文中提出了一个猜想，他的理论考虑了粘度、动能和势能等因素。另一方面，表面张力“无疑是相当重要的一部分，但是在这里可以通过增加流量来使其影响最小化”。瑞利勋爵以后的研究人员也将表面张力视为微不足道的影响因素，得到的模型可以使用已知的参数，如粘度、惯性和重力的组合来描述冲击而下的液体的形成的圈半径与圈边缘高度之间的联系。当水沿着表面流动时，摩擦力克服其惯性并使流体减速。如果水流像是瀑布那样冲刷而下，则会产生冲击波，液体在短距离外堆积成高出中心位置的水墙。边缘处水墙的高度取决于冲击水量的大小所能平衡的势能。&lt;/p&gt;

&lt;p&gt;在一项新的研究中，化学工程研究员 Rajesh Bhagat 认为，以前的科学家为了方便将表面张力剔除在模型之外，有点急功近利了，其实水在边缘处升高时，表面张力和粘性力平衡了液膜中的动量，重力没有起到重要作用，而表面张力才是关键。达芬奇如果知道了最新的进展，应该会为更加接近水的本质而感到高兴吧。&lt;/p&gt;

&lt;h4 id=&#34;2-如何把一根生面条恰好掰成两段&#34;&gt;2. 如何把一根生面条恰好掰成两段&lt;/h4&gt;

&lt;p&gt;你饿不饿?我煮个面给你吃，顺便给你介绍一下细长脆性材质的断裂动力学机制。&lt;/p&gt;

&lt;p&gt;甭管是生的意大利面还是东北大挂面，你抽出一根，两手分别捏住两端将其掰断。你会发现，干面条在断裂的时候，总是会碎裂成好几部分，而不会干净利索地断成两截。&lt;/p&gt;

&lt;p&gt;麻省理工学院的数学家们对这一现象深深着迷，这倒不是他们闲的五脊六兽，实际上最早在严肃的公开场合讨论这一问题的科学家正是大名鼎鼎的诺贝尔物理学奖得主理查德·费曼。他思索良久，却苦苦不得要领，最后甚至没有活着看到答案，直到2005年——他去世后17年才有物理学家给出了令人信服的解释，捎带一提，他们的研究为他们赢得了2006年诺贝尔物理学奖——搞笑版。&lt;/p&gt;

&lt;p&gt;发表在《物理评论快报》上的两篇论文中，法国科学家们发现，在一根意大利面条的两端均匀施加力时，它会弯曲直到某个临界点。断裂的瞬间，两段半截的面条从弯曲状态快速反弹伸直，而出于惯性，它们会再次向反方向弯曲，形成波浪式的震动，结果就是手中的两段再次发生断裂。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://img.jandan.net/news/2018/08/41f85b142b11f8891c4387554284419c.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;简明扼要，嗯？但麻省理工学院的研究人员现在提出了另外一个问题：&lt;strong&gt;是否有办法把一根意大利面条恰好掰成两段？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为此，他们专门制造了一台掰面条机，一番折腾下来，还真有所发现：如果你将意大利面条扭到一定程度，然后慢慢弯曲，它就会分成整齐的两截。这是为什么呢？研究人员发现，将意大利面扭转 270 度，然后以 3 毫米/秒的速度将两端弯曲在一起，可以使意大利面条分成两半。他们甚至尝试了两种不同厚度的意大利面条，都得到了相同的结果。这是因为扭曲减轻了反弹效应和回复的震动波，因为它削弱了初始反冲的强度。断裂的意大利面条以螺旋状的方式释放了弹性势能。因为扭曲波动比弯曲波动传播得更快，从而防止应力在意大利面条的结构中累积。&lt;/p&gt;

&lt;h4 id=&#34;3-git-的诞生&#34;&gt;3. Git 的诞生&lt;/h4&gt;

&lt;p&gt;很多人都知道，Linus 在 1991 年创建了开源的 Linux，从此，Linux 系统不断发展，已经成为最大的服务器系统软件了。Linus 虽然创建了 Linux，但 Linux 的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为 Linux 编写代码，那Linux的代码是如何管理的呢？事实是，在 2002 年以前，世界各地的志愿者把源代码文件通过 diff 的方式发给 Linus，然后由 Linus 本人通过手工方式合并代码！&lt;/p&gt;

&lt;p&gt;你也许会想，为什么 Linus 不把 Linux 代码放到版本控制系统里呢？不是有 CVS、SVN 这些免费的版本控制系统吗？因为 Linus 坚定地反对 CVS 和 SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比 CVS、SVN 好用，但那是付费的，和 Linux 的开源精神不符。&lt;/p&gt;

&lt;p&gt;不过，到了 2002 年，Linux 系统已经发展了十年了，代码库之大让 Linus 很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是 Linus 选择了一个商业的版本控制系统 BitKeeper，BitKeeper 的东家 BitMover 公司出于人道主义精神，授权 Linux 社区免费使用这个版本控制系统。安定团结的大好局面在 2005 年就被打破了，原因是 Linux 社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发 Samba 的 Andrew 试图破解 BitKeeper 的协议（这么干的其实也不只他一个），被 BitMover 公司发现了（监控工作做得不错！），于是 BitMover 公司怒了，要收回 Linux 社区的免费使用权。&lt;/p&gt;

&lt;p&gt;Linus 可以向 BitMover 公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：&lt;/p&gt;

&lt;p&gt;Linus 花了两周时间自己用C写了一个分布式版本控制系统，这就是 Git！一个月之内，Linux 系统的源码已经由 Git 管理了！&lt;strong&gt;牛是怎么定义的呢？大家可以体会一下。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git 迅速成为最流行的分布式版本控制系统，尤其是 2008 年，GitHub 网站上线了，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub，包括 jQuery，PHP，Ruby 等等。历史就是这么偶然，如果不是当年 BitMover 公司威胁 Linux 社区，可能现在我们就没有免费而超级好用的 Git 了。&lt;/p&gt;

&lt;h4 id=&#34;4-台湾岛命名的由来&#34;&gt;4. 台湾岛命名的由来&lt;/h4&gt;

&lt;p&gt;1590 年（明万历年间），几艘葡萄牙的远航船绕过了马六甲海峡，进入开阔的洋面，他们在海上孤独地航行着，突然，眼前出现了一个郁郁葱葱的大岛，远远望去，阳光普照，草木丰盛，葡萄牙人嘴中迸出了赞美词：“Ilha Formosa”（英译 “福尔摩沙”，意为 “美丽岛”）。当年的美丽岛，就是今天的台湾。&lt;/p&gt;

&lt;p&gt;荷兰人从 1624 年 8 月 26 日登陆台南安平地方开始占据台湾，当时汉人称此地为 &lt;strong&gt;“大员”&lt;/strong&gt;，是当地高山族部落名译音，记住这是用洛河语发音，而非北京话。荷兰人据台期间(1624~1662年)在大员广场上绞刑台旁，设立一公称处，它是专门针对长度、重量、土地丈量引起问题的仲裁机构，十分权威。&lt;/p&gt;

&lt;p&gt;荷兰人在大员的公称处成为度量衡的权威，以此为交易的准绳，称为&lt;strong&gt;大员尺、大员斤&lt;/strong&gt;。在中国沿海的商人对外交易若以大员尺斤为计算标准，可免去不少的麻烦，尤其是与外地人交易时比较有公正性，大家也乐于使用。久而久之「大员」的含义已从局部指今日「台南地区」扩张到泛指使用大员尺、大员斤的荷兰佔领地区，如台南、凤山、沪尾、鸡笼。&lt;/p&gt;

&lt;p&gt;荷兰人败退离台之前，大员尺、大员斤除了在全台南北各地使用外，更渐渐扩大到中国沿海的外贸商界，所以中国沿海的人对使用大员尺的人很单纯的统称为「大员人」，同时对在海峡对岸的这岛屿称为「大员」岛。大员是以河洛话(闽南语)发音，若以今日的北京话就是「台湾」。这就是台湾名称的由来。&lt;/p&gt;

&lt;h4 id=&#34;5-柏拉图-地穴寓言&#34;&gt;5. 柏拉图：地穴寓言&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Allegory_of_the_Cave_blank.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;苏格拉底描述了一个地下洞穴住所，洞里有一条宽阔的通道通向地面。这个山洞里居住着终生被关押在那里的囚犯。他们被捆绑着大腿和脖子坐在那里，以致他们只能朝前看到洞穴的墙壁，而不能转身回头顾望。因此，他们永远看不到背后的出口，也根本不知道有这么一个出口。他们也不能看到自己和其他囚犯。他们唯一能看到的是他们面对的墙壁。他们的住所被身后远方高处燃烧的火炬照亮。囚犯只能看见这唯一的亮光，照亮着墙壁。但是看不见光源。在墙上他们只能看见光影。&lt;/p&gt;

&lt;p&gt;监狱内部同火炬之间，有一堵不会遮挡光线的矮墙。沿着这堵墙壁，有人来回穿梭，搬运着不同的物品，包括一些用石头和木头做的人体和其他生物模型。这些物体高出那堵矮墙，但是他们的搬运者比墙低。其中的一些搬运者相互交谈着，另一些则保持沉默。&lt;/p&gt;

&lt;p&gt;由于囚犯面对洞穴墙壁，那些来回移动的物体，在墙上投射的阴影，被穴居人看见当作会移动的影子。但他们想到有人在搬运这些东西。当有人说话时，洞壁上的回声，就如同那些影子自己在讲话一样。因此，囚犯以为那些影子会说话。他们把这些影像当作生物，把所有发生的事情理解为这些生物的行为。墙上演绎的事情，对他们来说都是真相，当然是真实的。他们从这些影子中研发出一整套学问，试图从它们的出场和动作中，找出一系列规律，并且预告将要发生地事情。那些预测最准确的人，还会得到嘉奖。&lt;/p&gt;

&lt;p&gt;接着，苏格拉底问 Glaukon（苏格拉底的谈话对象），如果给一名囚犯松绑，让他站起来，转身向出口望去，看见这些以往所见的影子的原型，能否想象这时会发生什么？这个人可能会在强光刺激下痛苦不堪，产生错乱。相比于过去熟悉的光影，他可能会认为届时所看到的东西不是现实的。因此，他可能希望重新返回自己习惯的位置。因为他相信只有在洞壁上能看见真相。而不去会相信一个善意解放者的相反说教。&lt;/p&gt;

&lt;p&gt;如果使用武力将松绑的囚徒从洞穴中拖出来，穿过对他来说陡峭难行的通道，来到地面，他也许会觉得特别别扭，愈发神志错乱。因为璀璨的阳光会使他睁不开眼，开始时什么都看不见。慢慢地他也许会适应看见的新鲜事物。其过程也许是首先识别光影，然后是水中的倒影，最终才是人和事物本身。如果往上看，他也许会先习惯夜晚的星空，然后才是白天的日光，最后他也许才敢于直接目视太阳，从而感受太阳的独特之处。只有这时他才能理解，太阳造就了光影。有了这些经历和认识，他应该不再愿意回到洞穴，去探究那里的光影学问，获取其它囚徒的赞誉。&lt;/p&gt;

&lt;p&gt;如果他还是回到故地，那么他肯定需要重新慢慢地适应洞穴里的黑暗。由此他肯定会在一段时间内，落后其它囚徒对后续光影估算能力。而洞里其它的囚徒则会认为，他在上面把眼睛弄坏了。他们会嘲笑他，觉得离开洞穴显然是宗蚀本生意，根本不值得一试。如果有人试图解放他们，把他们带到地上，他们会杀了他，如果可能的话。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-欢迎关注-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;欢迎关注&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;该系列每周六发布，同步更新在我的&lt;a href=&#34;https://www.yangcs.net/&#34; target=&#34;_blank&#34;&gt;个人博客&lt;/a&gt;和微信公众号上。&lt;/p&gt;

&lt;p&gt;微信搜索 “云原生实验室” 或者扫描二维码即可关注。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>干货与湿货分享第5期</title>
      <link>https://www.yangcs.net/posts/weekly-5/</link>
      <pubDate>Sat, 18 Aug 2018 19:09:02 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/weekly-5/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;这是《干货与湿货分享》系列的第五期，主要记录过去一周我所见到的听到的值得分享的东西。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-新闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;新闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-国产-红芯浏览器被指造假-https-www-leiphone-com-news-201808-mkoth1we1vxo3uq7-html&#34;&gt;1. &lt;a href=&#34;https://www.leiphone.com/news/201808/MKoth1WE1VXo3uq7.html&#34; target=&#34;_blank&#34;&gt;“国产”红芯浏览器被指造假&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://static.cnbetacdn.com/article/2018/0818/72f418169de91cf.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;8 月 16 日，自称“打破美国垄断，世界第五颗浏览器内核、唯一属于中国人自己的浏览器内核”的红芯浏览器，被网友发现“只是谷歌浏览器换了一层皮”——红芯浏览器安装包解压后发现，最终可以得到一个版本号为 49.1.2623.213 的 Chrome 文件。&lt;/p&gt;

&lt;p&gt;据中新网16日消息，红芯联合创始人高婧回应称，网上文章断章取义，安装包里之所以有Chrome文件，&lt;strong&gt;因为本来就是基于开源的Chrome架构&lt;/strong&gt;。但红芯依然是自主可控的国产内核，因为有智能感知渲染等其他方面的创新。&lt;strong&gt;至于安装包为何下线，是因为技术部启动应急预案，开始自查&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;孔乙己争辩道，“封装不能算抄袭。软件界的事，能算抄袭么？”接连便是难懂的话，什么“智能感知渲染引擎”，什么“应用安全方面都有创新”之类，引得众人都哄笑起来：微博内外充满了快活的空气。&lt;/p&gt;

&lt;h4 id=&#34;2-谷歌员工签联名信抗议重返中国项目-http-cn-rfi-fr-e7-be-8e-e6-b4-b2-20180817-e7-ba-bd-e7-ba-a6-e6-97-b6-e6-8a-a5-e8-b0-b7-e6-ad-8c-e5-91-98-e5-b7-a5-e7-ad-be-e8-81-94-e5-90-8d-e4-bf-a1-e6-8a-97-e8-ae-ae-e9-87-8d-e8-bf-94-e4-b8-ad-e5-9b-bd-e9-a1-b9-e7-9b-ae&#34;&gt;2. &lt;a href=&#34;http://cn.rfi.fr/%E7%BE%8E%E6%B4%B2/20180817-%E7%BA%BD%E7%BA%A6%E6%97%B6%E6%8A%A5%E8%B0%B7%E6%AD%8C%E5%91%98%E5%B7%A5%E7%AD%BE%E8%81%94%E5%90%8D%E4%BF%A1%E6%8A%97%E8%AE%AE%E9%87%8D%E8%BF%94%E4%B8%AD%E5%9B%BD%E9%A1%B9%E7%9B%AE&#34; target=&#34;_blank&#34;&gt;谷歌员工签联名信抗议重返中国项目&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Jietu20180818-155529.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;据 NYT 报道，自谷歌打造阉割版搜索引擎、欲重返中国的项目经媒体报道公开后，谷歌内部越来越多员工对此表示担忧，认为如果搜索引擎遵循中国政府的审查要求则可能有严重的道德问题，已有超过 1400 名谷歌员工在内部信上签名抗议，要求审查该项目。&lt;/p&gt;

&lt;p&gt;在信中，员工写道，此项目以及谷歌愿意遵守中国的审核制度已“引起严重的道德问题”，“目前我们没收到要求关于此项目需要遵守道德标准的通知。我们急切需要更多的透明度，更多的消息及知情权：谷歌的员工需要清楚自己究竟在从事什么样的工作。” 这场抗议代表了谷歌可能重返中国的另一个障碍。该公司8年前公开撤出中国，就是为了抗议审查和政府黑客入侵。&lt;/p&gt;

&lt;h4 id=&#34;3-一大波筹拍中的国产烂片正朝你涌来-https-zhuanlan-zhihu-com-p-41978032&#34;&gt;3. &lt;a href=&#34;https://zhuanlan.zhihu.com/p/41978032&#34; target=&#34;_blank&#34;&gt;一大波筹拍中的国产烂片正朝你涌来&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/aiqinggongyu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;最近，一部披着抄袭剧的皮，卖着《盗墓笔记》肉的借壳电影《爱情公寓》深陷舆论漩涡。&lt;/p&gt;

&lt;p&gt;即使片方采取了删评、买水军、举报等方式在 SNS 上力挽狂澜，却仍然没有摆脱与著名烂片《逐梦演艺圈》同分段的命运。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://pic2.zhimg.com/80/v2-c30957991c5a0ba31716056f11d068c1_hd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;其实对于国产影视作品我国观众一直存在着一种逆向歧视 —— 对外语片的追捧和对国产片的贬低。但这并不是因为我们存在偏见，也不是崇洋媚外，而是对国产片现状的恨铁不成钢。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;观众甚至不止一次地发出灵魂拷问：这样的烂片到底为什么能上映？！&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;4-这个挂钟-蓝牙音箱-将给你带来一整片星空-https-hypebeast-com-2016-5-cosmos-constellation-clock-bluetooth-speaker&#34;&gt;4. &lt;a href=&#34;https://hypebeast.com/2016/5/cosmos-constellation-clock-bluetooth-speaker&#34; target=&#34;_blank&#34;&gt;这个挂钟+蓝牙音箱，将给你带来一整片星空&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://images.ifanr.cn/wp-content/uploads/2018/08/01-star.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;设计师 Jay Hyun Kim 设计了一个颇有诗意的挂钟+蓝牙音箱合体 Cosmos，除了可以看时间和听音乐，它还会把银河星空带到你家里。所有北半球的星座都收录其中，放在桌面上就是一整个神秘宇宙。&lt;/p&gt;

&lt;h4 id=&#34;5-google-亲儿子pixel-3-系列渲染图曝光-https-www-martinhajek-com-pixel-3-3xl-cad-models-released&#34;&gt;5. &lt;a href=&#34;https://www.martinhajek.com/pixel-3-3xl-cad-models-released/&#34; target=&#34;_blank&#34;&gt;Google 亲儿子Pixel 3 系列渲染图曝光&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://images.ifanr.cn/wp-content/uploads/2018/08/b75327a9-0676-453f-9941-8ba0d4e5ecb2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;对于果粉来说下半年最值得买的手机肯定是 iPhone，但对于「硬核谷粉」来说，其他第三方品牌的手机都难以看得上眼，下半年最想要的手机肯定是亲儿子系列——Pixel 3/Pixel 3 XL。&lt;/p&gt;

&lt;p&gt;继上月 OnLeaks 曝光关于 Pixel 3 的部分信息图之后，近日其又曝出了 Pixel 3 和 Pixel 3 XL 这两款手机细节更加丰富的渲染图。&lt;/p&gt;

&lt;h4 id=&#34;6-apple-store-京都店将开业-https-9to5mac-com-2018-08-13-apple-kyoto-zero-gate-august-25&#34;&gt;6. &lt;a href=&#34;https://9to5mac.com/2018/08/13/apple-kyoto-zero-gate-august-25/&#34; target=&#34;_blank&#34;&gt;Apple Store 京都店将开业&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://images.ifanr.cn/wp-content/uploads/2018/08/0d0113bf-872c-49cf-8ee3-1eefea79f19b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;苹果近日宣布，日本京都全新 Apple Store 将于当地时间 8 月 25 日上午 10 点开幕。这家 Apple Store 位于京都府京都市下京区 Kyoto Zero Gate 购物中心，是苹果在日本的第 9 家直营门店。&lt;/p&gt;

&lt;h4 id=&#34;7-ai-组队在-dota-2-五对五团战中战胜人类-http-www-sohu-com-a-237764438-354973&#34;&gt;7. &lt;a href=&#34;http://www.sohu.com/a/237764438_354973&#34; target=&#34;_blank&#34;&gt;AI 组队在 Dota 2 五对五团战中战胜人类&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://5b0988e595225.cdn.sohucs.com/images/20180626/69db48fc3886480eb6787a4432d48362.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;去年，OpenAI 在 DOTA 的 1v1 比赛中战胜了职业玩家 Dendi，而在距离进阶版 OpenAI Five 系统战胜人类业余玩家不过一个月的时间，近日，它又以 2:1 的战绩再次完成对人类高级玩家的“屠杀”，GG（人类赢的最后一局纯属耍赖）。&lt;/p&gt;

&lt;h4 id=&#34;8-google-one-来了-onedrive-和-dropbox-害怕吗-https-www-leiphone-com-news-201808-9nkmpz06tt2d2j8m-html&#34;&gt;8. &lt;a href=&#34;https://www.leiphone.com/news/201808/9NKMPZ06tt2D2j8M.html&#34; target=&#34;_blank&#34;&gt;Google One 来了，OneDrive 和 Dropbox 害怕吗？&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://static.leiphone.com/uploads/new/images/20180816/5b74e95cdfc6c.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;近日，雷锋网收到邮件，Google日前正式推出了云存储服务的全新品牌 “Google One”，另外对存储资费进行了四年来第一次大幅下调。这意味着Google提供了更灵活的定价区间，也为消费者提供了更多的存储空间。据了解，此次推出的 “Google One” 是对 “Google Drive” 的一次更名。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-工具-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;工具&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-速盘双引擎版-https-www-speedpan-com-index-html&#34;&gt;1. &lt;a href=&#34;https://www.speedpan.com/index.html&#34; target=&#34;_blank&#34;&gt;速盘双引擎版&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/snipaste_20180806_191035.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;不知不觉间，百度云网盘几乎已成为国内互联网上最重要的网络资源分享和下载渠道了。平时无论是工作还是娱乐，不可避免地都需要下载&lt;strong&gt;百度网盘&lt;/strong&gt;的文件。&lt;/p&gt;

&lt;p&gt;然而现在百度网盘限速真的非常狠，几 KB/s 的下载速度简直慢到你怀疑人生。当然花钱开通会员是解决限速最简单的办法，但如果只是偶尔才下载一两个文件，充钱似乎又过于浪费。这时，**速盘 (SpeedPan) **这款免登录全速下载百度网盘的神器级小工具就可解你燃眉之急了……&lt;/p&gt;

&lt;h4 id=&#34;2-微博小程序-https-www-ifanr-com-minapp-1082708&#34;&gt;2. &lt;a href=&#34;https://www.ifanr.com/minapp/1082708&#34; target=&#34;_blank&#34;&gt;微博小程序&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://images.ifanr.cn/wp-content/uploads/2018/08/99-2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;不得不吐槽的是，以往在微信中打开微博链接的体验极差，尤其是 iOS 用户，想要完整阅读该条内容，必须先在 Safari 浏览器中打开，判断手机中是否安装了微博，判断的结果是安装了才能跳转到微博 app，打开这条微博信息。&lt;/p&gt;

&lt;p&gt;不过这两天我发现，把微博分享给微信好友，变成了以小程序方式呈现！现在的形式和之前的网页分享相比，「微博」小程序显然更加人性化：不必下载 app 即可查看微博原文、评论信息等。&lt;/p&gt;

&lt;h4 id=&#34;3-osx-kvm-https-github-com-kholia-osx-kvm&#34;&gt;3. &lt;a href=&#34;https://github.com/kholia/OSX-KVM&#34; target=&#34;_blank&#34;&gt;OSX-KVM&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;一个可以在 Linux 系统中通过 KVM 虚拟化技术运行 MacOS 的项目。&lt;/p&gt;

&lt;h4 id=&#34;4-chrono-下载管理器-https-chrome-google-com-webstore-detail-chrono-download-manager-mciiogijehkdemklbdcbfkefimifhecn-hl-zh-cn&#34;&gt;4. &lt;a href=&#34;https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn?hl=zh-CN&#34; target=&#34;_blank&#34;&gt;Chrono 下载管理器&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;众所周知, Chrome 原生的下载功能并不好用，不仅功能简陋，还会限制文件下载速度和数量。其中最最让人反感的，就是一旦开始下载就自动出现的底部栏。这个底部栏占用了浏览器不小的页面，存在感极强。除非手动关闭，否则哪怕是下载完毕它都不会自动消失，非常影响上网体验。&lt;/p&gt;

&lt;p&gt;这时候，大家或许就需要这款chrono下载管理器来解决这个问题了。（&lt;strong&gt;注意：是chrono不是chrome！&lt;/strong&gt;）&lt;/p&gt;

&lt;h4 id=&#34;5-medis-https-github-com-luin-medis&#34;&gt;5. &lt;a href=&#34;https://github.com/luin/medis&#34; target=&#34;_blank&#34;&gt;Medis&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/meids.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Medis 是一款Mac上优秀的Redis图形界面客户端，提供了大部分常用的功能，包括键空间的浏览、键和键值的增删改查、重命名修改 TTL 等。也提供了一些 redis-cli 难以实现的功能，包括创建键副本、修改列表值等，很不错！&lt;/p&gt;

&lt;h4 id=&#34;6-prometheus-formatter-https-github-com-fhemberger-chrome-prometheus-formatter&#34;&gt;6. &lt;a href=&#34;https://github.com/fhemberger/chrome-prometheus-formatter&#34; target=&#34;_blank&#34;&gt;Prometheus Formatter&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/prometheus-formatter.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;随着 Prometheus 从 CNCF 正式毕业，各种工具如雨后春笋。这款 Chrome 扩展就是用来高亮显示纯文本的 Prometheus 指标。&lt;/p&gt;

&lt;h4 id=&#34;7-promauthproxy-https-github-com-cherti-promauthproxy&#34;&gt;7. &lt;a href=&#34;https://github.com/cherti/PromAuthProxy&#34; target=&#34;_blank&#34;&gt;PromAuthProxy&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个 Prometheus 的加成工具，允许与多个用户共享 Prometheus 实例，每个用户只能看到自己的指标。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-教程-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;教程&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-kubebuilder-https-book-kubebuilder-io&#34;&gt;1. &lt;a href=&#34;https://book.kubebuilder.io/&#34; target=&#34;_blank&#34;&gt;KubeBuilder&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;如今的 Kubernetes 是如此的受欢迎。它继续主导容器技术的未来发展，同时 Kubernetes 也会带来越来越多的好东西。Kubebuilder 是一个用于在 Go 中快速构建和发布 Kubernetes API 的 SDK。它建立在用于构建核心 Kubernetes API 的规范技术之上，以提供简化的抽象，减少样板和工作。类似于 Ruby on Rails 和 SpringBoot 等 Web 开发框架，Kubebuilder 提高了速度并降低了开发人员管理的复杂性。&lt;/p&gt;

&lt;p&gt;简而言之，Kubebuilder 提供了开发人员为构建和发布 Kubernetes API 所需的所有强大的库和工具。它的理念非常简单。Kubebuilder 希望提供清晰的库的抽象，包括清晰且完好的示例。&lt;/p&gt;

&lt;h4 id=&#34;2-the-site-reliability-workbook-https-landing-google-com-sre-book-html&#34;&gt;2. &lt;a href=&#34;https://landing.google.com/sre/book.html&#34; target=&#34;_blank&#34;&gt;The Site Reliability Workbook&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/workbook-2x.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在 7 月 24 日的 Google Next &amp;lsquo;18 大会上，Google 发布了 SRE 系列新书《The Site Reliability Workbook — Practical Ways to Implement SRE》纸质版。&lt;/p&gt;

&lt;p&gt;这是 Google SRE 系列的第二本书，第一本书《Site Reliability Engineering：How Google Runs Production Systems》于 2016 年 4 月 16 日首次出版，中译版《SRE：Google 运维解密》于 2016 年 10 月 1 日出版。如果你读过《SRE：Google 运维解密》，不妨也可以接着看看这本新书。现在 Google 提供了这本书的免费 PDF 下载，&lt;strong&gt;限时到 8 月 23 日！&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&#34;3-prometheus-up-and-running-https-www-robustperception-io-prometheus-up-and-running-is-out&#34;&gt;3. &lt;a href=&#34;https://www.robustperception.io/prometheus-up-and-running-is-out&#34; target=&#34;_blank&#34;&gt;Prometheus: Up and Running&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/book-cover-914x1200.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是一本 Prometheus 的操作指南，内容非常详实，从架构设计到仪表盘、配置、查询和管理，应有尽有。全书共 386 页，目前美国亚马逊官网有出售，国内尚未引进。&lt;/p&gt;

&lt;h4 id=&#34;4-vue-js-源码分析-https-github-com-ustbhuangyi-vue-analysis&#34;&gt;4. &lt;a href=&#34;https://github.com/ustbhuangyi/vue-analysis&#34; target=&#34;_blank&#34;&gt;Vue.js 源码分析&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/vue-analysis.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;目前社区有很多 Vue.js 的源码解析文章，但是质量层次不齐，不够系统和全面，这本电子书的目标是全方位细致深度解析 Vue.js 的实现原理，让同学们可以彻底掌握 Vue.js。&lt;/p&gt;

&lt;h4 id=&#34;5-you-don-t-know-js-https-github-com-getify-you-dont-know-js&#34;&gt;5. &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34; target=&#34;_blank&#34;&gt;You Don&amp;rsquo;t Know JS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/you-don%27t-know-js.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是一套深入探讨 JavaScript 语言核心机制的系列丛书。本系列的第一版已经完成，诚意推荐给所有的前端工程师（或者 JavaScript 工程师，以及其它想了解这门语言一些细节的人），不过初学者并不建议阅读，这本书里没有任何基础知识，主要面向的是有经验的工程师，用来加深对一些概念和细节的认识和理解，但并不能教会你如何写 JavaScript。&lt;/p&gt;

&lt;h4 id=&#34;6-interview-notes-chinese-https-github-com-imhuay-interview-notes-chinese&#34;&gt;6. &lt;a href=&#34;https://github.com/imhuay/Interview_Notes-Chinese&#34; target=&#34;_blank&#34;&gt;Interview_Notes-Chinese&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;2018/2019/校招/春招/秋招/自然语言处理(NLP)/深度学习(Deep Learning)/机器学习(Machine Learning)/C/C++/Python/面试笔记&lt;/p&gt;

&lt;h4 id=&#34;7-build-your-own-x-https-github-com-danistefanovic-build-your-own-x&#34;&gt;7. &lt;a href=&#34;https://github.com/danistefanovic/build-your-own-x&#34; target=&#34;_blank&#34;&gt;build-your-own-x&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/feynman.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;费曼：“我不能创造的东西，我就不了解。”该项目收集了不同编程语言造轮子的教程。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-资源-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;资源&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-google空间-gplayspace-http-gplayspace-com&#34;&gt;1. &lt;a href=&#34;http://gplayspace.com/&#34; target=&#34;_blank&#34;&gt;Google空间（Gplayspace）&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一个可以直连 Google Play 商店的良心应用。软件内置的国外节点，相当于中转的功能。安装后自动安装谷歌框架和服务，在搜索框中输入关键词，就可以搜索美国、香港、日本、韩国等多地的谷歌市场。&lt;/p&gt;

&lt;p&gt;Gplayspace 相当于生成一个空间，空间内的软件有富强功能，可以用它来看 bilibili 的海外版权视频，也可以用来玩外服的安卓游戏，也可以将本地的软件添加进去，达到富强目的。&lt;/p&gt;

&lt;h4 id=&#34;2-paascloud-master-https-github-com-paascloud-paascloud-master&#34;&gt;2. &lt;a href=&#34;https://github.com/paascloud/paascloud-master&#34; target=&#34;_blank&#34;&gt;paascloud-master&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;spring cloud + vue 全家桶实战，模拟商城，完整的购物流程、后端运营平台，可以实现快速搭建企业级微服务项目。&lt;/p&gt;

&lt;h4 id=&#34;3-react-tetris-https-github-com-chvin-react-tetris&#34;&gt;3. &lt;a href=&#34;https://github.com/chvin/react-tetris&#34; target=&#34;_blank&#34;&gt;react-tetris&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/react-tetris.gif&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;逼真的俄罗斯方块（非常逼真、强大！），有详细的技术介绍。&lt;a href=&#34;https://chvin.github.io/react-tetris/?lan=zh&#34; target=&#34;_blank&#34;&gt;在线试玩&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;4-chinese-programmer-wrong-pronunciation-https-github-com-shimohq-chinese-programmer-wrong-pronunciation&#34;&gt;4. &lt;a href=&#34;https://github.com/shimohq/chinese-programmer-wrong-pronunciation&#34; target=&#34;_blank&#34;&gt;chinese-programmer-wrong-pronunciation&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;收集了中国程序员容易发音错误的单词，比如 App 正确读音为 ✅ [æp] 而不是 [eipi&amp;rsquo;pi]&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-奇闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;奇闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-日本人名的历史起源&#34;&gt;1. 日本人名的历史起源&lt;/h4&gt;

&lt;p&gt;幕府时代的日本很穷，在黑暗的等级制度下，再加上资源匮乏，日本的生产力水平不仅无法跟当时的中华帝国相比，在全世界范围内都算比较低的。根据一些史料记载，很长一段时间里日本人都没有解决住房问题。一家人要居住了，就随便找个地方挖个洞，而这个洞要挖得很有水平。&lt;/p&gt;

&lt;p&gt;他们叫“直洞”，也就是在地上直挖下去，洞口用茅草挡着雨水，洞中间插根木棒棒作为双手攀爬的直梯工具。早上出去劳动，爬上之前要朝洞口大喊一声：“我出去了！”这是为了防止有人在洞外准备撒尿或者鸟拉屎到头上；同理，晚上回来跳下来之前还要大喊一声：“我回来了！”&lt;/p&gt;

&lt;p&gt;如果事先不打那声招呼，那是很容易踩到洞里家人的头上的。&lt;/p&gt;

&lt;p&gt;西方人称日本人为“亚洲黄猴”，除了脸长，脖子短、腿短等因素外，会爬树也是一个原因。“嗖”的一声，他就出去了。&lt;/p&gt;

&lt;p&gt;还有一种说法，日本人挖这些洞有另外的一些讲究。为了能遮风挡雨，方便进出，经常挖在一些对生活比较便利的地方，比如“松下”、“渡边”、“山口”、“田中”、“竹下”等，天长日久，这些地标就成了日本人最常见的姓氏，方便大家记忆————你是从松下来的，你是从渡边来的。。。&lt;/p&gt;

&lt;h4 id=&#34;2-黑洞很污&#34;&gt;2. 黑洞很污&lt;/h4&gt;

&lt;p&gt;1915年左右的时代，黑洞的名字叫做“史瓦西奇点”。由于大物理学家如爱因斯坦，爱丁顿，奥本海默都不愿意承认黑洞的存在，这个名字就这么用着。&lt;/p&gt;

&lt;p&gt;1965年左右的时代，苏联称黑洞为“冻星”，西方称黑洞为“视界”，前者在意人们观测到的，星体似乎在临界周长处冻结的静止特点，后者在意光无法从临界周长处逃出的运动特点。两者都有道理，也都不够形象。&lt;/p&gt;

&lt;p&gt;于是，大物理学家惠勒，取名“黑洞”。信。达。这个词在法语里是“trou noir”，不雅，法国抵制了很多年。据说法国的黑洞研究因此停滞。&lt;/p&gt;

&lt;p&gt;后来，物理学家金兹堡提出黑洞形成后不会保留形成之前恒星的特性，物理学家伊斯雷尔首先在论文中使用“无毛”一词，由此传开。这回，在法语和俄语里一起不雅，但还是被广泛使用了。因为十分信。十分达。&lt;/p&gt;

&lt;p&gt;据说物理学家们为了追求真理，才不在乎雅不雅的，是吧。&lt;/p&gt;

&lt;h4 id=&#34;3-韩国国旗的来历&#34;&gt;3. 韩国国旗的来历&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/chaoxian.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;在明朝，朝鲜（包括现在的朝鲜和韩国）是大明帝国的藩属国，天聪元年（1627年），皇太极对明作战失败，缺少银两，就先易后难，派大将阿敏攻下了朝鲜（打朝鲜不攻山海关），从此朝鲜成为八旗军的后勤供应基地，&lt;strong&gt;粮食可能不管饱，但人参随便拿。。。&lt;/strong&gt;你想没事就喝个参汤的军队打仗有多猛。就这样，八旗一边流鼻血一边砍敌人，一路杀进山海关。大清建立后，朝鲜自然而然沦为大清藩属国（虽然他们一直很想念明朝）。&lt;/p&gt;

&lt;p&gt;所谓藩属国，有点类似于被老大保护老二的意思。朝鲜只有“国王”，而没有“皇帝”，因为他们的“皇帝”就是大清皇帝，使用的年号也是大清的年号。而朝鲜国王在级别上只相当于大清国的亲王。由于这个原因，朝鲜国王的王宫和老百姓的民居都必须比清国的矮小。我们知道如今大韩民国的国旗是太极旗，实际上当年朝鲜人设计国旗时，清国依据自己的国旗是黄龙旗，给朝鲜的指导方案是————蟒旗（蟒是一种在地上爬的龙）。朝鲜人终于有想法了：大家都是做龙的，你们在天上飞，我们在地上爬，娘的这版本也差得太大了吧，于是就改成了太极旗。&lt;/p&gt;

&lt;h4 id=&#34;4-wi-fi-之母&#34;&gt;4. Wi-Fi 之母&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Hedy_Lamarr_Publicity_Photo_for_The_Heavenly_Body_1944.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;今天我要介绍一位超级大美女给大家认识。&lt;/p&gt;

&lt;p&gt;她是好莱坞艳绝一时的女明星，创办过自己的电影公司，被称为&lt;strong&gt;“世界上最美丽的女人”&lt;/strong&gt;，也是世界上第一个&lt;strong&gt;全裸出镜&lt;/strong&gt;的女演员，第一个在电影里“高潮”的女演员，甚至惊动了教皇。。。&lt;/p&gt;

&lt;p&gt;更重要的是，她发明的跳频技术，是现代 CDMA、Wi-Fi、GPS、军事卫星系统的基础，如今&lt;strong&gt;市场价值约300亿美元。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;她就是&lt;strong&gt;海蒂·拉玛（Hedy Lamarr）&lt;/strong&gt;，有史以来颜值最高的科学家、发明家，通信行业的骄傲。想不到给了我第二条生命（Wi-Fi）的母亲竟然这么美！&lt;/p&gt;

&lt;p&gt;在 2005 年出版的《高通方程式》一书中，著名通讯专家&lt;strong&gt;戴夫·莫克&lt;/strong&gt;是这样评价她的：只要你使用过移动电话，你就有必要感谢海蒂·拉玛。要知道，这位性感的女明星为全球无线通讯技术所做的贡献至今&lt;strong&gt;无人能及&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;她有着近乎完美的容颜，几乎是所有男人的梦中情人，所有女性羡慕的对象。&lt;strong&gt;“比我漂亮的没我聪明，比我聪明的没我漂亮。”&lt;/strong&gt; 能说这句话的，估计只有她了。天下群芳，莫敢与之争。就连《乱世佳人》女主费雯·丽，也因被说长得像海蒂·拉玛而感到暗自窃喜。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;此刻正在玩手机的你，一定要认识感谢她呀！&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-欢迎关注-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;欢迎关注&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;该系列每周六发布，同步更新在我的&lt;a href=&#34;https://www.yangcs.net/&#34; target=&#34;_blank&#34;&gt;个人博客&lt;/a&gt;和微信公众号上。&lt;/p&gt;

&lt;p&gt;微信搜索 “云原生实验室” 或者扫描二维码即可关注。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>控制 Egress 流量</title>
      <link>https://www.yangcs.net/posts/control-egress-traffic/</link>
      <pubDate>Thu, 16 Aug 2018 13:40:27 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/control-egress-traffic/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p id=&#34;div-border-left-red&#34;&gt;本文主要内容来自 &lt;a href=&#34;https://istio.io/zh/docs/tasks/traffic-management/egress/&#34; target=&#34;_blank&#34;&gt;Istio 官方文档&lt;/a&gt;，并对其进行了大量扩展和补充。&lt;/p&gt;

&lt;p&gt;缺省情况下，Istio 服务网格内的 Pod，由于其 iptables 将所有外发流量都透明的转发给了 &lt;code&gt;Sidecar&lt;/code&gt;，所以这些集群内的服务无法访问集群之外的 URL，而只能处理集群内部的目标。&lt;/p&gt;

&lt;p&gt;本文的任务描述了如何将外部服务暴露给 Istio 集群中的客户端。你将会学到如何通过定义 &lt;a href=&#34;https://istio.io/docs/reference/config/istio.networking.v1alpha3/#ServiceEntry&#34; target=&#34;_blank&#34;&gt;ServiceEntry&lt;/a&gt; 来调用外部服务；或者简单的对 Istio 进行配置，要求其直接放行对特定 IP 范围的访问。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-1-开始之前-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;1. 开始之前&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;根据&lt;a href=&#34;https://www.yangcs.net/posts/istio-1.0-deploy/&#34; target=&#34;_blank&#34;&gt;安装指南&lt;/a&gt;的内容，部署 Istio。&lt;/li&gt;
&lt;li&gt;启动 &lt;a href=&#34;https://github.com/istio/istio/tree/release-1.0/samples/sleep&#34; target=&#34;_blank&#34;&gt;sleep&lt;/a&gt; 示例应用，我们将会使用这一应用来完成对外部服务的调用过程。 如果启用了 &lt;a href=&#34;https://istio.io/zh/docs/setup/kubernetes/sidecar-injection/#sidecar-%E7%9A%84%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5&#34; target=&#34;_blank&#34;&gt;Sidecar 的自动注入功能&lt;/a&gt;，运行：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl apply -f samples/sleep/sleep.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;否则在部署 &lt;code&gt;sleep&lt;/code&gt; 应用之前，就需要手工注入 Sidecar：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl apply -f &amp;lt;(istioctl kube-inject -f samples/sleep/sleep.yaml)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上任何可以 &lt;code&gt;exec&lt;/code&gt; 和 &lt;code&gt;curl&lt;/code&gt; 的 Pod 都可以用来完成这一任务。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-2-istio-中配置外部服务-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;2. Istio 中配置外部服务&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;通过配置 Istio &lt;code&gt;ServiceEntry&lt;/code&gt;，可以从 Istio 集群中访问外部任意的可用服务。这里我们会使用 &lt;a href=&#34;http://httpbin.org/&#34; target=&#34;_blank&#34;&gt;httpbin.org&lt;/a&gt; 以及 &lt;a href=&#34;https://www.baidu.com/&#34; target=&#34;_blank&#34;&gt;www.baidu.com&lt;/a&gt; 进行试验。&lt;/p&gt;

&lt;h4 id=&#34;配置外部服务&#34;&gt;配置外部服务&lt;/h4&gt;

&lt;p id=&#34;blue&#34;&gt;1. 创建一个 &lt;code&gt;ServiceEntry&lt;/code&gt; 对象，放行对一个外部 HTTP 服务的访问：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ cat &amp;lt;&amp;lt;EOF | istioctl create -f -
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: httpbin-ext
spec:
  hosts:
  - httpbin.org
  ports:
  - number: 80
    name: http
    protocol: HTTP
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=&#34;blue&#34;&gt;2. 另外创建一个 &lt;code&gt;ServiceEntry&lt;/code&gt; 对象和一个 &lt;code&gt;VirtualService&lt;/code&gt;，放行对一个外部 HTTPS 服务的访问：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ cat &amp;lt;&amp;lt;EOF | istioctl create -f -
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: baidu
spec:
  hosts:
  - www.baidu.com
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: baidu
spec:
  hosts:
  - www.baidu.com
  tls:
  - match:
    - port: 443
      sniHosts:
      - www.baidu.com
    route:
    - destination:
        host: www.baidu.com
        port:
          number: 443
      weight: 100
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;发起对外部服务的访问&#34;&gt;发起对外部服务的访问&lt;/h4&gt;

&lt;p&gt;使用 &lt;code&gt;kubectl exec&lt;/code&gt; 命令进入测试 Pod。假设使用的是 sleep 服务，运行如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export SOURCE_POD=$(kubectl get pod -l app=sleep -o go-template=&#39;{{range .items}}{{.metadata.name}}{{end}}&#39;)
$ kubectl exec -it $SOURCE_POD -c sleep bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发起一个对外部 HTTP 服务的请求：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://httpbin.org/headers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发起一个对外部 HTTPS 服务的请求：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl https://www.baidu.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;http-serviceentry-配置深度解析&#34;&gt;HTTP ServiceEntry 配置深度解析&lt;/h4&gt;

&lt;p&gt;按照之前的惯例，还是先来解读一下 HTTP 协议的 &lt;code&gt;ServiceEntry&lt;/code&gt; 映射到 Envoy 配置层面具体是哪些内容，这样才能对 ServiceEntry 有更加深刻的认识。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;创建一个 &lt;code&gt;HTTP&lt;/code&gt; 协议的 ServiceEntry（不指定 &lt;code&gt;GateWay&lt;/code&gt;） 本质上是在服务网格内的&lt;strong&gt;所有应用的所有 Pod&lt;/strong&gt;上创建相应的路由规则和与之对应的 Cluster。指定 GateWay 的 ServiceEntry 遵循的是另一套法则，后面我们再说。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;可以通过 istioctl 来验证一下（以 &lt;code&gt;httpbin-ext&lt;/code&gt; 为例）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 查看 sleep 的 Pod Name：
$ kubectl get pod -l app=sleep

NAME                     READY     STATUS    RESTARTS   AGE
sleep-5bc866558c-89shb   2/2       Running   0          49m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看路由&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl pc routes sleep-5bc866558c-89shb --name 80 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;80&amp;quot;,
        &amp;quot;virtualHosts&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;httpbin.org:80&amp;quot;,
                &amp;quot;domains&amp;quot;: [
                    &amp;quot;httpbin.org&amp;quot;,
                    &amp;quot;httpbin.org:80&amp;quot;
                ],
                &amp;quot;routes&amp;quot;: [
                    {
                        &amp;quot;match&amp;quot;: {
                            &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
                        },
                        &amp;quot;route&amp;quot;: {
                            &amp;quot;cluster&amp;quot;: &amp;quot;outbound|80||httpbin.org&amp;quot;,
                            &amp;quot;timeout&amp;quot;: &amp;quot;0.000s&amp;quot;,
                            &amp;quot;maxGrpcTimeout&amp;quot;: &amp;quot;0.000s&amp;quot;
                        },
                        &amp;quot;decorator&amp;quot;: {
                            &amp;quot;operation&amp;quot;: &amp;quot;httpbin.org:80/*&amp;quot;
                        },
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到从 Pod sleep-5bc866558c-89shb 内部对域名 &lt;code&gt;httpbin.org&lt;/code&gt; 发起的请求通过 HTTP 路由被定向到集群 &lt;code&gt;outbound|80||httpbin.org&lt;/code&gt;。&lt;code&gt;outbound&lt;/code&gt; 表示这是出站流量&lt;/p&gt;

&lt;p&gt;查看 &lt;code&gt;Cluster&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl pc clusters sleep-5bc866558c-89shb --fqdn httpbin.org -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;outbound|80||httpbin.org&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;ORIGINAL_DST&amp;quot;,
        &amp;quot;connectTimeout&amp;quot;: &amp;quot;1.000s&amp;quot;,
        &amp;quot;lbPolicy&amp;quot;: &amp;quot;ORIGINAL_DST_LB&amp;quot;,
        &amp;quot;circuitBreakers&amp;quot;: {
            &amp;quot;thresholds&amp;quot;: [
                {}
            ]
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;type&lt;/span&gt; : 服务发现类型。&lt;code&gt;ORIGINAL_DST&lt;/code&gt; 表示原始目的地类型，大概意思就是：连接进入之前已经被解析为一个特定的目标 IP 地址。这种连接通常是由代理使用 IP table REDIRECT 或者 eBPF 之类的机制转发而来的。完成路由相关的转换之后，代理服务器会将连接转发到该 IP 地址。&lt;code&gt;httpbin.org&lt;/code&gt; 是外网域名，当然可以解析，所以连接进入之前可以被解析为一个特定的目标 IP 地址。Envoy 服务发现类型的详细解析可以参考：&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/service_discovery#arch-overview-service-discovery-types-original-destination&#34; target=&#34;_blank&#34;&gt;Service discovery&lt;/a&gt;。&lt;code&gt;ServiceEntry.Resolution&lt;/code&gt; 字段的解析可以参考：&lt;a href=&#34;https://istio.io/docs/reference/config/istio.networking.v1alpha3/#ServiceEntry-Resolution&#34; target=&#34;_blank&#34;&gt;ServiceEntry.Resolution&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这里我简要说明一下，ServiceEntry 的 &lt;code&gt;resolution&lt;/code&gt; 字段可以取三个不同的值，分别对应 Envoy 中的三种服务发现策略：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;NONE&lt;/code&gt; : 对应于 Envoy 中的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/service_discovery#original-destination&#34; target=&#34;_blank&#34;&gt;ORIGINAL_DST&lt;/a&gt;。如果不指定 resolution 字段，默认使用这个策略。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;STATIC&lt;/code&gt; : 对应于 Envoy 中的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/service_discovery#static&#34; target=&#34;_blank&#34;&gt;STATIC&lt;/a&gt;。表示使用 &lt;code&gt;endpoints&lt;/code&gt; 中指定的静态 IP 地址作为服务后端。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;DNS&lt;/code&gt; : 对应于 Envoy 中的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/service_discovery#strict-dns&#34; target=&#34;_blank&#34;&gt;STRICT_DNS&lt;/a&gt;。表示处理请求时尝试向 DNS 查询 IP 地址。如果没有指定 &lt;code&gt;endpoints&lt;/code&gt;，并且没有使用通配符，代理服务器会使用 DNS 解析 &lt;code&gt;hosts&lt;/code&gt; 字段中的地址。如果指定了 &lt;code&gt;endpoints&lt;/code&gt;，那么指定的地址就会作为目标 IP 地址。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;lbPolicy&lt;/span&gt; : 负载均衡策略。&lt;code&gt;ORIGINAL_DST_LB&lt;/code&gt; 表示使用原始目的地的负载均衡策略。具体参考: &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/load_balancing&#34; target=&#34;_blank&#34;&gt;Load balancing&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你还部署了 &lt;code&gt;bookinfo&lt;/code&gt; 示例应用，可以通过执行 &lt;code&gt;istioctl pc routes &amp;lt;productpage_pod_name&amp;gt; --name 80 -o json&lt;/code&gt; 和 &lt;code&gt;istioctl pc clusters &amp;lt;productpage_pod_name&amp;gt; --fqdn httpbin.org -o json&lt;/code&gt; 来验证一下，你会发现输出的结果和上面一模一样。如果还不放心，可以查看 bookinfo 应用内的所有 Pod，你会得到相同的答案。至此你应该可以理解&lt;strong&gt;在服务网格内的所有应用的所有 Pod上创建相应的路由规则和与之对应的 Cluster&lt;/strong&gt;这句话的含义了。&lt;/p&gt;

&lt;h4 id=&#34;https-serviceentry-配置深度解析&#34;&gt;HTTPS ServiceEntry 配置深度解析&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;HTTPS&lt;/code&gt; 协议的 ServiceEntry 与 Envoy 配置文件的映射关系与 HTTP 协议有所不同。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;创建一个 &lt;code&gt;HTTPS&lt;/code&gt; 协议的 ServiceEntry（不指定 &lt;code&gt;GateWay&lt;/code&gt;） 本质上是在服务网格内的&lt;strong&gt;所有应用的所有 Pod&lt;/strong&gt;上创建相应的&lt;strong&gt;监听器&lt;/strong&gt;和与之对应的 Cluster。指定 GateWay 的 ServiceEntry 我会另行发文详说。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;可以通过 istioctl 来验证（以 &lt;code&gt;baidu&lt;/code&gt; 为例）。为了更精确地分析该 ServiceEntry，可以先把 &lt;code&gt;VirtualService&lt;/code&gt; 删除：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl delete virtualservice baidu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看监听器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl pc listeners sleep-5bc866558c-89shb --address 0.0.0.0 --port 443 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_443&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 443
            }
        },
        &amp;quot;filterChains&amp;quot;: [
            {
                &amp;quot;filters&amp;quot;: [
                    ...
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
                        &amp;quot;config&amp;quot;: {
                            &amp;quot;cluster&amp;quot;: &amp;quot;outbound|443||www.baidu.com&amp;quot;,
                            &amp;quot;stat_prefix&amp;quot;: &amp;quot;outbound|443||www.baidu.com&amp;quot;
                        }
                    }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id=&#34;inline-blue&#34;&gt;name&lt;/span&gt; : 监听器过滤器的名称。该字段的值必须与 Envoy 所支持的过滤器匹配，不可随意填写，具体参考：&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/listener/listener.proto#listener-filter&#34; target=&#34;_blank&#34;&gt;listener.Filter&lt;/a&gt;。此处 &lt;code&gt;envoy.tcp_proxy&lt;/code&gt; 表示使用 TCP 代理，而 TCP 代理是无法基于路由过滤的，所以这里不会创建路由规则，而是直接将请求转到 &lt;code&gt;Cluster&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;查看 Cluster：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl pc clusters sleep-5bc866558c-89shb --fqdn www.baidu.com -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;outbound|443||www.baidu.com&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;STRICT_DNS&amp;quot;,
        &amp;quot;connectTimeout&amp;quot;: &amp;quot;1.000s&amp;quot;,
        &amp;quot;hosts&amp;quot;: [
            {
                &amp;quot;socketAddress&amp;quot;: {
                    &amp;quot;address&amp;quot;: &amp;quot;www.baidu.com&amp;quot;,
                    &amp;quot;portValue&amp;quot;: 443
                }
            }
        ],
        &amp;quot;circuitBreakers&amp;quot;: {
            &amp;quot;thresholds&amp;quot;: [
                {}
            ]
        },
        &amp;quot;dnsLookupFamily&amp;quot;: &amp;quot;V4_ONLY&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从监听器的配置来看，由于绑定的是 &lt;code&gt;0.0.0.0&lt;/code&gt;，而且也没有指定域名，看起来应该可以访问集群外任何 443 端口的服务。实际上这是行不通的，因为当请求通过监听器转到 Cluster 之后，由于 Cluster 采用的是严格的 DNS 服务发现策略，只要域名不是 &lt;code&gt;www.baidu.com&lt;/code&gt;，都不会解析。你可以使用 kubectl exec 命令进入 sleep Pod 来测试一下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec -it $SOURCE_POD -c sleep bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发起对外部 HTTPS 服务的请求：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl https://www.163.com
curl: (51) SSL: no alternative certificate subject name matches target host name &#39;www.163.com&#39;

$ curl https://www.taobao.com
curl: (51) SSL: no alternative certificate subject name matches target host name &#39;www.taobao.com&#39;

$ curl https://192.192.192.192
curl: (51) SSL: certificate subject name &#39;baidu.com&#39; does not match target host name &#39;192.192.192.192&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而如果你将服务发现策略改为 &lt;code&gt;NONE&lt;/code&gt;，就会发现除了可以访问 &lt;code&gt;www.baidu.com&lt;/code&gt;，还可以访问 &lt;code&gt;www.163.com&lt;/code&gt; 和 &lt;code&gt;www.taobao.com&lt;/code&gt; 等其他 https 协议的网站，至于为什么会这样，前面介绍服务发现策略的时候我已经详细解释过了。&lt;/p&gt;

&lt;h4 id=&#34;tls-virtualservice-配置深度解析&#34;&gt;TLS VirtualService 配置深度解析&lt;/h4&gt;

&lt;p&gt;关于 VirtualService 的解析之前的文章已有相关说明，不过这里的 VirtualService 与之前遇到的不同，涉及到了 &lt;code&gt;TLSRoute&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;tls&lt;/span&gt; : 透传 TLS 和 HTTPS 流量。TLS 路由通常应用在 &lt;code&gt;https-&lt;/code&gt;、&lt;code&gt;tls-&lt;/code&gt; 前缀的平台服务端口，或者经 &lt;code&gt;Gateway&lt;/code&gt; 透传的 HTTPS、TLS 协议 端口，以及使用 HTTPS 或者 TLS 协议的 &lt;code&gt;ServiceEntry&lt;/code&gt; 端口上。具体参考：&lt;a href=&#34;https://istio.io/docs/reference/config/istio.networking.v1alpha3/#TLSRoute&#34; target=&#34;_blank&#34;&gt;TLSRoute&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id=&#34;inline-blue&#34;&gt;sniHosts&lt;/span&gt; : 必要字段。要匹配的 SNI（服务器名称指示）。可以在 SNI 匹配值中使用通配符。比如 &lt;code&gt;*.com&lt;/code&gt; 可以同时匹配 &lt;code&gt;foo.example.com&lt;/code&gt; 和 &lt;code&gt;example.com&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;route&lt;/span&gt; : 流量的转发目标。目前 TLS 服务只允许一个转发目标(所以权重必须设置为 100)。当 Envoy 支持 TCP 权重路由之后，这里就可以使用多个目标了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;查看映射到 Envoy 中的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl pc listeners sleep-5bc866558c-89shb --address 0.0.0.0 --port 443 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_443&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 443
            }
        },
        &amp;quot;filterChains&amp;quot;: [
            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;serverNames&amp;quot;: [
                        &amp;quot;www.baidu.com&amp;quot;
                    ]
                },
                &amp;quot;filters&amp;quot;: [
                    ...
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
                        &amp;quot;config&amp;quot;: {
                            &amp;quot;cluster&amp;quot;: &amp;quot;outbound|443||www.baidu.com&amp;quot;,
                            &amp;quot;stat_prefix&amp;quot;: &amp;quot;outbound|443||www.baidu.com&amp;quot;
                        }
                    }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span id=&#34;inline-blue&#34;&gt;filterChainMatch&lt;/span&gt; : 用于为&lt;strong&gt;监听器过滤器链&lt;/strong&gt;指定匹配条件，具体参考：&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/listener/listener.proto#listener-filterchainmatch&#34; target=&#34;_blank&#34;&gt;listener.FilterChainMatch&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;最后我们来思考一下：既然不创建 TLS VirtualService 也可以访问 &lt;code&gt;www.baidu.com&lt;/code&gt;，那么创建 TLS VirtualService 和不创建 TLS VirtualService 有什么区别呢？正确答案是：没有关联 &lt;code&gt;VirtualService&lt;/code&gt; 的 &lt;code&gt;https-&lt;/code&gt; 或者 &lt;code&gt;tls-&lt;/code&gt; 端口流量会被视为透传 &lt;code&gt;TCP&lt;/code&gt; 流量，而不是透传 TLS 和 HTTPS 流量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;为外部服务设置路由规则&#34;&gt;为外部服务设置路由规则&lt;/h4&gt;

&lt;p&gt;通过 &lt;code&gt;ServiceEntry&lt;/code&gt; 访问外部服务的流量，和网格内流量类似，都可以进行 Istio &lt;a href=&#34;https://istio.io/zh/docs/concepts/traffic-management/#%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE&#34; target=&#34;_blank&#34;&gt;路由规则&lt;/a&gt; 的配置。下面我们使用 istioctl 为 httpbin.org 服务设置一个超时规则。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;1. 在测试 Pod 内部，调用 httpbin.org 这一外部服务的 &lt;code&gt;/delay&lt;/code&gt; 端点：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec -it $SOURCE_POD -c sleep bash
$ time curl -o /dev/null -s -w &amp;quot;%{http_code}\n&amp;quot; http://httpbin.org/delay/5

200

real    0m5.024s
user    0m0.003s
sys     0m0.003s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个请求会在大概五秒钟左右返回一个内容为 &lt;code&gt;200 (OK)&lt;/code&gt; 的响应。&lt;/p&gt;

&lt;p id=&#34;blue&#34;&gt;2. 退出测试 Pod，使用 &lt;code&gt;istioctl&lt;/code&gt; 为 httpbin.org 外部服务的访问设置一个 3 秒钟的超时：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cat &amp;lt;&amp;lt;EOF | istioctl create -f -
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin-ext
spec:
  hosts:
    - httpbin.org
  http:
  - timeout: 3s
    route:
      - destination:
          host: httpbin.org
        weight: 100
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p id=&#34;blue&#34;&gt;3. 等待几秒钟之后，再次发起 `curl` 请求：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl exec -it $SOURCE_POD -c sleep bash
$ time curl -o /dev/null -s -w &amp;quot;%{http_code}\n&amp;quot; http://httpbin.org/delay/5

504

real    0m3.149s
user    0m0.004s
sys     0m0.004s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一次会在 3 秒钟之后收到一个内容为 &lt;code&gt;504 (Gateway Timeout)&lt;/code&gt; 的响应。虽然 httpbin.org 还在等待他的 5 秒钟，Istio 却在 3 秒钟的时候切断了请求。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-3-直接调用外部服务-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;3. 直接调用外部服务&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;如果想要跳过 Istio，直接访问某个 IP 范围内的外部服务，就需要对 Envoy sidecar 进行配置，阻止 Envoy 对外部请求的&lt;a href=&#34;https://istio.io/zh/docs/concepts/traffic-management/#%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E8%AE%AF&#34; target=&#34;_blank&#34;&gt;劫持&lt;/a&gt;。可以在 &lt;a href=&#34;https://istio.io/docs/reference/config/installation-options/&#34; target=&#34;_blank&#34;&gt;Helm&lt;/a&gt; 中设置 &lt;code&gt;global.proxy.includeIPRanges&lt;/code&gt; 变量，然后使用 kubectl apply 命令来更新名为 &lt;code&gt;istio-sidecar-injector&lt;/code&gt; 的 &lt;code&gt;Configmap&lt;/code&gt;。在 istio-sidecar-injector 更新之后，global.proxy.includeIPRanges 会在所有未来部署的 Pod 中生效。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;global.proxy.includeIPRanges&lt;/code&gt; 变量的最简单方式就是把内部服务的 IP 地址范围传递给它，这样就在 Sidecar proxy 的重定向列表中排除掉了外部服务的地址了。&lt;/p&gt;

&lt;p&gt;内部服务的 IP 范围取决于集群的部署情况。例如你的集群中这一范围是 &lt;code&gt;10.0.0.1/24&lt;/code&gt;，这个配置中，就应该这样更新 istio-sidecar-injector：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ helm template install/kubernetes/helm/istio &amp;lt;安装 Istio 时所使用的参数&amp;gt; --set global.proxy.includeIPRanges=&amp;quot;10.0.0.1/24&amp;quot; -x templates/sidecar-injector-configmap.yaml | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意这里应该使用和之前部署 Istio 的时候同样的 Helm 命令，尤其是 &amp;ndash;namespace 参数。在安装 Istio 原有命令的基础之上，加入 &lt;code&gt;--set global.proxy.includeIPRanges=&amp;quot;10.0.0.1/24&amp;quot; -x templates/sidecar-injector-configmap.yaml&lt;/code&gt; 即可。&lt;/p&gt;

&lt;p&gt;然后和前面一样，重新部署 sleep 应用。更新了 &lt;code&gt;ConfigMap istio-sidecar-injector&lt;/code&gt; 并且重新部署了 sleep 应用之后，Istio sidecar 就应该只劫持和管理集群内部的请求了。任意的外部请求都会简单的绕过 Sidecar，直接访问目的地址。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export SOURCE_POD=$(kubectl get pod -l app=sleep -o go-template=&#39;{{range .items}}{{.metadata.name}}{{end}}&#39;)
$ kubectl exec -it $SOURCE_POD -c sleep curl http://httpbin.org/headers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-4-总结-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;4. 总结&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;这个任务中，我们使用两种方式从 Istio 服务网格内部来完成对外部服务的调用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;ServiceEntry&lt;/code&gt; (推荐方式)&lt;/li&gt;
&lt;li&gt;配置 Istio sidecar，从它的重定向 IP 表中排除外部服务的 IP 范围&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第一种方式（&lt;code&gt;ServiceEntry&lt;/code&gt;）中，网格内部的服务不论是访问内部还是外部的服务，都可以使用同样的 Istio 服务网格的特性。我们通过为外部服务访问设置超时规则的例子，来证实了这一优势。&lt;/p&gt;

&lt;p&gt;第二种方式越过了 Istio sidecar proxy，让服务直接访问到对应的外部地址。然而要进行这种配置，需要了解云供应商特定的知识和配置。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-5-清理-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;5. 清理&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&#34;blue&#34;&gt;1. 删除规则：&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl delete serviceentry httpbin-ext baidu
$ istioctl delete virtualservice httpbin-ext baidu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span id=&#34;blue&#34;&gt;2. 停止 sleep 服务：&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl delete -f samples/sleep/sleep.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;扫一扫关注微信公众号&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#blue {
color: #2780e3;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>请求都去哪了？（续）</title>
      <link>https://www.yangcs.net/posts/where-is-the-request-2/</link>
      <pubDate>Mon, 13 Aug 2018 16:30:30 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/where-is-the-request-2/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;书接前文，上文我们通过跟踪&lt;strong&gt;集群外通过 ingressgateway 发起的请求&lt;/strong&gt;来探寻流量在 Istio 服务网格之间的流动方向，先部署 bookinfo 示例应用，然后创建一个监听在 &lt;code&gt;ingressgateway&lt;/code&gt; 上的  GateWay 和 VirtualService，通过分析我们追踪到请求最后转交给了 &lt;code&gt;productpage&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在继续追踪请求之前，先对之前的内容做一个补充说明。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-1-pod-在服务网格之间如何通信-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;1. Pod 在服务网格之间如何通信？&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;大家都知道，在 Istio 尚未出现之前，Kubernetes 集群内部 Pod 之间是通过 &lt;code&gt;ClusterIP&lt;/code&gt; 来进行通信的，那么通过 Istio 在 Pod 内部插入了 &lt;code&gt;Sidecar&lt;/code&gt; 之后，微服务应用之间是否仍然还是通过 ClusterIP 来通信呢？我们来一探究竟！&lt;/p&gt;

&lt;p&gt;继续拿上文的步骤举例子，来看一下 ingressgateway 和 productpage 之间如何通信，请求通过 ingressgateway 到达了 &lt;code&gt;endpoint&lt;/code&gt; ，那么这个 endpoint 到底是 &lt;code&gt;ClusterIP&lt;/code&gt; + Port 还是 &lt;code&gt;PodIP&lt;/code&gt; + Port 呢？由于 istioctl 没有提供 eds 的查看参数，可以通过 pilot 的 xds debug 接口来查看：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 获取 istio-pilot 的 ClusterIP
$ export PILOT_SVC_IP=$(kubectl -n istio-system get svc -l app=istio-pilot -o go-template=&#39;{{range .items}}{{.spec.clusterIP}}{{end}}&#39;)

# 查看 eds
$ curl http://$PILOT_SVC_IP:8080/debug/edsz|grep &amp;quot;outbound|9080||productpage.default.svc.cluster.local&amp;quot; -A 27 -B 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;clusterName&amp;quot;: &amp;quot;outbound|9080||productpage.default.svc.cluster.local&amp;quot;,
  &amp;quot;endpoints&amp;quot;: [
    {
      &amp;quot;lbEndpoints&amp;quot;: [
        {
          &amp;quot;endpoint&amp;quot;: {
            &amp;quot;address&amp;quot;: {
              &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;172.30.135.40&amp;quot;,
                &amp;quot;portValue&amp;quot;: 9080
              }
            }
          },
          &amp;quot;metadata&amp;quot;: {
            &amp;quot;filterMetadata&amp;quot;: {
              &amp;quot;istio&amp;quot;: {
                  &amp;quot;uid&amp;quot;: &amp;quot;kubernetes://productpage-v1-76474f6fb7-pmglr.default&amp;quot;
                }
            }
          }
        }
      ]
    }
  ]
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从这里可以看出，各个微服务之间是直接通过 &lt;code&gt;PodIP + Port&lt;/code&gt; 来通信的，Service 只是做一个逻辑关联用来定位 Pod，实际通信的时候并没有通过 Service。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-2-部署-bookinfo-应用的时候发生了什么-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;2. 部署 bookinfo 应用的时候发生了什么？&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;通过 Istio 来部署 bookinfo 示例应用时，Istio 会向应用程序的所有 Pod 中注入 Envoy 容器。但是我们仍然还不清楚注入的 Envoy 容器的配置文件里都有哪些东西，这时候就是 istioctl 命令行工具发挥强大功效的时候了，可以通过 &lt;code&gt;proxy-config&lt;/code&gt; 参数来深度解析 Envoy 的配置文件（上一节我们已经使用过了）。&lt;/p&gt;

&lt;p&gt;我们先把目光锁定在某一个固定的 Pod 上，以 &lt;code&gt;productpage&lt;/code&gt; 为例。先查看 productpage 的 Pod Name：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get pod -l app=productpage

NAME                              READY     STATUS    RESTARTS   AGE
productpage-v1-76474f6fb7-pmglr   2/2       Running   0          7h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font color=&#34;#2780e3&#34;&gt;1. 查看 productpage 的监听器的基本基本摘要&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl proxy-config listeners productpage-v1-76474f6fb7-pmglr

ADDRESS            PORT      TYPE
172.30.135.40      9080      HTTP    // ③ Receives all inbound traffic on 9080 from listener `0.0.0.0_15001`
10.254.223.255     15011     TCP &amp;lt;---+
10.254.85.22       20001     TCP     |
10.254.149.167     443       TCP     |
10.254.14.157      42422     TCP     |
10.254.238.17      9090      TCP     |  ② Receives outbound non-HTTP traffic for relevant IP:PORT pair from listener `0.0.0.0_15001`
10.254.184.32      5556      TCP     |
10.254.0.1         443       TCP     |
10.254.52.199      8080      TCP     |
10.254.118.224     443       TCP &amp;lt;---+  
0.0.0.0            15031     HTTP &amp;lt;--+
0.0.0.0            15004     HTTP    |
0.0.0.0            9093      HTTP    |
0.0.0.0            15030     HTTP    |
0.0.0.0            8080      HTTP    |  ④ Receives outbound HTTP traffic for relevant port from listener `0.0.0.0_15001`
0.0.0.0            8086      HTTP    |
0.0.0.0            9080      HTTP    |
0.0.0.0            15010     HTTP &amp;lt;--+
0.0.0.0            15001     TCP     // ① Receives all inbound and outbound traffic to the pod from IP tables and hands over to virtual listener
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Istio 会生成以下的监听器：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;① &lt;code&gt;0.0.0.0:15001&lt;/code&gt; 上的监听器接收进出 Pod 的所有流量，然后将请求移交给虚拟监听器。&lt;/li&gt;
&lt;li&gt;② 每个 Service IP 配置一个虚拟监听器，每个出站 TCP/HTTPS 流量一个非 HTTP 监听器。&lt;/li&gt;
&lt;li&gt;③ 每个 Pod 入站流量暴露的端口配置一个虚拟监听器。&lt;/li&gt;
&lt;li&gt;④ 每个出站 HTTP 流量的 HTTP &lt;code&gt;0.0.0.0&lt;/code&gt; 端口配置一个虚拟监听器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上一节提到服务网格之间的应用是直接通过 PodIP 来进行通信的，但还不知道服务网格内的应用与服务网格外的应用是如何通信的。大家应该可以猜到，这个秘密就隐藏在 Service IP 的虚拟监听器中，以 &lt;code&gt;kube-dns&lt;/code&gt; 为例，查看 productpage 如何与 kube-dns 进行通信：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl proxy-config listeners productpage-v1-76474f6fb7-pmglr --address 10.254.0.2 --port 53 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;10.254.0.2_53&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;10.254.0.2&amp;quot;,
                &amp;quot;portValue&amp;quot;: 53
            }
        },
        &amp;quot;filterChains&amp;quot;: [
            {
                &amp;quot;filters&amp;quot;: [
                    ...
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
                        &amp;quot;config&amp;quot;: {
                            &amp;quot;cluster&amp;quot;: &amp;quot;outbound|53||kube-dns.kube-system.svc.cluster.local&amp;quot;,
                            &amp;quot;stat_prefix&amp;quot;: &amp;quot;outbound|53||kube-dns.kube-system.svc.cluster.local&amp;quot;
                        }
                    }
                ]
            }
        ],
        &amp;quot;deprecatedV1&amp;quot;: {
            &amp;quot;bindToPort&amp;quot;: false
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 查看 eds
$ curl http://$PILOT_SVC_IP:8080/debug/edsz|grep &amp;quot;outbound|53||kube-dns.kube-system.svc.cluster.local&amp;quot; -A 27 -B 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;clusterName&amp;quot;: &amp;quot;outbound|53||kube-dns.kube-system.svc.cluster.local&amp;quot;,
  &amp;quot;endpoints&amp;quot;: [
    {
      &amp;quot;lbEndpoints&amp;quot;: [
        {
          &amp;quot;endpoint&amp;quot;: {
            &amp;quot;address&amp;quot;: {
              &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;172.30.135.21&amp;quot;,
                &amp;quot;portValue&amp;quot;: 53
              }
            }
          },
          &amp;quot;metadata&amp;quot;: {
            &amp;quot;filterMetadata&amp;quot;: {
              &amp;quot;istio&amp;quot;: {
                  &amp;quot;uid&amp;quot;: &amp;quot;kubernetes://coredns-64b597b598-4rstj.kube-system&amp;quot;
                }
            }
          }
        }
      ]
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，服务网格内的应用仍然通过 ClusterIP 与网格外的应用通信，但有一点需要注意：&lt;strong&gt;这里并没有 &lt;code&gt;kube-proxy&lt;/code&gt; 的参与！&lt;/strong&gt;Envoy 自己实现了一套流量转发机制，当你访问 ClusterIP 时，Envoy 就把流量转发到具体的 Pod 上去，&lt;strong&gt;不需要借助 kube-proxy 的 &lt;code&gt;iptables&lt;/code&gt; 或 &lt;code&gt;ipvs&lt;/code&gt; 规则&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;#2780e3&#34;&gt;2. 从上面的摘要中可以看出，每个 Sidecar 都有一个绑定到 &lt;code&gt;0.0.0.0:15001&lt;/code&gt; 的监听器，IP tables 将 pod 的所有入站和出站流量路由到这里。此监听器把 &lt;code&gt;useOriginalDst&lt;/code&gt; 设置为 true，这意味着它将请求交给最符合请求原始目标的监听器。如果找不到任何匹配的虚拟监听器，它会将请求发送给返回 404 的 &lt;code&gt;BlackHoleCluster&lt;/code&gt;。&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl proxy-config listeners productpage-v1-76474f6fb7-pmglr --port 15001 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;virtual&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 15001
            }
        },
        &amp;quot;filterChains&amp;quot;: [
            {
                &amp;quot;filters&amp;quot;: [
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
                        &amp;quot;config&amp;quot;: {
                            &amp;quot;cluster&amp;quot;: &amp;quot;BlackHoleCluster&amp;quot;,
                            &amp;quot;stat_prefix&amp;quot;: &amp;quot;BlackHoleCluster&amp;quot;
                        }
                    }
                ]
            }
        ],
        &amp;quot;useOriginalDst&amp;quot;: true
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font color=&#34;#2780e3&#34;&gt;3. 我们的请求是到 &lt;code&gt;9080&lt;/code&gt; 端口的 HTTP 出站请求，这意味着它被切换到 &lt;code&gt;0.0.0.0:9080&lt;/code&gt; 虚拟监听器。然后，此监听器在其配置的 RDS 中查找路由配置。在这种情况下，它将查找由 Pilot 配置的 RDS 中的路由 &lt;code&gt;9080&lt;/code&gt;（通过 ADS）。&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl proxy-config listeners productpage-v1-76474f6fb7-pmglr --address 0.0.0.0 --port 9080 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;...
&amp;quot;rds&amp;quot;: {
    &amp;quot;config_source&amp;quot;: {
        &amp;quot;ads&amp;quot;: {}
    },
    &amp;quot;route_config_name&amp;quot;: &amp;quot;9080&amp;quot;
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font color=&#34;#2780e3&#34;&gt;4. &lt;code&gt;9080&lt;/code&gt; 路由配置仅为每个服务提供虚拟主机。我们的请求正在前往 reviews 服务，因此 Envoy 将选择我们的请求与域匹配的虚拟主机。一旦在域上匹配，Envoy 会查找与请求匹配的第一条路径。在这种情况下，我们没有任何高级路由，因此只有一条路由匹配所有内容。这条路由告诉 Envoy 将请求发送到 &lt;code&gt;outbound|9080||reviews.default.svc.cluster.local&lt;/code&gt; 集群。&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl proxy-config routes productpage-v1-76474f6fb7-pmglr --name 9080 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;9080&amp;quot;,
        &amp;quot;virtualHosts&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;reviews.default.svc.cluster.local:9080&amp;quot;,
                &amp;quot;domains&amp;quot;: [
                    &amp;quot;reviews.default.svc.cluster.local&amp;quot;,
                    &amp;quot;reviews.default.svc.cluster.local:9080&amp;quot;,
                    &amp;quot;reviews&amp;quot;,
                    &amp;quot;reviews:9080&amp;quot;,
                    &amp;quot;reviews.default.svc.cluster&amp;quot;,
                    &amp;quot;reviews.default.svc.cluster:9080&amp;quot;,
                    &amp;quot;reviews.default.svc&amp;quot;,
                    &amp;quot;reviews.default.svc:9080&amp;quot;,
                    &amp;quot;reviews.default&amp;quot;,
                    &amp;quot;reviews.default:9080&amp;quot;,
                    &amp;quot;172.21.152.34&amp;quot;,
                    &amp;quot;172.21.152.34:9080&amp;quot;
                ],
                &amp;quot;routes&amp;quot;: [
                    {
                        &amp;quot;match&amp;quot;: {
                            &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
                        },
                        &amp;quot;route&amp;quot;: {
                            &amp;quot;cluster&amp;quot;: &amp;quot;outbound|9080||reviews.default.svc.cluster.local&amp;quot;,
                            &amp;quot;timeout&amp;quot;: &amp;quot;0.000s&amp;quot;
                        },
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font color=&#34;#2780e3&#34;&gt;5. 此集群配置为从 Pilot（通过 ADS）检索关联的端点。因此，Envoy 将使用 &lt;code&gt;serviceName&lt;/code&gt; 字段作为密钥来查找端点列表并将请求代理到其中一个端点。&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl proxy-config clusters productpage-v1-76474f6fb7-pmglr --fqdn reviews.default.svc.cluster.local -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;outbound|9080||reviews.default.svc.cluster.local&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;EDS&amp;quot;,
        &amp;quot;edsClusterConfig&amp;quot;: {
            &amp;quot;edsConfig&amp;quot;: {
                &amp;quot;ads&amp;quot;: {}
            },
            &amp;quot;serviceName&amp;quot;: &amp;quot;outbound|9080||reviews.default.svc.cluster.local&amp;quot;
        },
        &amp;quot;connectTimeout&amp;quot;: &amp;quot;1.000s&amp;quot;,
        &amp;quot;circuitBreakers&amp;quot;: {
            &amp;quot;thresholds&amp;quot;: [
                {}
            ]
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的整个过程就是在不创建任何规则的情况下请求从 &lt;code&gt;productpage&lt;/code&gt; 到 &lt;code&gt;reviews&lt;/code&gt; 的过程，从 reviews 到网格内其他应用的流量与上面类似，就不展开讨论了。接下来分析创建规则之后的请求转发过程。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-3-virtualservice-和-destinationrule-配置解析-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;3. VirtualService 和 DestinationRule 配置解析&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;virtualservice&#34;&gt;VirtualService&lt;/h4&gt;

&lt;p&gt;首先创建一个 &lt;code&gt;VirtualService&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ cat &amp;lt;&amp;lt;EOF | istioctl create -f -
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
    - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v1
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上一篇文章已经介绍过，&lt;code&gt;VirtualService&lt;/code&gt; 映射的就是 Envoy 中的 &lt;code&gt;Http Route Table&lt;/code&gt;，还是将目标锁定在 productpage 上，我们来查看一下路由配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl proxy-config routes productpage-v1-76474f6fb7-pmglr --name 9080 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;9080&amp;quot;,
        &amp;quot;virtualHosts&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;reviews.default.svc.cluster.local:9080&amp;quot;,
                &amp;quot;domains&amp;quot;: [
                    &amp;quot;reviews.default.svc.cluster.local&amp;quot;,
                    &amp;quot;reviews.default.svc.cluster.local:9080&amp;quot;,
                    &amp;quot;reviews&amp;quot;,
                    &amp;quot;reviews:9080&amp;quot;,
                    &amp;quot;reviews.default.svc.cluster&amp;quot;,
                    &amp;quot;reviews.default.svc.cluster:9080&amp;quot;,
                    &amp;quot;reviews.default.svc&amp;quot;,
                    &amp;quot;reviews.default.svc:9080&amp;quot;,
                    &amp;quot;reviews.default&amp;quot;,
                    &amp;quot;reviews.default:9080&amp;quot;,
                    &amp;quot;172.21.152.34&amp;quot;,
                    &amp;quot;172.21.152.34:9080&amp;quot;
                ],
                &amp;quot;routes&amp;quot;: [
                    {
                        &amp;quot;match&amp;quot;: {
                            &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
                        },
                        &amp;quot;route&amp;quot;: {
                            &amp;quot;cluster&amp;quot;: &amp;quot;outbound|9080|v1|reviews.default.svc.cluster.local&amp;quot;,
                            &amp;quot;timeout&amp;quot;: &amp;quot;0.000s&amp;quot;
                        },
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意对比一下没创建 VirtualService 之前的路由，现在路由的 &lt;code&gt;cluster&lt;/code&gt; 字段的值已经从之前的 &lt;code&gt;outbound|9080|reviews.default.svc.cluster.local&lt;/code&gt; 变为 &lt;code&gt;outbound|9080|v1|reviews.default.svc.cluster.local&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;请注意：&lt;/strong&gt;我们现在还没有创建 DestinationRule！&lt;/p&gt;

&lt;p&gt;你可以尝试搜索一下有没有 &lt;code&gt;outbound|9080|v1|reviews.default.svc.cluster.local&lt;/code&gt; 这个集群，如果不出意外，你将找不到 &lt;code&gt;SUBSET=v1&lt;/code&gt; 的集群。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Jietu20180813-160027.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;由于找不到这个集群，所以该路由不可达，这就是为什么你打开 productpage 的页面会出现如下的报错：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Jietu20180813-160823.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h4 id=&#34;destinationrule&#34;&gt;DestinationRule&lt;/h4&gt;

&lt;p&gt;为了使上面创建的路由可达，我们需要创建一个 &lt;code&gt;DestinationRule&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ cat &amp;lt;&amp;lt;EOF | istioctl create -f -
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: reviews
spec:
  host: reviews
  subsets:
  - name: v1
    labels:
      version: v1
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实 &lt;code&gt;DestinationRule&lt;/code&gt; 映射到 Envoy 的配置文件中就是 &lt;code&gt;Cluster&lt;/code&gt;。现在你应该能看到 &lt;code&gt;SUBSET=v1&lt;/code&gt; 的 Cluster 了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl proxy-config clusters productpage-v1-76474f6fb7-pmglr --fqdn reviews.default.svc.cluster.local --subset=v1 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;outbound|9080|v1|reviews.default.svc.cluster.local&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;EDS&amp;quot;,
        &amp;quot;edsClusterConfig&amp;quot;: {
            &amp;quot;edsConfig&amp;quot;: {
                &amp;quot;ads&amp;quot;: {}
            },
            &amp;quot;serviceName&amp;quot;: &amp;quot;outbound|9080|v1|reviews.default.svc.cluster.local&amp;quot;
        },
        &amp;quot;connectTimeout&amp;quot;: &amp;quot;1.000s&amp;quot;,
        &amp;quot;circuitBreakers&amp;quot;: {
            &amp;quot;thresholds&amp;quot;: [
                {}
            ]
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到了这一步，一切皆明了，后面的事情就跟之前的套路一样了，具体的 Endpoint 对应打了标签 &lt;code&gt;version=v1&lt;/code&gt; 的 Pod：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get pod -l app=reviews,version=v1 -o wide

NAME                          READY     STATUS    RESTARTS   AGE       IP              NODE
reviews-v1-5b487cc689-njx5t   2/2       Running   0          11h       172.30.104.38   192.168.123.248
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://$PILOT_SVC_IP:8080/debug/edsz|grep &amp;quot;outbound|9080|v1|reviews.default.svc.cluster.local&amp;quot; -A 27 -B 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;clusterName&amp;quot;: &amp;quot;outbound|9080|v1|reviews.default.svc.cluster.local&amp;quot;,
  &amp;quot;endpoints&amp;quot;: [
    {
      &amp;quot;lbEndpoints&amp;quot;: [
        {
          &amp;quot;endpoint&amp;quot;: {
            &amp;quot;address&amp;quot;: {
              &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;172.30.104.38&amp;quot;,
                &amp;quot;portValue&amp;quot;: 9080
              }
            }
          },
          &amp;quot;metadata&amp;quot;: {
            &amp;quot;filterMetadata&amp;quot;: {
              &amp;quot;istio&amp;quot;: {
                  &amp;quot;uid&amp;quot;: &amp;quot;kubernetes://reviews-v1-5b487cc689-njx5t.default&amp;quot;
                }
            }
          }
        }
      ]
    }
  ]
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在再次用浏览器访问 productpage，你会发现报错已经消失了。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/Jietu20180813-162629.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-4-参考-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;4. 参考&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/help/ops/traffic-management/proxy-cmd/&#34; target=&#34;_blank&#34;&gt;调试 Envoy 和 Pilot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;扫一扫关注微信公众号&lt;/center&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>干货与湿货分享第4期</title>
      <link>https://www.yangcs.net/posts/weekly-4/</link>
      <pubDate>Sat, 11 Aug 2018 18:17:12 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/weekly-4/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;这是《干货与湿货分享》系列的第四期，主要记录过去一周我所见到的听到的值得分享的东西。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-新闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;新闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-摩拜女员工举报领导性骚扰-https-3g-163-com-all-article-dope3qg700097u7r-html&#34;&gt;1. &lt;a href=&#34;https://3g.163.com/all/article/DOPE3QG700097U7R.html&#34; target=&#34;_blank&#34;&gt;摩拜女员工举报领导性骚扰&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cms-bucket.nosdn.127.net/2018/08/09/6fb4d8a192d7460fb8b02442b1fe75fa.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cms-bucket.nosdn.127.net/catchpic/8/83/836bd63860e69573562d0e06fd14ba24.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cms-bucket.nosdn.127.net/catchpic/3/3d/3d99e230238e37c9804b923a0f272278.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8月9日，网络上出现一张截图，截图内容为摩拜女员工举报领导性骚扰。针对此事，摩拜回复称被举报人已被停职并接受进一步调查。&lt;/strong&gt;网络截图显示，举报者为摩拜SPE前端组的一名普通员工，于2017年进入摩拜工作。据举报者描述，摩拜客户端&amp;amp;前端组负责人张耀春曾对多位下属性骚扰，受骚扰最严重的女同事被迫离职。&lt;/p&gt;

&lt;h4 id=&#34;2-中关村程序员在车流中改代码-http-www-cocoachina-com-cms-wap-php-action-article-id-24506&#34;&gt;2. &lt;a href=&#34;http://www.cocoachina.com/cms/wap.php?action=article&amp;amp;id=24506&#34; target=&#34;_blank&#34;&gt;中关村程序员在车流中改代码&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://api.cocoachina.com/uploads//20180809/1533784496266270.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;事件发生在早高峰时期，地点为中关村软件园，因为堵车厉害，楼主恰巧看到了这一幕，一名略微有些秃顶，穿着蓝白条纹短袖的程序员蹲在信号灯下调试代码，疑似信号灯的算法程序出现了bug，该名程序员正在现场紧急处理。在其四周，车辆已经拥堵得水泄不通，但在这名程序员看来，此刻他眼里只有急需解决的代码问题，眼前的其它都被忽略。&lt;/p&gt;

&lt;h4 id=&#34;3-特斯拉开出三倍工资抢上汽技术员工-http-tech-qq-com-a-20180807-002406-htm&#34;&gt;3. &lt;a href=&#34;http://tech.qq.com/a/20180807/002406.htm&#34; target=&#34;_blank&#34;&gt;特斯拉开出三倍工资抢上汽技术员工&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://inews.gtimg.com/newsapp_bt/0/3871231544/641&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;特斯拉在上海建设的、被称作“无敌舰”的工厂，目前正在大规模招募第一批“船员”。8月5日，特斯拉在其官方微信上首次发布热招职位，包括EPC工程总监、政府事务项目经理、施工经理、土木工程师、电气设计工程师、机械设计师以及法律顾问、高级财务经理、招聘人员等。&lt;/p&gt;

&lt;p&gt;一位知情人士告诉21世纪经济报道记者：“特斯拉上海工厂已经在抢人了，直接开出三倍工资，上汽的技术人员走了一大批。”&lt;/p&gt;

&lt;h4 id=&#34;4-李彦宏回应谷歌重返大陆-有信心再赢一次-https-tech-sina-com-cn-i-2018-08-07-doc-ihhkuskt0298624-shtml&#34;&gt;4. &lt;a href=&#34;https://tech.sina.com.cn/i/2018-08-07/doc-ihhkuskt0298624.shtml&#34; target=&#34;_blank&#34;&gt;李彦宏回应谷歌重返大陆：有信心再赢一次&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://n.sinaimg.cn/tech/transform/22/w550h1072/20180807/zMit-hhkuskt0328373.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Google 又双叒叕要回归中国，这是谷歌今年以来第5次传出“返华”的传闻，而有人民日报发文欢迎 Google 回归的消息，似乎印证这次应该是来真的了！&lt;/p&gt;

&lt;p&gt;人民日报近日在社交媒体平台 Twitter、Facebook 上刊登了一篇标题为 “Stability prerequisite for China’s internet opening up” 的文章，文章表示，“欢迎 Google 回到中国大陆，但前提是得遵守政府相关的法律政策。”作为主要的竞争对手，百度的李彦宏今天公开在朋友圈对传闻进行了回应“如果 Google 决定回到中国，我们非常有信心再PK一次，再赢一次”。&lt;/p&gt;

&lt;p&gt;很快就有调皮的小编开始做测验了，测试结果啪啪啪打脸。。。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://resource01.ulifestyle.com.hk/res/v3/image/content/2130000/2132767/20180807_googlebaidu_04_600.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h4 id=&#34;5-腾讯云承认自身错误导致用户数据丢失-https-36kr-com-p-5146916-html&#34;&gt;5. &lt;a href=&#34;https://36kr.com/p/5146916.html&#34; target=&#34;_blank&#34;&gt;腾讯云承认自身错误导致用户数据丢失&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/WechatIMG1262.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;腾讯云服务最近发生了一起引发广泛关注的用户数据丢失事故。“前沿数控技术新媒体”8月5日晚间发微博称，在使用腾讯云8个月后，公司存储在腾讯云上的数据无可挽回地全部丢失。腾讯云公布的调查报告，承认是自己犯下的一系列错误导致用户数据丢失，并表示将尽力帮助客户解决问题，同时优化机制避免类似情况再度发生。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-工具-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;工具&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-ice-https-github-com-alibaba-ice&#34;&gt;1. &lt;a href=&#34;https://github.com/alibaba/ice&#34; target=&#34;_blank&#34;&gt;ice&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;飞冰是一套阿里巴巴开源的基于 React 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。&lt;/p&gt;

&lt;h4 id=&#34;2-feediary-不跟踪-纯文本-rss-阅读器-https-feediary-com&#34;&gt;2. &lt;a href=&#34;https://feediary.com/&#34; target=&#34;_blank&#34;&gt;Feediary – 不跟踪、纯文本 RSS 阅读器&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://apprcn.b0.upaiyun.com/Feediary-1.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;RSS 阅读器是有不少了，但可能每个阅读器都会标榜自己有多么多的功能，功能丰富到你 90% 都用不上。Feediary 这个 RSS 阅读器反而是相反，它功能不多，但够专注和够纯净。&lt;/p&gt;

&lt;p&gt;Feediary 是一款网页 RSS 阅读器，简单注册后就可以使用了。有免费版和收费版区分，最大区别就是免费版最多只可以添加 50 个 RSS 源，收费版当然就没什么限制了。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://apprcn.b0.upaiyun.com/Feediary-2.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-licketylink-http-lickety-link&#34;&gt;3. &lt;a href=&#34;http://lickety.link/&#34; target=&#34;_blank&#34;&gt;LicketyLink&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://cdn.ilovefreesoftware.com/wp-content/uploads/2018/08/create-a-new-sharing-link-with-custom-name-and-add-files.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是一个可以在线共享文件的网站，并且对上传文件的大小没有任何限制，对下载速度也没有任何限制。我们都知道，百度云等其他国内网盘对上传文件大小有限制，而且在不买会员的情况下下载速度极慢！这个网站将会是你的救星。&lt;/p&gt;

&lt;p&gt;值得一提的是，该网站用一种很特别的方法来共享文件，它会先生成一个共享链接，然后你可以随意往这个链接里面添加或删除文件，共享链接不变，是不是很爽？还有一个大招就是你不用等待文件上传成功就可以分享给其他人了，我只能说还有谁？！&lt;/p&gt;

&lt;h4 id=&#34;4-sharefiles-https-sharefiles-app&#34;&gt;4. &lt;a href=&#34;https://sharefiles.app/&#34; target=&#34;_blank&#34;&gt;ShareFiles&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;另一个不限文件大小的在线共享网站。&lt;/p&gt;

&lt;h4 id=&#34;5-onlim-https-onlim-com&#34;&gt;5. &lt;a href=&#34;https://onlim.com/&#34; target=&#34;_blank&#34;&gt;Onlim&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/onlim.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Pnlim 是一个免费的在线社交媒体管理工具，你可以在这里面添加无限多的社交账户（支持 Facebook、Twitter 和 Slack 等）。同时还可以添加 RSS 源，所以你也可以把它当成一个 RSS 阅读器，颜值还是很高的。&lt;/p&gt;

&lt;h4 id=&#34;6-zhuye-kim-https-github-com-wenguonideshou-zhuye-kim&#34;&gt;6. &lt;a href=&#34;https://github.com/wenguonideshou/zhuye_kim&#34; target=&#34;_blank&#34;&gt;zhuye_kim&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/zhuye_kim_google.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/zhuye_kim_baidu.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;仿 zhuye.kim 的简单个人主页/导航程序，带后台&lt;/p&gt;

&lt;h4 id=&#34;7-cartoonify-https-www-kapwing-com-cartoonify&#34;&gt;7. &lt;a href=&#34;https://www.kapwing.com/cartoonify&#34; target=&#34;_blank&#34;&gt;Cartoonify&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://i.loli.net/2018/07/23/5b5548bc8df23.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Cartoonify 是 Google 一项很有趣的免费在线工具，使用人工智能将你上传的相片转为涂鸦手绘风格，它以 Draw This 做为基础，非常有意思，如果你想知道将相片丢给机器辨识、它会智能返回什么样的结果呢？&lt;/p&gt;

&lt;h4 id=&#34;8-my-free-mp3-https-my-free-mp3-net-cn&#34;&gt;8. &lt;a href=&#34;https://my-free-mp3.net/cn&#34; target=&#34;_blank&#34;&gt;my-free-mp3&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://wx1.sinaimg.cn/mw690/0060lm7Tly1ftwxawbt8aj30sm0ij75t.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;现在版权管理越来越严格，之前用百度音乐一个就行了，现在想下载一首歌要用到不同的 APP，不少大平台还只能试听不能下载。今天这个网页版的比较好用，输入歌曲名就可搜索了，同时输入歌曲名和歌手可提高精准度，点击后面的 Size-Kbps 可以查看码率，一般为 320K 音质，支持在线试听和下载，实在搜索不到换繁体字再搜。点后面下载会跳转到一个中间页面，点”ENTER”就可以下载了，个人测试多首音乐都可以下载。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://wx1.sinaimg.cn/mw690/0060lm7Tly1ftwxawt2r1j30xr0kmwhi.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-教程-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;教程&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-系统设计入门-https-github-com-donnemartin-system-design-primer&#34;&gt;1. &lt;a href=&#34;https://github.com/donnemartin/system-design-primer&#34; target=&#34;_blank&#34;&gt;系统设计入门&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;系统设计是一个很宽泛的话题。在互联网上，&lt;strong&gt;关于系统设计原则的资源也是多如牛毛。&lt;/strong&gt;这个仓库就是这些资源的组织收集，它可以帮助你学习如何构建可扩展的系统。&lt;/p&gt;

&lt;h4 id=&#34;2-命令行的艺术-https-github-com-jlevy-the-art-of-command-line-blob-master-readme-zh-md&#34;&gt;2. &lt;a href=&#34;https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md&#34; target=&#34;_blank&#34;&gt;命令行的艺术&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份作者在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。&lt;/p&gt;

&lt;h4 id=&#34;3-kubernetes-in-action-https-www-manning-com-books-kubernetes-in-action&#34;&gt;3. &lt;a href=&#34;https://www.manning.com/books/kubernetes-in-action&#34; target=&#34;_blank&#34;&gt;Kubernetes In Action&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://pic4.zhimg.com/v2-3d850923108ea1f17348d435fe098c23_1200x500.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这本书深入浅出的讲解了 Kubernetes 的构架和设计理念，非常难能可贵。通过这本书你将会学到如何在 non-deterministic 的分布式环境中，为 scheduler 和 controller 这种需要“唯一决策者设计”的组件提供 high availability 的同时，使 cluster 的调度决策稳定可靠的方法。&lt;/p&gt;

&lt;h4 id=&#34;4-理解-linux-进程-https-github-com-tobegit3hub-understand-linux-process&#34;&gt;4. &lt;a href=&#34;https://github.com/tobegit3hub/understand_linux_process&#34; target=&#34;_blank&#34;&gt;理解 Linux 进程&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;本书受 &lt;a href=&#34;http://www.duokan.com/book/41446&#34; target=&#34;_blank&#34;&gt;理解 Unix 进程&lt;/a&gt; 启发而作，用极简的篇幅深入学习进程知识。理解 Linux 进程用 Go 重写了所有示例程序，通过循序渐进的方法介绍 Linux 进程的工作原理和一切你所需要知道的概念。&lt;/p&gt;

&lt;h4 id=&#34;5-go语言高级编程-https-github-com-chai2010-advanced-go-programming-book&#34;&gt;5. &lt;a href=&#34;https://github.com/chai2010/advanced-go-programming-book&#34; target=&#34;_blank&#34;&gt;Go语言高级编程&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://github.com/chai2010/advanced-go-programming-book/raw/master/cover.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;本书涵盖 CGO、Go 汇编语言、RPC 实现、Web 框架实现、分布式系统等高阶主题，针对 Go 语言有一定经验想深入了解 Go 语言各种高级用法的开发人员。对于刚学习 Go 语言的读者，建议先从 &lt;a href=&#34;https://github.com/golang-china/gopl-zh&#34; target=&#34;_blank&#34;&gt;《Go语言圣经》&lt;/a&gt; 开始系统学习 Go 语言的基础知识。&lt;/p&gt;

&lt;h4 id=&#34;6-envoy为什么能战胜ngnix-线程模型分析篇-https-www-itcodemonkey-com-article-7042-html&#34;&gt;6. &lt;a href=&#34;https://www.itcodemonkey.com/article/7042.html&#34; target=&#34;_blank&#34;&gt;Envoy为什么能战胜Ngnix——线程模型分析篇&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;随着 Service Mesh 在最近一年的流行，Envoy 作为其中很关键的组件，也开始被广大技术人员熟悉。作者是 Envoy 的开发者之一，本文详细说明了 Envoy 的线程模型，对于理解 Envoy 如何工作非常有帮助。内容较为深入，建议细细品读。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-资源-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;资源&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-programmer-job-blacklist-https-github-com-shengxinjing-programmer-job-blacklist&#34;&gt;1. &lt;a href=&#34;https://github.com/shengxinjing/programmer-job-blacklist&#34; target=&#34;_blank&#34;&gt;programmer-job-blacklist&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;这是一份程序员找工作黑名单，换工作和当技术合伙人需谨慎啊！每一个程序猿，每一个公司都有黑点，但是如果把黑点放大了，黑名单就没存在的意义了。&lt;/p&gt;

&lt;h4 id=&#34;2-杭州房产知识扫盲-https-github-com-houshanren-hangzhou-house-knowledge&#34;&gt;2. &lt;a href=&#34;https://github.com/houshanren/hangzhou_house_knowledge&#34; target=&#34;_blank&#34;&gt;杭州房产知识扫盲&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/hangzhou_house.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;这是作者 2017 年买房经历总结出来的买房购房知识分享给大家，希望对大家有所帮助。买房不易，且买且珍惜。&lt;/p&gt;

&lt;h4 id=&#34;3-wallhalla-https-wallhalla-com&#34;&gt;3. &lt;a href=&#34;https://wallhalla.com/&#34; target=&#34;_blank&#34;&gt;Wallhalla&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://7xpi4m.com1.z0.glb.clouddn.com/201807282251_92.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;一个设计感十足的壁纸网站。该网站特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;网站整体设计的非常简约大方；&lt;/li&gt;
&lt;li&gt;可以按照关键字、色彩、图片、标签进行搜索；&lt;/li&gt;
&lt;li&gt;Wallhalla 本身只是个图片搜索引擎，并不持有图片，但可以直接下载到原始图片；&lt;/li&gt;
&lt;li&gt;通过放大镜查看图片细节；&lt;/li&gt;
&lt;li&gt;展示图片的色彩组成和色系；&lt;/li&gt;
&lt;li&gt;可以随机或者最热门浏览图片&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;4-mojo-weixin-https-github-com-sjdy521-mojo-weixin&#34;&gt;4. &lt;a href=&#34;https://github.com/sjdy521/Mojo-Weixin&#34; target=&#34;_blank&#34;&gt;Mojo-Weixin&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;使用Perl语言编写的个人账号微信/weixin/wechat客户端框架（非GUI），可通过插件提供基于HTTP协议的api接口供其他语言或系统调用。可以利用微软小冰实现智能聊天回复、识别指定关键字发送美女图片、通过微信消息自定义问答知识库等各种功能应有尽有。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-奇闻-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;奇闻&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-历史上第一个真正能转的电动机&#34;&gt;1. 历史上第一个真正能转的电动机&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/WechatIMG1264.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;&lt;em&gt;法拉第单极电机的现代仿品&lt;/em&gt;&lt;/center&gt;
&lt;center&gt;&lt;em&gt;水银有毒，可用盐水代替&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;1821 年，法拉第搞出了一个真正能转的电动机，现在看来这个装置有点简陋。首先是一杯水银，水银是导电的，中间插进一根条形磁铁。上面挂钩上垂下来一根铜丝，另一头泡在水银里面，可以任意移动。顶上通电，电池另一头接到水银里边。这等于电流通过了水银和铁丝形成了一个回路。一通电，这个铁丝在围着水银里边的磁铁画圈圈。这是世界上第一个利用电磁力驱动的电动机，后来称为“单极电机”。&lt;/p&gt;

&lt;h4 id=&#34;2-维苏威火山&#34;&gt;2. 维苏威火山&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/8416081431.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;维苏威火山是欧洲最危险的火山，11 公里以外就是那不勒斯。公元 79 年的一次大喷发，埋葬了庞贝古城和附近的赫库兰尼姆、斯塔比亚等等城市。一开始连续发生了 4 天的地震，但是震级都不大，当时古罗马的人都不在乎。哪知道维苏威火山突然喷发了，火山灰云柱直冲 33km 高空。&lt;/p&gt;

&lt;p&gt;大量火山灰落到了附近的城市里面，房顶上累积了 3 厘米厚。夜里发生了 6 次火山碎屑流，火山喷发的时候，喷出的火山灰是滚烫的，加热了周围的空气，空气形成强大的上升气流，裹挟着火山灰往天上冒。但是温度下降了，热空气没那个力气把火山灰送入高空，火山灰很可能喷出来没多高就沿着山坡往下翻滚，于是热空气和火山灰裹挟着，形成了火山的碎屑流。到达赫库兰尼姆的时候，温度高达 500 度。因此城里的人瞬间碳化，定格在了那一刻。到达稍远的庞贝城的时候，温度降低到 300 度，因此庞贝城里面的遗骸留下了大量的遗体和衣服。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/WechatIMG1265.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;&lt;em&gt;庞贝城的悲惨景象&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;到了 1599 年的时候，因为挖掘地下引水工程，发现有雕塑和壁画，庞贝古城被发现。1738 年，命运悲惨的赫库兰尼姆被发现。1748 年，在那不勒斯王国国王夫妇的资助下，庞贝城也被挖出来了。如今这里都是世界文化遗产。&lt;/p&gt;

&lt;h4 id=&#34;3-夜明珠到底值不值钱&#34;&gt;3. 夜明珠到底值不值钱？&lt;/h4&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/WechatIMG1267.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;
&lt;center&gt;&lt;em&gt;美丽的萤石&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;最早人们发现有一种东西叫做“萤石”，为什么起这个名字呢？因为在阳光照射过后，你迅速拿到黑暗中去看，会看到这种彩色的石头会发出荧光。有的石头荧光时间非常长，有的石头荧光时间非常短。今天市场上很多所谓的夜明珠，就是由发光时间比较长的萤石材料做成的。所以这些东西一点都不值钱。早在河姆渡时期就发现过用萤石来做装饰品。我们的老祖宗已经发现这东西是会发出荧光的。&lt;/p&gt;

&lt;p&gt;但是大家请注意，萤石这种材料千万不能和酸性的东西放在一起，和酸性的东西放在一起，会产生氟化氢，溶解在水里就是氢氟酸。1670年，有个德国人就发现，用萤石和硫酸放在一起，会冒出一种气体，这种气体居然能腐蚀玻璃。如果在玻璃表面涂上一层蜡，然后在蜡上刻出花纹，然后再用这种蒸汽去熏。等到你把蜡去掉就会发现，花纹已经刻在了玻璃上。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-欢迎关注-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;欢迎关注&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;该系列每周六发布，同步更新在我的个人&lt;a href=&#34;https://www.yangcs.net/&#34; target=&#34;_blank&#34;&gt;博客&lt;/a&gt;和微信公众号上。&lt;/p&gt;

&lt;p&gt;微信搜索 “云原生实验室” 或者扫描二维码即可关注。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>请求都去哪了？</title>
      <link>https://www.yangcs.net/posts/where-is-the-request-1/</link>
      <pubDate>Wed, 08 Aug 2018 16:56:31 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/where-is-the-request-1/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p&gt;通过前几篇文章的学习与实践，我们对 Gateway、VirtualService 和 Destinationrule 的概念和原理有了初步的认知，本篇将对这几个对象资源的配置文件进行深度地解析，具体细节将会深入到每一个配置项与 Envoy 配置项的映射关系。&lt;/p&gt;

&lt;p&gt;在开始之前，需要先搞清楚我们创建的这些对象资源最后都交给谁来处理了，负责处理这些资源的就是 pilot。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-1-pilot总体架构-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;1. pilot总体架构&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;https://ws1.sinaimg.cn/large/006tKfTcgy1ftppxdcmwvj31kw0vvtdl.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;首先我们回顾一下 pilot 总体架构，上面是&lt;a href=&#34;https://github.com/istio/old_pilot_repo/blob/master/doc/design.md&#34; target=&#34;_blank&#34;&gt;官方关于pilot的架构图&lt;/a&gt;，因为是 old_pilot_repo 目录下，可能与最新架构有出入，仅供参考。所谓的 pilot 包含两个组件：&lt;code&gt;pilot-agent&lt;/code&gt; 和 &lt;code&gt;pilot-discovery&lt;/code&gt;。图里的 &lt;code&gt;agent&lt;/code&gt; 对应 pilot-agent 二进制，&lt;code&gt;proxy&lt;/code&gt; 对应 Envoy 二进制，它们两个在同一个容器中，&lt;code&gt;discovery service&lt;/code&gt; 对应 pilot-discovery 二进制，在另外一个跟应用分开部署的单独的 Deployment 中。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;discovery service&lt;/span&gt; : 从 Kubernetes apiserver list/watch &lt;code&gt;service&lt;/code&gt;、&lt;code&gt;endpoint&lt;/code&gt;、&lt;code&gt;pod&lt;/code&gt;、&lt;code&gt;node&lt;/code&gt; 等资源信息，监听 istio 控制平面配置信息（如VirtualService、DestinationRule等）， 翻译为 Envoy 可以直接理解的配置格式。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;proxy&lt;/span&gt; : 也就是 Envoy，直接连接 discovery service，间接地从 Kubernetes 等服务注册中心获取集群中微服务的注册情况。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;agent&lt;/span&gt; : 生成 Envoy 配置文件，管理 Envoy 生命周期。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;service A/B&lt;/span&gt; : 使用了 Istio 的应用，如 Service A/B，的进出网络流量会被 proxy 接管。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单来说 Istio 做为管理面，集合了配置中心和服务中心两个功能，并把配置发现和服务发现以一组统一的 &lt;code&gt;xDS&lt;/code&gt; 接口提供出来，数据面的 Envoy 通过 xDS 获取需要的信息来做服务间通信和服务治理。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-2-pilot-discovery-为-envoy-提供的-xds-服务-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;2. pilot-discovery 为 Envoy 提供的 xds 服务&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;所谓-xds&#34;&gt;所谓 xds&lt;/h4&gt;

&lt;p&gt;pilot-discovery 为数据面（运行在 sidecar 中的 Envoy 等 proxy 组件）提供控制信息服务，也就是所谓的 discovery service 或者 xds 服务。这里的 &lt;code&gt;x&lt;/code&gt; 是一个代词，类似云计算里的 XaaS 可以指代 IaaS、PaaS、SaaS 等。在 Istio 中，xds 包括 &lt;code&gt;cds&lt;/code&gt;(cluster discovery service)、&lt;code&gt;lds&lt;/code&gt;(listener discovery service)、&lt;code&gt;rds&lt;/code&gt;(route discovery service)、&lt;code&gt;eds&lt;/code&gt;(endpoint discovery service)，而 &lt;code&gt;ads&lt;/code&gt;(aggregated discovery service) 是对这些服务的一个统一封装。&lt;/p&gt;

&lt;p&gt;以上 cluster、endpoint、route 等概念的详细介绍和实现细节可以参考 Envoy 在社区推广的 data plane api（&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api&#34; target=&#34;_blank&#34;&gt;github.com/envoyproxy/data-plane-api&lt;/a&gt;），这里只做简单介绍：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;endpoint&lt;/span&gt; : 一个具体的“应用实例”，对应 ip 和端口号，类似 Kubernetes 中的一个 Pod。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;cluster&lt;/span&gt; : 一个 &lt;code&gt;cluster&lt;/code&gt; 是一个“应用集群”，它对应提供相同服务的一个或多个 &lt;code&gt;endpoint&lt;/code&gt;。cluster 类似 Kubernetes 中 &lt;code&gt;Service&lt;/code&gt; 的概念，即一个 Kubernetes Service 对应一个或多个用同一镜像启动，提供相同服务的 Pod。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;route&lt;/span&gt; : 当我们做灰度发布、金丝雀发布时，同一个服务会同时运行多个版本，每个版本对应一个 cluster。这时需要通过 &lt;code&gt;route&lt;/code&gt; 规则规定请求如何路由到其中的某个版本的 cluster 上。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上这些内容实际上都是对 Envoy 等 proxy 的配置信息，而所谓的 cluster discovery service、route discovery service 等 xxx discovery service 就是 Envoy 等从 &lt;code&gt;pilot-discovery&lt;/code&gt; 动态获取 endpoint、cluster 等配置信息的协议和实现。为什么要做动态配置加载，自然是为了使用 &lt;code&gt;istioctl&lt;/code&gt; 等工具统一、灵活地配置 service mesh。至于如何通过 istioctl 来查看 xds 信息，下文将会详细介绍。&lt;/p&gt;

&lt;p&gt;而为什么要用 &lt;code&gt;ads&lt;/code&gt; 来“聚合”一系列 &lt;code&gt;xds&lt;/code&gt;，并非仅为了在同一个 gRPC 连接上实现多种 xds 来省下几个网络连接，ads 还有一个非常重要的作用是解决 &lt;code&gt;cds&lt;/code&gt;、&lt;code&gt;rds&lt;/code&gt; 信息更新顺序依赖的问题，从而保证以一定的顺序同步各类配置信息，这方面的讨论可以详见 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/overview/v2_overview#aggregated-discovery-service&#34; target=&#34;_blank&#34;&gt;Envoy官网&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&#34;如何查看-xds&#34;&gt;如何查看 xds&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;pilot-discovery&lt;/code&gt; 在初始化阶段依次 init 了各种模块，其中 &lt;code&gt;discovery service&lt;/code&gt; 就是 xDS 相关实现。&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/&#34; target=&#34;_blank&#34;&gt;envoy API reference&lt;/a&gt; 可以查到 v1 和 v2 两个版本的 API 文档。&lt;a href=&#34;https://github.com/envoyproxy/go-control-plane&#34; target=&#34;_blank&#34;&gt;envoy control plane&lt;/a&gt; 给了 v2 grpc 接口相关的数据结构和接口。&lt;/p&gt;

&lt;p&gt;那么如何查看 xds 的信息呢？虽然 v2 是 &lt;code&gt;grpc&lt;/code&gt; 的接口，但是 pilot 提供了 &lt;code&gt;InitDebug&lt;/code&gt;，可以通过 debug 接口查询服务和 routes 等服务和配置信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查看 eds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先找到 Service istio-pilot 的 &lt;code&gt;Cluster IP&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export PILOT_SVC_IP=$(kubectl -n istio-system get svc istio-pilot -o go-template=&#39;{{.spec.clusterIP}}&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后查看 eds：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://$PILOT_SVC_IP:8080/debug/edsz
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[{
    &amp;quot;clusterName&amp;quot;: &amp;quot;outbound|9080||reviews.nino.svc.cluster.local&amp;quot;,
    &amp;quot;endpoints&amp;quot;: [{
        &amp;quot;lbEndpoints&amp;quot;: [{
            &amp;quot;endpoint&amp;quot;: {
                &amp;quot;address&amp;quot;: {
                    &amp;quot;socketAddress&amp;quot;: {
                        &amp;quot;address&amp;quot;: &amp;quot;10.244.0.56&amp;quot;,
                        &amp;quot;portValue&amp;quot;: 9080
                    }
                }
            }
        }, {
            &amp;quot;endpoint&amp;quot;: {
                &amp;quot;address&amp;quot;: {
                    &amp;quot;socketAddress&amp;quot;: {
                        &amp;quot;address&amp;quot;: &amp;quot;10.244.0.58&amp;quot;,
                        &amp;quot;portValue&amp;quot;: 9080
                    }
                }
            }
        }, {
            &amp;quot;endpoint&amp;quot;: {
                &amp;quot;address&amp;quot;: {
                    &amp;quot;socketAddress&amp;quot;: {
                        &amp;quot;address&amp;quot;: &amp;quot;10.244.2.25&amp;quot;,
                        &amp;quot;portValue&amp;quot;: 9080
                    }
                }
            }
        }]
    }]
}, {
    &amp;quot;clusterName&amp;quot;: &amp;quot;outbound|9080|v3|reviews.nino.svc.cluster.local&amp;quot;,
    &amp;quot;endpoints&amp;quot;: [{
        &amp;quot;lbEndpoints&amp;quot;: [{
            &amp;quot;endpoint&amp;quot;: {
                &amp;quot;address&amp;quot;: {
                    &amp;quot;socketAddress&amp;quot;: {
                        &amp;quot;address&amp;quot;: &amp;quot;10.244.0.58&amp;quot;,
                        &amp;quot;portValue&amp;quot;: 9080
                    }
                }
            }
        }]
    }]
}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;查看 cds&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://$PILOT_SVC_IP:8080/debug/cdsz
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[{&amp;quot;node&amp;quot;: &amp;quot;sidecar~172.30.104.45~fortio-deploy-56dcc85457-b2pkc.default~default.svc.cluster.local-10&amp;quot;, &amp;quot;addr&amp;quot;: &amp;quot;172.30.104.45:43876&amp;quot;, &amp;quot;connect&amp;quot;: &amp;quot;2018-08-07 06:31:08.161483005 +0000 UTC m=+54.337448884&amp;quot;,&amp;quot;Clusters&amp;quot;:[{
  &amp;quot;name&amp;quot;: &amp;quot;outbound|9080||details.default.svc.cluster.local&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;EDS&amp;quot;,
  &amp;quot;edsClusterConfig&amp;quot;: {
    &amp;quot;edsConfig&amp;quot;: {
      &amp;quot;ads&amp;quot;: {

      }
    },
    &amp;quot;serviceName&amp;quot;: &amp;quot;outbound|9080||details.default.svc.cluster.local&amp;quot;
  },
  &amp;quot;connectTimeout&amp;quot;: &amp;quot;1.000s&amp;quot;,
  &amp;quot;circuitBreakers&amp;quot;: {
    &amp;quot;thresholds&amp;quot;: [
      {

      }
    ]
  }
},
...
{
  &amp;quot;name&amp;quot;: &amp;quot;outbound|9090||prometheus-k8s.monitoring.svc.cluster.local&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;EDS&amp;quot;,
  &amp;quot;edsClusterConfig&amp;quot;: {
    &amp;quot;edsConfig&amp;quot;: {
      &amp;quot;ads&amp;quot;: {

      }
    },
    &amp;quot;serviceName&amp;quot;: &amp;quot;outbound|9090||prometheus-k8s.monitoring.svc.cluster.local&amp;quot;
  },
  &amp;quot;connectTimeout&amp;quot;: &amp;quot;1.000s&amp;quot;,
  &amp;quot;circuitBreakers&amp;quot;: {
    &amp;quot;thresholds&amp;quot;: [
      {

      }
    ]
  }
},
{
  &amp;quot;name&amp;quot;: &amp;quot;BlackHoleCluster&amp;quot;,
  &amp;quot;connectTimeout&amp;quot;: &amp;quot;5.000s&amp;quot;
}]}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;查看 ads&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://$PILOT_SVC_IP:8080/debug/adsz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-3-envoy-基本术语回顾-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;3. Envoy 基本术语回顾&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;为了让大家更容易理解后面所讲的内容，先来回顾一下 Envoy 的基本术语。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;Listener&lt;/span&gt; : 监听器（listener）是服务(程序)监听者，就是真正干活的。 它是可以由下游客户端连接的命名网络位置（例如，端口、unix域套接字等）。Envoy 公开一个或多个下游主机连接的侦听器。一般是每台主机运行一个 Envoy，使用单进程运行，但是每个进程中可以启动任意数量的 Listener（监听器），目前只监听 TCP，每个监听器都独立配置一定数量的（L3/L4）网络过滤器。Listenter 也可以通过 Listener Discovery Service（LDS）动态获取。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;Listener filter&lt;/span&gt; : Listener 使用 listener filter（监听器过滤器）来操作链接的元数据。它的作用是在不更改 Envoy 的核心功能的情况下添加更多的集成功能。Listener filter 的 API 相对简单，因为这些过滤器最终是在新接受的套接字上运行。在链中可以互相衔接以支持更复杂的场景，例如调用速率限制。Envoy 已经包含了多个监听器过滤器。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;Http Route Table&lt;/span&gt; : HTTP 的路由规则，例如请求的域名，Path 符合什么规则，转发给哪个 Cluster。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;Cluster&lt;/span&gt; : 集群（cluster）是 Envoy 连接到的一组逻辑上相似的上游主机。Envoy 通过服务发现发现集群中的成员。Envoy 可以通过主动运行状况检查来确定集群成员的健康状况。Envoy 如何将请求路由到集群成员由负载均衡策略确定。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多详细信息可以参考 &lt;a href=&#34;https://jimmysong.io/posts/envoy-archiecture-and-terminology/&#34; target=&#34;_blank&#34;&gt;Envoy 的架构与基本术语&lt;/a&gt;，本文重点突出 &lt;code&gt;Listener&lt;/code&gt;、&lt;code&gt;Route&lt;/code&gt; 和 &lt;code&gt;Cluster&lt;/code&gt; 这三个基本术语，同时需要注意流量经过这些术语的先后顺序，请求首先到达 &lt;code&gt;Listener&lt;/code&gt;，然后通过 &lt;code&gt;Http Route Table&lt;/code&gt; 转到具体的 &lt;code&gt;Cluster&lt;/code&gt;，最后由具体的 Cluster 对请求做出响应。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-4-gateway-和-virtualservice-配置解析-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;4. Gateway 和 VirtualService 配置解析&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;还是拿之前 &lt;a href=&#34;https://www.yangcs.net/posts/istio-traffic-management/&#34; target=&#34;_blank&#34;&gt;Istio 流量管理&lt;/a&gt; 这篇文章中的例子来解析吧，首先创建了一个 &lt;code&gt;Gateway&lt;/code&gt;，配置文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: bookinfo-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后又创建了一个 &lt;code&gt;VirtualService&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: bookinfo
spec:
  hosts:
  - &amp;quot;*&amp;quot;
  gateways:
  - bookinfo-gateway
  http:
  - match:
    - uri:
        exact: /productpage
    - uri:
        exact: /login
    - uri:
        exact: /logout
    - uri:
        prefix: /api/v1/products
    route:
    - destination:
        host: productpage
        port:
          number: 9080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;VirtualService&lt;/code&gt; 映射的就是 Envoy 中的 &lt;code&gt;Http Route Table&lt;/code&gt;，大家可以注意到上面的 VirtualService 配置文件中有一个 &lt;code&gt;gateways&lt;/code&gt; 字段，如果有这个字段，就表示这个 Http Route Table 是绑在 &lt;code&gt;ingressgateway&lt;/code&gt; 的 &lt;code&gt;Listener&lt;/code&gt; 中的；如果没有这个字段，就表示这个 Http Route Table 是绑在 Istio 所管理的所有微服务应用的 Pod 上的。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;为了分清主次，我决定将本文拆分成两篇文章来讲解，本篇主要围绕 ingressgateway 来解析 Gateway 和 VirtualService，而微服务应用本身的 VirtualService 和 DestinationRule 解析放到下一篇文章再说。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;显而易见，上面这个 VirtualService 映射的 Http Route Table 是被绑在 ingressgateway 中的，可以通过 &lt;code&gt;istioctl&lt;/code&gt; 来查看，istioctl 的具体用法请参考：&lt;a href=&#34;https://istio.io/zh/help/ops/traffic-management/debugging-pilot-envoy/&#34; target=&#34;_blank&#34;&gt;调试 Envoy 和 Pilot&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先查看 &lt;code&gt;Listener&lt;/code&gt; 的配置项：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl -n istio-system pc listeners istio-ingressgateway-b6db8c46f-qcfks --port 80 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_80&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 80
            }
        },
        &amp;quot;filterChains&amp;quot;: [
            {
                &amp;quot;filters&amp;quot;: [
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
                        &amp;quot;config&amp;quot;: {
                            ...
                            &amp;quot;rds&amp;quot;: {
                                &amp;quot;config_source&amp;quot;: {
                                    &amp;quot;ads&amp;quot;: {}
                                },
                                &amp;quot;route_config_name&amp;quot;: &amp;quot;http.80&amp;quot;
                            },
                            ...
                        }
                    }
                ]
            }
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过 &lt;code&gt;rds&lt;/code&gt; 配置项的 &lt;code&gt;route_config_name&lt;/code&gt; 字段可以知道该 Listener 使用的 Http Route Table 的名字是 &lt;code&gt;http.80&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;查看 &lt;code&gt;Http Route Table&lt;/code&gt; 配置项：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl -n istio-system pc routes istio-ingressgateway-b6db8c46f-qcfks --name http.80 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;http.80&amp;quot;,
        &amp;quot;virtualHosts&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;bookinfo:80&amp;quot;,
                &amp;quot;domains&amp;quot;: [
                    &amp;quot;*&amp;quot;
                ],
                &amp;quot;routes&amp;quot;: [
                    {
                        &amp;quot;match&amp;quot;: {
                            &amp;quot;path&amp;quot;: &amp;quot;/productpage&amp;quot;
                        },
                        &amp;quot;route&amp;quot;: {
                            &amp;quot;cluster&amp;quot;: &amp;quot;outbound|9080||productpage.default.svc.cluster.local&amp;quot;,
                            &amp;quot;timeout&amp;quot;: &amp;quot;0.000s&amp;quot;,
                            &amp;quot;maxGrpcTimeout&amp;quot;: &amp;quot;0.000s&amp;quot;
                        },
                        ...
                    },
                    ...
                    {
                        &amp;quot;match&amp;quot;: {
                            &amp;quot;prefix&amp;quot;: &amp;quot;/api/v1/products&amp;quot;
                        },
                        &amp;quot;route&amp;quot;: {
                            &amp;quot;cluster&amp;quot;: &amp;quot;outbound|9080||productpage.default.svc.cluster.local&amp;quot;,
                            &amp;quot;timeout&amp;quot;: &amp;quot;0.000s&amp;quot;,
                            &amp;quot;maxGrpcTimeout&amp;quot;: &amp;quot;0.000s&amp;quot;
                        },
                        ...
                    },
                    ...
                ]
            }
        ],
        &amp;quot;validateClusters&amp;quot;: false
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VirtualService 中的 &lt;code&gt;hosts&lt;/code&gt; 字段对应 Http Route Table 中 &lt;code&gt;virtualHosts&lt;/code&gt; 配置项的 &lt;code&gt;domains&lt;/code&gt; 字段。这里表示可以使用任何域名来通过 ingressgateway 访问服务（也可以直接通过 IP 来访问）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VirtualService 中的 &lt;code&gt;exact&lt;/code&gt; 字段对应 Http Route Table 中 &lt;code&gt;routes.match&lt;/code&gt; 配置项的 &lt;code&gt;path&lt;/code&gt; 字段。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VirtualService 中的 &lt;code&gt;prefix&lt;/code&gt; 字段对应 Http Route Table 中 &lt;code&gt;routes.match&lt;/code&gt; 配置项的 &lt;code&gt;prefix&lt;/code&gt; 字段。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VirtualService 中的 &lt;code&gt;route.destination&lt;/code&gt; 配置项对应 Http Route Table 中 &lt;code&gt;routes.route&lt;/code&gt; 配置项的 &lt;code&gt;cluster&lt;/code&gt; 字段。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 Envoy 中的 HTTP 路由解析可以参考我之前的文章：&lt;a href=&#34;https://www.yangcs.net/posts/routing-basics/&#34; target=&#34;_blank&#34;&gt;HTTP 路由解析&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;查看 &lt;code&gt;Cluster&lt;/code&gt; 配置项：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ istioctl -n istio-system pc clusters istio-ingressgateway-b6db8c46f-qcfks --fqdn productpage.default.svc.cluster.local --port 9080 -o json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;outbound|9080||productpage.default.svc.cluster.local&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;EDS&amp;quot;,
        &amp;quot;edsClusterConfig&amp;quot;: {
            &amp;quot;edsConfig&amp;quot;: {
                &amp;quot;ads&amp;quot;: {}
            },
            &amp;quot;serviceName&amp;quot;: &amp;quot;outbound|9080||productpage.default.svc.cluster.local&amp;quot;
        },
        &amp;quot;connectTimeout&amp;quot;: &amp;quot;1.000s&amp;quot;,
        &amp;quot;circuitBreakers&amp;quot;: {
            &amp;quot;thresholds&amp;quot;: [
                {}
            ]
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，&lt;code&gt;Cluster&lt;/code&gt; 最终将集群外通过 ingressgateway 发起的请求转发给实际的 &lt;code&gt;endpoint&lt;/code&gt;，也就是 Kubernetes 集群中的 Service &lt;code&gt;productpage&lt;/code&gt; 下面的 Pod（由 serviceName 字段指定）。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;实际上 istioctl 正是通过 pilot 的 xds 接口来查看 Listener 、Route 和 Cluster 等信息的。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;好了，现在请求已经转交给 productpage 了，那么接下来这个请求将会如何走完整个旅程呢？请听下回分解！&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-5-参考-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;5. 参考&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kubernetes.org.cn/4379.html&#34; target=&#34;_blank&#34;&gt;Service Mesh深度学习系列（三）| istio源码分析之pilot-discovery模块分析（中）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/zh/help/ops/traffic-management/debugging-pilot-envoy/&#34; target=&#34;_blank&#34;&gt;调试 Envoy 和 Pilot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jimmysong.io/posts/envoy-archiecture-and-terminology/&#34; target=&#34;_blank&#34;&gt;Envoy 的架构与基本术语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 资源管理概述</title>
      <link>https://www.yangcs.net/posts/kubernetes-resource-management/</link>
      <pubDate>Fri, 03 Aug 2018 17:34:19 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-resource-management/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p id=&#34;div-border-left-red&#34;&gt;本文转载自 &lt;a href=&#34;http://cizixs.com/2018/06/25/kubernetes-resource-management&#34; target=&#34;_blank&#34;&gt;Cizixs 的博客&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-1-什么是资源-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;1. 什么是资源？&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;在 kubernetes 中，有两个基础但是非常重要的概念：node 和 pod。node 翻译成节点，是对集群资源的抽象；pod 是对容器的封装，是应用运行的实体。node 提供资源，而 pod 使用资源，这里的资源分为计算（cpu、memory、gpu）、存储（disk、ssd）、网络（network bandwidth、ip、ports）。这些资源提供了应用运行的基础，正确理解这些资源以及集群调度如何使用这些资源，对于大规模的 kubernetes 集群来说至关重要，不仅能保证应用的稳定性，也可以提高资源的利用率。&lt;/p&gt;

&lt;p&gt;在这篇文章，我们主要介绍 CPU 和内存这两个重要的资源，它们虽然都属于计算资源，但也有所差距。CPU 可分配的是使用时间，也就是操作系统管理的时间片，每个进程在一定的时间片里运行自己的任务（另外一种方式是绑核，也就是把 CPU 完全分配给某个 pod 使用，但这种方式不够灵活会造成严重的资源浪费，kubernetes 中并没有提供）；而对于内存，系统提供的是内存大小。&lt;/p&gt;

&lt;p&gt;CPU 的使用时间是可压缩的，换句话说它本身无状态，申请资源很快，也能快速正常回收；而内存大小是不可压缩的，因为它是有状态的（内存里面保存的数据），申请资源很慢（需要计算和分配内存块的空间），并且回收可能失败（被占用的内存一般不可回收）。&lt;/p&gt;

&lt;p&gt;把资源分成 &lt;span id=&#34;inline-blue&#34;&gt;可压缩&lt;/span&gt; 和 &lt;span id=&#34;inline-blue&#34;&gt;不可压缩&lt;/span&gt;，是因为在资源不足的时候，它们的表现很不一样。对于不可压缩资源，如果资源不足，也就无法继续申请资源（内存用完就是用完了），并且会导致 pod 的运行产生无法预测的错误（应用申请内存失败会导致一系列问题）；而对于可压缩资源，比如 CPU 时间片，即使 pod 使用的 CPU 资源很多，CPU 使用也可以按照权重分配给所有 pod 使用，虽然每个人使用的时间片减少，但不会影响程序的逻辑。&lt;/p&gt;

&lt;p&gt;在 kubernetes 集群管理中，有一个非常核心的功能：就是为 pod 选择一个主机运行。调度必须满足一定的条件，其中最基本的是主机上要有足够的资源给 pod 使用。&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*PfGIiTw68JLIUyo0FQY2dA.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;资源除了和调度相关之外，还和很多事情紧密相连，这正是这篇文章要解释的。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-2-kubernetes-资源的表示-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;2. kubernetes 资源的表示&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;用户在 pod 中可以配置要使用的资源总量，kubernetes 根据配置的资源数进行调度和运行。目前主要可以配置的资源是 CPU 和 memory，对应的配置字段是 &lt;code&gt;spec.containers[].resource.limits/request.cpu/memory&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;需要注意的是，用户是对每个容器配置 request 值，所有容器的资源请求之和就是 pod 的资源请求总量，而我们一般会说 pod 的资源请求和 limits。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;limits&lt;/code&gt; 和 &lt;code&gt;requests&lt;/code&gt; 的区别我们下面会提到，这里先说说比较容易理解的 cpu 和 memory。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CPU&lt;/code&gt; 一般用核数来标识，一核CPU 相对于物理服务器的一个超线程核，也就是操作系统 &lt;code&gt;/proc/cpuinfo&lt;/code&gt; 中列出来的核数。因为对资源进行了池化和虚拟化，因此 kubernetes 允许配置非整数个的核数，比如 &lt;code&gt;0.5&lt;/code&gt; 是合法的，它标识应用可以使用半个 CPU 核的计算量。CPU 的请求有两种方式，一种是刚提到的 &lt;code&gt;0.5&lt;/code&gt;，&lt;code&gt;1&lt;/code&gt; 这种直接用数字标识 CPU 核心数；另外一种表示是 &lt;code&gt;500m&lt;/code&gt;，它等价于 &lt;code&gt;0.5&lt;/code&gt;，也就是说 &lt;code&gt;1 Core = 1000m&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;内存比较容易理解，是通过字节大小指定的。如果直接一个数字，后面没有任何单位，表示这么多字节的内存；数字后面还可以跟着单位， 支持的单位有 &lt;code&gt;E&lt;/code&gt;、&lt;code&gt;P&lt;/code&gt;、&lt;code&gt;T&lt;/code&gt;、&lt;code&gt;G&lt;/code&gt;、&lt;code&gt;M&lt;/code&gt;、&lt;code&gt;K&lt;/code&gt;，前者分别是后者的 &lt;code&gt;1000&lt;/code&gt; 倍大小的关系，此外还支持 &lt;code&gt;Ei&lt;/code&gt;、&lt;code&gt;Pi&lt;/code&gt;、&lt;code&gt;Ti&lt;/code&gt;、&lt;code&gt;Gi&lt;/code&gt;、&lt;code&gt;Mi&lt;/code&gt;、&lt;code&gt;Ki&lt;/code&gt;，其对应的倍数关系是 &lt;code&gt;2^10 = 1024&lt;/code&gt;。比如要使用 100M 内存的话，直接写成 &lt;code&gt;100Mi&lt;/code&gt; 即可。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-3-节点可用资源-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;3. 节点可用资源&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;理想情况下，我们希望节点上所有的资源都可以分配给 pod 使用，但实际上节点上除了运行 pods 之外，还会运行其他的很多进程：系统相关的进程（比如 sshd、udev等），以及 kubernetes 集群的组件（kubelet、docker等）。我们在分配资源的时候，需要给这些进程预留一些资源，剩下的才能给 pod 使用。预留的资源可以通过下面的参数控制：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--kube-reserved=[cpu=100m][,][memory=100Mi][,][ephemeral-storage=1Gi]&lt;/code&gt;：控制预留给 kubernetes 集群组件的 CPU、memory 和存储资源&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--system-reserved=[cpu=100mi][,][memory=100Mi][,][ephemeral-storage=1Gi]&lt;/code&gt;：预留给系统的 CPU、memory 和存储资源&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两块预留之后的资源才是 pod 真正能使用的，不过考虑到 eviction 机制（下面的章节会提到），kubelet 会保证节点上的资源使用率不会真正到 100%，因此 pod 的实际可使用资源会稍微再少一点。主机上的资源逻辑分配图如下所示：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://i.loli.net/2018/06/25/5b3106f947190.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;需要注意的是，allocatable 不是指当前机器上可以分配的资源，而是指能分配给 pod 使用的资源总量，一旦 kubelet 启动这个值是不会变化的。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;allocatable 的值可以在 node 对象的 status 字段中读取，比如下面这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;status:
  allocatable:
    cpu: &amp;quot;2&amp;quot;
    ephemeral-storage: &amp;quot;35730597829&amp;quot;
    hugepages-2Mi: &amp;quot;0&amp;quot;
    memory: 3779348Ki
    pods: &amp;quot;110&amp;quot;
  capacity:
    cpu: &amp;quot;2&amp;quot;
    ephemeral-storage: 38770180Ki
    hugepages-2Mi: &amp;quot;0&amp;quot;
    memory: 3881748Ki
    pods: &amp;quot;110&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-4-kubernetes-资源对象-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;4. kubernetes 资源对象&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;在这部分，我们来介绍 kubernetes 中提供的让我们管理 pod 资源的原生对象。&lt;/p&gt;

&lt;h4 id=&#34;请求-requests-和上限-limits&#34;&gt;请求（requests）和上限（limits）&lt;/h4&gt;

&lt;p&gt;前面说过用户在创建 pod 的时候，可以指定每个容器的 Requests 和 Limits 两个字段，下面是一个实例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;resources:
  requests:
    memory: &amp;quot;64Mi&amp;quot;
    cpu: &amp;quot;250m&amp;quot;
  limits:
    memory: &amp;quot;128Mi&amp;quot;
    cpu: &amp;quot;500m&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Requests&lt;/code&gt; 是容器请求要使用的资源，kubernetes 会保证 pod 能使用到这么多的资源。请求的资源是调度的依据，只有当节点上的可用资源大于 pod 请求的各种资源时，调度器才会把 pod 调度到该节点上（如果 CPU 资源足够，内存资源不足，调度器也不会选择该节点）。&lt;/p&gt;

&lt;p&gt;需要注意的是，调度器只关心节点上可分配的资源，以及节点上所有 pods 请求的资源，而&lt;strong&gt;不关心&lt;/strong&gt;节点资源的实际使用情况，换句话说，如果节点上的 pods 申请的资源已经把节点上的资源用满，即使它们的使用率非常低，比如说 CPU 和内存使用率都低于 10%，调度器也不会继续调度 pod 上去。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Limits&lt;/code&gt; 是 pod 能使用的资源上限，是实际配置到内核 cgroups 里面的配置数据。对于内存来说，会直接转换成 &lt;code&gt;docker run&lt;/code&gt; 命令行的 &lt;code&gt;--memory&lt;/code&gt; 大小，最终会配置到 cgroups 对应任务的 &lt;code&gt;/sys/fs/cgroup/memory/……/memory.limit_in_bytes&lt;/code&gt; 文件中。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;如果 limit 没有配置，则表明没有资源的上限，只要节点上有对应的资源，pod 就可以使用。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;使用 requests 和 limits 概念，我们能分配更多的 pod，提升整体的资源使用率。但是这个体系有个非常重要的问题需要考虑，那就是&lt;strong&gt;怎么去准确地评估 pod 的资源 requests？&lt;/strong&gt;如果评估地过低，会导致应用不稳定；如果过高，则会导致使用率降低。这个问题需要开发者和系统管理员共同讨论和定义。&lt;/p&gt;

&lt;h4 id=&#34;limit-range-默认资源配置&#34;&gt;limit range（默认资源配置)&lt;/h4&gt;

&lt;p&gt;为每个 pod 都手动配置这些参数是挺麻烦的事情，kubernetes 提供了 &lt;code&gt;LimitRange&lt;/code&gt; 资源，可以让我们配置某个 namespace 默认的 request 和 limit 值，比如下面的实例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: &amp;quot;v1&amp;quot;
kind: &amp;quot;LimitRange&amp;quot;
metadata:
  name: you-shall-have-limits
spec:
  limits:
    - type: &amp;quot;Container&amp;quot;
      max:
        cpu: &amp;quot;2&amp;quot;
        memory: &amp;quot;1Gi&amp;quot;
      min:
        cpu: &amp;quot;100m&amp;quot;
        memory: &amp;quot;4Mi&amp;quot;
      default:
        cpu: &amp;quot;500m&amp;quot;
        memory: &amp;quot;200Mi&amp;quot;
      defaultRequest:
        cpu: &amp;quot;200m&amp;quot;
        memory: &amp;quot;100Mi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果对应 namespace 创建的 pod 没有写资源的 requests 和 limits 字段，那么它会自动拥有下面的配置信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;内存请求是 100Mi，上限是 200Mi&lt;/li&gt;
&lt;li&gt;CPU 请求是 200m，上限是 500m&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，如果 pod 自己配置了对应的参数，kubernetes 会使用 pod 中的配置。使用 LimitRange 能够让 namespace 中的 pod 资源规范化，便于统一的资源管理。&lt;/p&gt;

&lt;h4 id=&#34;资源配额-resource-quota&#34;&gt;资源配额（resource quota）&lt;/h4&gt;

&lt;p&gt;前面讲到的资源管理和调度可以认为 kubernetes 把这个集群的资源整合起来，组成一个资源池，每个应用（pod）会自动从整个池中分配资源来使用。默认情况下只要集群还有可用的资源，应用就能使用，并没有限制。kubernetes 本身考虑到了多用户和多租户的场景，提出了 namespace 的概念来对集群做一个简单的隔离。&lt;/p&gt;

&lt;p&gt;基于 namespace，kubernetes 还能够对资源进行隔离和限制，这就是 resource quota 的概念，翻译成资源配额，它限制了某个 namespace 可以使用的资源总额度。这里的资源包括 cpu、memory 的总量，也包括 kubernetes 自身对象（比如 pod、services 等）的数量。通过 resource quota，kubernetes 可以防止某个 namespace 下的用户不加限制地使用超过期望的资源，比如说不对资源进行评估就大量申请 16核 CPU 32G内存的 pod。&lt;/p&gt;

&lt;p&gt;下面是一个资源配额的实例，它限制了 namespace 只能使用 20核 CPU 和 1G 内存，并且能创建 10 个 pod、20个 rc、5个 service，可能适用于某个测试场景。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: ResourceQuota
metadata:
  name: quota
spec:
  hard:
    cpu: &amp;quot;20&amp;quot;
    memory: 1Gi
    pods: &amp;quot;10&amp;quot;
    replicationcontrollers: &amp;quot;20&amp;quot;
    resourcequotas: &amp;quot;1&amp;quot;
    services: &amp;quot;5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;resource quota 能够配置的选项还很多，比如 GPU、存储、configmaps、persistentvolumeclaims 等等，更多信息可以参考官方的文档。&lt;/p&gt;

&lt;p&gt;Resource quota 要解决的问题和使用都相对独立和简单，但是它也有一个限制：那就是它不能根据集群资源动态伸缩。一旦配置之后，resource quota 就不会改变，即使集群增加了节点，整体资源增多也没有用。kubernetes 现在没有解决这个问题，但是用户可以通过编写一个 controller 的方式来自己实现。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-5-应用优先级-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;5. 应用优先级&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;qos-服务质量&#34;&gt;QoS（服务质量）&lt;/h4&gt;

&lt;p&gt;Requests 和 limits 的配置除了表明资源情况和限制资源使用之外，还有一个隐藏的作用：它决定了 pod 的 QoS 等级。&lt;/p&gt;

&lt;p&gt;上一节我们提到了一个细节：如果 pod 没有配置 limits ，那么它可以使用节点上任意多的可用资源。这类 pod 能灵活使用资源，但这也导致它不稳定且危险，对于这类 pod 我们一定要在它占用过多资源导致节点资源紧张时处理掉。优先处理这类 pod，而不是资源使用处于自己请求范围内的 pod 是非常合理的想法，而这就是 pod QoS 的含义：根据 pod 的资源请求把 pod 分成不同的重要性等级。&lt;/p&gt;

&lt;p&gt;kubernetes 把 pod 分成了三个 QoS 等级：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;Guaranteed&lt;/span&gt; ：优先级最高，可以考虑数据库应用或者一些重要的业务应用。除非 pods 使用超过了它们的 limits，或者节点的内存压力很大而且没有 QoS 更低的 pod，否则不会被杀死&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;Burstable&lt;/span&gt; ：这种类型的 pod 可以多于自己请求的资源（上限有 limit 指定，如果 limit 没有配置，则可以使用主机的任意可用资源），但是重要性认为比较低，可以是一般性的应用或者批处理任务&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;Best Effort&lt;/span&gt; ：优先级最低，集群不知道 pod 的资源请求情况，调度不考虑资源，可以运行到任意节点上（从资源角度来说），可以是一些临时性的不重要应用。pod 可以使用节点上任何可用资源，但在资源不足时也会被优先杀死&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pod 的 requests 和 limits 是如何对应到这三个 QoS 等级上的，可以用下面一张表格概括：&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://i.loli.net/2018/06/25/5b307f4bc7d42.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;看到这里，你也许看出来一个问题了：&lt;strong&gt;如果不配置 requests 和 limits，pod 的 QoS 竟然是最低的&lt;/strong&gt;。没错，所以推荐大家理解 QoS 的概念，并且按照需求&lt;strong&gt;一定要给 pod 配置 requests 和 limits 参数&lt;/strong&gt;，不仅可以让调度更准确，也能让系统更加稳定。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;按照现在的方法根据 pod 请求的资源进行配置不够灵活和直观，更理想的情况是用户可以直接配置 pod 的 QoS，而不用关心具体的资源申请和上限值。但 kubernetes 目前还没有这方面的打算。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Pod 的 QoS 还决定了容器的 OOM（out-of-memory）值，它们对应的关系如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/06/25/5b307a5b3557c.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，QoS 越高的 pod oom 值越低，也就越不容易被系统杀死。对于 Bustable pod，它的值是根据 request 和节点内存总量共同决定的:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;oomScoreAdjust := 1000 - (1000*memoryRequest)/memoryCapacity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;memoryRequest&lt;/code&gt; 是 pod 申请的资源，&lt;code&gt;memoryCapacity&lt;/code&gt; 是节点的内存总量。可以看到，申请的内存越多，oom 值越低，也就越不容易被杀死。&lt;/p&gt;

&lt;p&gt;QoS 的作用会在后面介绍 eviction 的时候详细讲解。&lt;/p&gt;

&lt;h4 id=&#34;pod-优先级-priority&#34;&gt;Pod 优先级（priority）&lt;/h4&gt;

&lt;p&gt;除了 QoS，kubernetes 还允许我们自定义 pod 的优先级，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: scheduling.k8s.io/v1alpha1
kind: PriorityClass
metadata:
  name: high-priority
value: 1000000
globalDefault: false
description: &amp;quot;This priority class should be used for XYZ service pods only.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;优先级的使用也比较简单，只需要在 &lt;code&gt;pod.spec.PriorityClassName&lt;/code&gt; 指定要使用的优先级名字，即可以设置当前 pod 的优先级为对应的值。&lt;/p&gt;

&lt;p&gt;Pod 的优先级在调度的时候会使用到。首先，待调度的 pod 都在同一个队列中，启用了 pod priority 之后，调度器会根据优先级的大小，把优先级高的 pod 放在前面，提前调度。&lt;/p&gt;

&lt;p&gt;另外，如果在调度的时候，发现某个 pod 因为资源不足无法找到合适的节点，调度器会尝试 preempt 的逻辑。 简单来说，调度器会试图找到这样一个节点：找到它上面优先级低于当前要调度 pod 的所有 pod，如果杀死它们，能腾足够的资源，调度器会执行删除操作，把 pod 调度到节点上。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-6-驱逐-eviction-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;6. 驱逐（Eviction）&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;至此，我们讲述的都是理想情况下 kubernetes 的工作状况，我们假设资源完全够用，而且应用也都是在使用规定范围内的资源。&lt;/p&gt;

&lt;p&gt;但现实不会如此简单，在管理集群的时候我们常常会遇到资源不足的情况，在这种情况下我们要&lt;strong&gt;保证整个集群可用&lt;/strong&gt;，并且尽可能&lt;strong&gt;减少应用的损失&lt;/strong&gt;。保证集群可用比较容易理解，首先要保证系统层面的核心进程正常，其次要保证 kubernetes 本身组件进程不出问题；但是如果量化应用的损失呢？首先能想到的是如果要杀死 pod，要尽量减少总数。另外一个就和 pod 的优先级相关了，那就是尽量杀死不那么重要的应用，让重要的应用不受影响。&lt;/p&gt;

&lt;p&gt;Pod 的驱逐是在 kubelet 中实现的，因为 kubelet 能动态地感知到节点上资源使用率实时的变化情况。其核心的逻辑是：kubelet 实时监控节点上各种资源的使用情况，一旦发现某个不可压缩资源出现要耗尽的情况，就会主动终止节点上的 pod，让节点能够正常运行。被终止的 pod 所有容器会停止，状态会被设置为 failed。&lt;/p&gt;

&lt;h4 id=&#34;驱逐触发条件&#34;&gt;驱逐触发条件&lt;/h4&gt;

&lt;p&gt;那么哪些资源不足会导致 kubelet 执行驱逐程序呢？目前主要有三种情况：实际内存不足、节点文件系统的可用空间（文件系统剩余大小和 inode 数量）不足、以及镜像文件系统的可用空间（包括文件系统剩余大小和 inode 数量）不足。&lt;/p&gt;

&lt;p&gt;下面这图是具体的触发条件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2018/06/24/5b2f1a966a703.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有了数据的来源，另外一个问题是触发的时机，也就是到什么程度需要触发驱逐程序？kubernetes 运行用户自己配置，并且支持两种模式：按照百分比和按照绝对数量。比如对于一个 32G 内存的节点当可用内存少于 10% 时启动驱逐程序，可以配置 &lt;code&gt;memory.available&amp;lt;10%&lt;/code&gt; 或者 &lt;code&gt;memory.available&amp;lt;3.2Gi&lt;/code&gt;。&lt;/p&gt;

&lt;div id=&#34;note&#34;&gt;
&lt;p id=&#34;note-title&#34;&gt;Note&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;默认情况下，kubelet 的驱逐规则是 &lt;code&gt;memory.available&lt;100Mi&lt;/code&gt;，对于生产环境这个配置是不可接受的，所以一定要根据实际情况进行修改。&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&#34;软驱逐-soft-eviction-和硬驱逐-hard-eviction&#34;&gt;软驱逐（soft eviction）和硬驱逐（hard eviction）&lt;/h4&gt;

&lt;p&gt;因为驱逐 pod 是具有毁坏性的行为，因此必须要谨慎。有时候内存使用率增高只是暂时性的，有可能 20s 内就能恢复，这时候启动驱逐程序意义不大，而且可能会导致应用的不稳定，我们要考虑到这种情况应该如何处理；另外需要注意的是，如果内存使用率过高，比如高于 95%（或者 90%，取决于主机内存大小和应用对稳定性的要求），那么我们不应该再多做评估和考虑，而是赶紧启动驱逐程序，因为这种情况再花费时间去判断可能会导致内存继续增长，系统完全崩溃。&lt;/p&gt;

&lt;p&gt;为了解决这个问题，kubernetes 引入了 soft eviction 和 hard eviction 的概念。&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;软驱逐&lt;/span&gt; 可以在资源紧缺情况并没有哪些严重的时候触发，比如内存使用率为 85%，软驱逐还需要配置一个时间指定软驱逐条件持续多久才触发，也就是说 kubelet 在发现资源使用率达到设定的阈值之后，并不会立即触发驱逐程序，而是继续观察一段时间，如果资源使用率高于阈值的情况持续一定时间，才开始驱逐。并且驱逐 pod 的时候，会遵循 grace period ，等待 pod 处理完清理逻辑。和软驱逐相关的启动参数是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--eviction-soft&lt;/code&gt;：软驱逐触发条件，比如 &lt;code&gt;memory.available&amp;lt;1Gi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--eviction-sfot-grace-period&lt;/code&gt;：触发条件持续多久才开始驱逐，比如 memory.available=2m30s&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--eviction-max-pod-grace-period&lt;/code&gt;：kill pod 时等待 grace period 的时间让 pod 做一些清理工作，如果到时间还没有结束就做 kill&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前面两个参数必须同时配置，软驱逐才能正常工作；后一个参数会和 pod 本身配置的 grace period 比较，选择较小的一个生效。&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;inline-blue&#34;&gt;硬驱逐&lt;/span&gt; 更加直接干脆，kubelet 发现节点达到配置的硬驱逐阈值后，立即开始驱逐程序，并且不会遵循 grace period，也就是说立即强制杀死 pod。对应的配置参数只有一个 &lt;code&gt;--evictio-hard&lt;/code&gt;，可以选择上面表格中的任意条件搭配。&lt;/p&gt;

&lt;p&gt;设置这两种驱逐程序是为了平衡节点稳定性和对 pod 的影响，软驱逐照顾到了 pod 的优雅退出，减少驱逐对 pod 的影响；而硬驱逐则照顾到节点的稳定性，防止资源的快速消耗导致节点不可用。&lt;/p&gt;

&lt;p&gt;软驱逐和硬驱逐可以单独配置，不过还是推荐两者都进行配置，一起使用。&lt;/p&gt;

&lt;h4 id=&#34;驱逐哪些-pods&#34;&gt;驱逐哪些 pods？&lt;/h4&gt;

&lt;p&gt;上面我们已经整体介绍了 kubelet 驱逐 pod 的逻辑和过程，那这里就牵涉到一个具体的问题：&lt;strong&gt;要驱逐哪些 pod？&lt;/strong&gt;驱逐的重要原则是尽量减少对应用程序的影响。&lt;/p&gt;

&lt;p&gt;如果是存储资源不足，kubelet 会根据情况清理状态为 Dead 的 pod 和它的所有容器，以及清理所有没有使用的镜像。如果上述清理并没有让节点回归正常，kubelet 就开始清理 pod。&lt;/p&gt;

&lt;p&gt;一个节点上会运行多个 pod，驱逐所有的 pods 显然是不必要的，因此要做出一个抉择：在节点上运行的所有 pod 中选择一部分来驱逐。虽然这些 pod 乍看起来没有区别，但是它们的地位是不一样的，正如乔治·奥威尔在《动物庄园》的那句话：&lt;/p&gt;

&lt;p id=&#34;div-border-left-purple&#34;&gt;所有动物生而平等，但有些动物比其他动物更平等。&lt;/p&gt;

&lt;p&gt;Pod 也是不平等的，有些 pod 要比其他 pod 更重要。只管来说，系统组件的 pod 要比普通的 pod 更重要，另外运行数据库的 pod 自然要比运行一个无状态应用的 pod 更重要。kubernetes 又是怎么决定 pod 的优先级的呢？这个问题的答案就藏在我们之前已经介绍过的内容里：pod requests 和 limits、优先级（priority），以及 pod 实际的资源使用。&lt;/p&gt;

&lt;p&gt;简单来说，kubelet 会根据以下内容对 pod 进行排序：pod 是否使用了超过请求的紧张资源、pod 的优先级、然后是使用的紧缺资源和请求的紧张资源之间的比例。具体来说，kubelet 会按照如下的顺序驱逐 pod：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用的紧张资源超过请求数量的 &lt;code&gt;BestEffort&lt;/code&gt; 和 &lt;code&gt;Burstable pod&lt;/code&gt;，这些 pod 内部又会按照优先级和使用比例进行排序&lt;/li&gt;
&lt;li&gt;紧张资源使用量低于 requests 的 &lt;code&gt;Burstable&lt;/code&gt; 和 &lt;code&gt;Guaranteed&lt;/code&gt; 的 pod 后面才会驱逐，只有当系统组件（kubelet、docker、journald 等）内存不够，并且没有上面 QoS 比较低的 pod 时才会做。执行的时候还会根据 priority 排序，优先选择优先级低的 pod&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;防止波动&#34;&gt;防止波动&lt;/h4&gt;

&lt;p&gt;这里的波动有两种情况，我们先说说第一种。驱逐条件出发后，如果 kubelet 驱逐一部分 pod，让资源使用率低于阈值就停止，那么很可能过一段时间资源使用率又会达到阈值，从而再次出发驱逐，如此循环往复……为了处理这种问题，我们可以使用 &lt;code&gt;--eviction-minimum-reclaim&lt;/code&gt; 解决，这个参数配置每次驱逐至少清理出来多少资源才会停止。&lt;/p&gt;

&lt;p&gt;另外一个波动情况是这样的：Pod 被驱逐之后并不会从此消失不见，常见的情况是 kubernetes 会自动生成一个新的 pod 来取代，并经过调度选择一个节点继续运行。如果不做额外处理，有理由相信 pod 选择原来节点的可能性比较大（因为调度逻辑没变，而它上次调度选择的就是该节点），之所以说可能而不是绝对会再次选择该节点，是因为集群 pod 的运行和分布和上次调度时极有可能发生了变化。&lt;/p&gt;

&lt;p&gt;无论如何，如果被驱逐的 pod 再次调度到原来的节点，很可能会再次触发驱逐程序，然后 pod 再次被调度到当前节点，循环往复…… 这种事情当然是我们不愿意看到的，虽然看似复杂，但这个问题解决起来非常简单：驱逐发生后，kubelet 更新节点状态，调度器感知到这一情况，暂时不往该节点调度 pod 即可。&lt;code&gt;--eviction-pressure-transition-period&lt;/code&gt; 参数可以指定 kubelet 多久才上报节点的状态，因为默认的上报状态周期比较短，频繁更改节点状态会导致驱逐波动。&lt;/p&gt;

&lt;p&gt;做一个总结，下面是一个使用了上面多种参数的驱逐配置实例（你应该能看懂它们是什么意思了）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;–-eviction-soft=memory.available&amp;lt;80%,nodefs.available&amp;lt;2Gi \
–-eviction-soft-grace-period=memory.available=1m30s,nodefs.available=1m30s \
–-eviction-max-pod-grace-period=120 \
–-eviction-hard=memory.available&amp;lt;500Mi,nodefs.available&amp;lt;1Gi \
–-eviction-pressure-transition-period=30s \
--eviction-minimum-reclaim=&amp;quot;memory.available=0Mi,nodefs.available=500Mi,imagefs.available=2Gi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-7-碎片整理和重调度-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;7. 碎片整理和重调度&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Kubernetes 的调度器在为 pod 选择运行节点的时候，只会考虑到调度那个时间点集群的状态，经过一系列的算法选择一个&lt;strong&gt;当时最合适&lt;/strong&gt;的节点。但是集群的状态是不断变化的，用户创建的 pod 也是动态的，随着时间变化，原来调度到某个节点上的 pod 现在看来可能有更好的节点可以选择。比如考虑到下面这些情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调度 pod 的条件已经不再满足，比如节点的 taints 和 labels 发生了变化&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;新节点加入了集群。如果默认配置了把 pod 打散，那么应该有一些 pod 最好运行在新节点上&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;节点的使用率不均匀。调度后，有些节点的分配率和使用率比较高，另外一些比较低&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;节点上有资源碎片。有些节点调度之后还剩余部分资源，但是又低于任何 pod 的请求资源；或者 memory 资源已经用完，但是 CPU 还有挺多没有使用&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想要解决上述的这些问题，都需要把 pod 重新进行调度（把 pod 从当前节点移动到另外一个节点）。但是默认情况下，一旦 pod 被调度到节点上，除非给杀死否则不会移动到另外一个节点的。&lt;/p&gt;

&lt;p&gt;为此 kubernetes 社区孵化了一个称为 &lt;a href=&#34;https://github.com/kubernetes-incubator/descheduler&#34; target=&#34;_blank&#34;&gt;descheduler&lt;/a&gt; 的项目，专门用来做重调度。重调度的逻辑很简单：找到上面几种情况中已经不是最优的 pod，把它们驱逐掉（eviction）。&lt;/p&gt;

&lt;p&gt;目前，descheduler 不会决定驱逐的 pod 应该调度到哪台机器，而是&lt;strong&gt;假定默认的调度器会做出正确的调度抉择&lt;/strong&gt;。也就是说，之所以 pod 目前不合适，不是因为调度器的算法有问题，而是因为集群的情况发生了变化。如果让调度器重新选择，调度器现在会把 pod 放到合适的节点上。这种做法让 descheduler 逻辑比较简单，而且避免了调度逻辑出现在两个组件中。&lt;/p&gt;

&lt;p&gt;Descheduler 执行的逻辑是可以配置的，目前有几种场景：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RemoveDuplicates&lt;/code&gt;：RS、deployment 中的 pod 不能同时出现在一台机器上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LowNodeUtilization&lt;/code&gt;：找到资源使用率比较低的 node，然后驱逐其他资源使用率比较高节点上的 pod，期望调度器能够重新调度让资源更均衡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RemovePodsViolatingInterPodAntiAffinity&lt;/code&gt;：找到已经违反 Pod Anti Affinity 规则的 pods 进行驱逐，可能是因为反亲和是后面加上去的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RemovePodsViolatingNodeAffinity&lt;/code&gt;：找到违反 Node Affinity 规则的 pods 进行驱逐，可能是因为 node 后面修改了 label&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，为了保证应用的稳定性，descheduler 并不会随意地驱逐 pod，还是会尊重 pod 运行的规则，包括 pod 的优先级（不会驱逐 Critical pod，并且按照优先级顺序进行驱逐）和 PDB（如果违反了 PDB，则不会进行驱逐），并且不会驱逐没有 deployment、rs、jobs 的 pod 不会驱逐，daemonset pod 不会驱逐，有 local storage 的 pod 也不会驱逐。&lt;/p&gt;

&lt;p&gt;Descheduler 不是一个常驻的任务，每次执行完之后会退出，因此推荐使用 CronJob 来运行。&lt;/p&gt;

&lt;p&gt;总的来说，descheduler 是对原生调度器的补充，用来解决原生调度器的调度决策随着时间会变得失效，或者不够优化的缺陷。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-8-资源动态调整-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;8. 资源动态调整&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;动态调整的思路：应用的实际流量会不断变化，因此使用率也是不断变化的，为了应对应用流量的变化，我们应用能够自动调整应用的资源。比如在线商品应用在促销的时候访问量会增加，我们应该自动增加 pod 运算能力来应对；当促销结束后，有需要自动降低 pod 的运算能力防止浪费。&lt;/p&gt;

&lt;p&gt;运算能力的增减有两种方式：改变单个 pod 的资源，已经增减 pod 的数量。这两种方式对应了 kubernetes 的 HPA 和 VPA。&lt;/p&gt;

&lt;h4 id=&#34;horizontal-pod-autoscaling-横向-pod-自动扩展&#34;&gt;Horizontal Pod AutoScaling（横向 Pod 自动扩展）&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://478h5m1yrfsa3bbe262u7muv-wpengine.netdna-ssl.com/wp-content/uploads/2018/02/autoscaler_kubernetes.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;横向 pod 自动扩展的思路是这样的：kubernetes 会运行一个 controller，周期性地监听 pod 的资源使用情况，当高于设定的阈值时，会自动增加 pod 的数量；当低于某个阈值时，会自动减少 pod 的数量。自然，这里的阈值以及 pod 的上限和下限的数量都是需要用户配置的。&lt;/p&gt;

&lt;p&gt;上面这句话隐藏了一个重要的信息：HPA 只能和 RC、deployment、RS 这些可以动态修改 replicas 的对象一起使用，而无法用于单个 pod、daemonset（因为它控制的 pod 数量不能随便修改）等对象。&lt;/p&gt;

&lt;p&gt;目前官方的监控数据来源是 metrics server 项目，可以配置的资源只有 CPU，但是用户可以使用自定义的监控数据（比如 prometheus），其他资源（比如 memory）的 HPA 支持也已经在路上了。&lt;/p&gt;

&lt;h4 id=&#34;vertical-pod-autoscaling&#34;&gt;Vertical Pod AutoScaling&lt;/h4&gt;

&lt;p&gt;和 HPA 的思路相似，只不过 VPA 调整的是单个 pod 的 request 值（包括 CPU 和 memory）。VPA 包括三个组件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Recommander&lt;/code&gt;：消费 metrics server 或者其他监控组件的数据，然后计算 pod 的资源推荐值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Updater&lt;/code&gt;：找到被 vpa 接管的 pod 中和计算出来的推荐值差距过大的，对其做 update 操作（目前是 evict，新建的 pod 在下面 admission controller 中会使用推荐的资源值作为 request）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Admission Controller&lt;/code&gt;：新建的 pod 会经过该 Admission Controller，如果 pod 是被 vpa 接管的，会使用 recommander 计算出来的推荐值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到，这三个组件的功能是互相补充的，共同实现了动态修改 pod 请求资源的功能。相对于 HPA，目前 VPA 还处于 alpha，并且还没有合并到官方的 kubernetes release 中，后续的接口和功能很可能会发生变化。&lt;/p&gt;

&lt;h4 id=&#34;cluster-auto-scaler&#34;&gt;Cluster Auto Scaler&lt;/h4&gt;

&lt;p&gt;随着业务的发展，应用会逐渐增多，每个应用使用的资源也会增加，总会出现集群资源不足的情况。为了动态地应对这一状况，我们还需要 CLuster Auto Scaler，能够根据整个集群的资源使用情况来增减节点。&lt;/p&gt;

&lt;p&gt;对于公有云来说，Cluster Auto Scaler 就是监控这个集群因为资源不足而 pending 的 pod，根据用户配置的阈值调用公有云的接口来申请创建机器或者销毁机器。对于私有云，则需要对接内部的管理平台。&lt;/p&gt;

&lt;p&gt;目前 HPA 和 VPA 不兼容，只能选择一个使用，否则两者会相互干扰。而且 VPA 的调整需要重启 pod，这是因为 pod 资源的修改是比较大的变化，需要重新走一下 apiserver、调度的流程，保证整个系统没有问题。目前社区也有计划在做原地升级，也就是说不通过杀死 pod 再调度新 pod 的方式，而是直接修改原有 pod 来更新。&lt;/p&gt;

&lt;p&gt;理论上 HPA 和 VPA 是可以共同工作的，HPA 负责瓶颈资源，VPA 负责其他资源。比如对于 CPU 密集型的应用，使用 HPA 监听 CPU 使用率来调整 pods 个数，然后用 VPA 监听其他资源（memory、IO）来动态扩展这些资源的 request 大小即可。当然这只是理想情况。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-9-总结-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;9. 总结&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;从前面介绍的各种 kubernetes 调度和资源管理方案可以看出来，提高应用的资源使用率、保证应用的正常运行、维护调度和集群的公平性是件非常复杂的事情，kubernetes 并没有完美的方法，而是对各种可能的问题不断提出一些针对性的方案。&lt;/p&gt;

&lt;p&gt;集群的资源使用并不是静态的，而是随着时间不断变化的，目前 kubernetes 的调度决策都是基于调度时集群的一个静态资源切片进行的，动态地资源调整是通过 kubelet 的驱逐程序进行的，HPA 和 VPA 等方案也不断提出，相信后面会不断完善这方面的功能，让 kubernetes 更加智能。&lt;/p&gt;

&lt;p&gt;资源管理和调度、应用优先级、监控、镜像中心等很多东西相关，是个非常复杂的领域。在具体的实施和操作的过程中，常常要考虑到企业内部的具体情况和需求，做出针对性的调整，并且需要开发者、系统管理员、SRE、监控团队等不同小组一起合作。但是这种付出从整体来看是值得的，提升资源的利用率能有效地节约企业的成本，也能让应用更好地发挥出作用。&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Vistio—使用 Netflix 的 Vizceral 可视化 Istio service mesh</title>
      <link>https://www.yangcs.net/posts/vistio-visualize-your-istio-mesh-using-netflixs-vizceral/</link>
      <pubDate>Fri, 03 Aug 2018 15:29:37 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/vistio-visualize-your-istio-mesh-using-netflixs-vizceral/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;p id=&#34;div-border-left-red&#34;&gt;本文转载自 &lt;a href=&#34;https://jimmysong.io/posts/vistio-visualize-your-istio-mesh-using-netflixs-vizceral/&#34; target=&#34;_blank&#34;&gt;Jimmy Song 的博客&lt;/a&gt;，并且有很多改动。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Netflix/vizceral&#34; target=&#34;_blank&#34;&gt;Vizceral&lt;/a&gt; 是 &lt;code&gt;Netflix&lt;/code&gt; 发布的一个开源项目，用于近乎实时地监控应用程序和集群之间的网络流量。&lt;a href=&#34;https://github.com/nmnellis/vistio&#34; target=&#34;_blank&#34;&gt;Vistio&lt;/a&gt; 是使用 Vizceral 对 Istio 和网格监控的改进。它利用 &lt;code&gt;Istio Mixer&lt;/code&gt; 生成的指标，然后将其输入 Prometheus。Vistio 查询 &lt;code&gt;Prometheus&lt;/code&gt; 并将数据存储在本地以允许重播流量。关于 Vizceral 可以参考这篇文章：&lt;a href=&#34;https://medium.com/netflix-techblog/vizceral-open-source-acc0c32113fe&#34; target=&#34;_blank&#34;&gt;Vizceral Open Source&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/YJqKg8M5xnNlqYtNr5Jsmw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vizceral 有两个可视化级别，全局可视化和集群级别可视化。在全局范围内（如上所示），您可以通过 Istio Ingress Gateway 等入口点将从 Internet 到 Istio 服务网格网络的网络流量可视化，或者您可以在 Istio 服务网格网络中显示总网络流量。&lt;/p&gt;

&lt;p&gt;在集群级别（如下所示），您可以可视化内部网格的流量。通过设置警告和错误级别警报，当应用程序出现问题时可以被快速检测出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/vistio-mesh1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-1-在-istio-服务网格中安装-vistio-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;1. 在 Istio 服务网格中安装 Vistio&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;依赖&#34;&gt;依赖&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Prometheus&lt;/li&gt;
&lt;li&gt;Istio 1.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;假设&#34;&gt;假设&lt;/h4&gt;

&lt;p&gt;以下 Demo 使得这些假设更容易部署。如果您的环境设置不同，则可能需要将代码下载到本地并编辑一些文件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prometheus 部署在 &lt;code&gt;istio-system&lt;/code&gt; namespace 下，可以通过 &lt;code&gt;http://prometheus.istio-system:9090&lt;/code&gt; 地址访问&lt;/li&gt;
&lt;li&gt;Istio mixer 启用了 &lt;code&gt;istio_request_count metric&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Kubernetes 集群包含有 &lt;code&gt;standard StorageClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为了便于部署已安装了 Helm（可选）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;由于测试环境大多数都没有外部网络存储，无法创建 StorageClass，待会儿我们可以将这部分的配置修改为 &lt;code&gt;hostPath&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;前言&#34;&gt;前言&lt;/h4&gt;

&lt;p&gt;如果您还尚未部署服务网格，可以按照此 &lt;a href=&#34;https://istio.io/docs/guides/bookinfo/&#34; target=&#34;_blank&#34;&gt;Istio Bookinfo Demo&lt;/a&gt; 中的说明部署 Istio 及其示例应用程序。您需要能够在应用程序之间生成流量。要测试指标是否从 Mixer 正确发送到 Prometheus，您可以打开 Prometheus 查询 &lt;code&gt;istio_request_bytes_count&lt;/code&gt;，应该会看到多个条目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/vistio-prometheus.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-2-部署-vistio-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;2. 部署 Vistio&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;您可以选择通过 &lt;code&gt;kubectl&lt;/code&gt; 或者 &lt;code&gt;Helm&lt;/code&gt; 来部署 Vistio，下面会主要介绍 Helm 部署方式。有些变量可能需要根据您自己的环境来修改。&lt;/p&gt;

&lt;p&gt;如果你想通过 Helm 部署 Vistio，你将需要在 GitHub 上下载项目来获取 Helm 模板。此外，如果上述假设之一不符合您的需求（例如 prometheus url 不同），则应手动编辑文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/nmnellis/vistio.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&#34;使用-helm-部署&#34;&gt;使用 Helm 部署&lt;/h4&gt;

&lt;p&gt;由于我们使用的是 Istio 1.0 版本，而 Vistio 已经有相当一段时间没有更新了，很多配置项已经不适用了，需要改动很多地方。&lt;/p&gt;

&lt;p&gt;切换到 Vistio 项目的根目录，修改 &lt;code&gt;values-with-ingress.yaml&lt;/code&gt; 配置文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim helm/vistio/values-with-ingress.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;vistioConfig:
  graphName: Vistio
  globalLevel:
    maxVolume: 2000000
    clusterConnections:
      # Total requests per second coming into the ingress controller from internet
      # 将 istio_request_count 修改为 istio_request_bytes_count
      # 将 destination_service=&amp;quot;istio-ingressgateway.istio-system.svc.cluster.local&amp;quot; 修改为 source_workload=&amp;quot;istio-ingressgateway&amp;quot;
      - query: sum(rate(istio_request_bytes_count{source_workload=&amp;quot;istio-ingressgateway&amp;quot;}[1m])) by (response_code)
        prometheusURL: http://prometheus.istio-system:9090
        ...
  clusterLevel:
    # Cluster name must match &#39;target&#39; name in global
    - cluster: istio-mesh
      maxVolume: 3000
      serviceConnections:
      # 将 istio_request_count 修改为 istio_request_bytes_count
      # 将 source_service 修改为 source_app
        - query: sum(rate(istio_request_bytes_count[1m])) by (source_app,destination_service,response_code)
          prometheusURL: http://prometheus.istio-system:9090
          source:
            # 将 source_service 修改为 source_app
            label: source_app
            ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 &lt;code&gt;values.yaml&lt;/code&gt; 配置文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim helm/vistio/values.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;...
######################################
## Vistio-web
######################################
web:
  env:
    # Vistio-web 需要调用 Vistio-api 的 url，而且这个 url 必须是通过浏览器可以访问的，所以可以使用 ingress，后面将会创建
    updateURL: &amp;quot;http://vistio-api.istio.io/graph&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 &lt;code&gt;statefulset.yaml&lt;/code&gt; 配置文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vim helm/vistio/templates/statefulset.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: vistio-api
  ...
spec:
  replicas: {{ .Values.api.replicaCount }}
  serviceName: vistio
  template:
    metadata:
    ...
    spec:
      volumes:
        - name: config
          configMap:
            name: vistio-api-config
        # 添加 volume vistio-db
        - name: vistio-db
          hostPath:
            path: /data/vistio
  # 将 volumeClaimTemplates 配置项注释或删除
  #volumeClaimTemplates:
  #- metadata:
  #    annotations:
  #      volume.beta.kubernetes.io/storage-class: {{ .Values.api.storage.class }}
  #    name: vistio-db
  #  spec:
  #    accessModes:
  #    - ReadWriteOnce
  #    resources:
  #      requests:
  #        storage: {{ .Values.api.storage.size }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;同时你需要在运行 vistio-api 的节点上提前创建 &lt;code&gt;/data/vistio&lt;/code&gt; 目录。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;运行 &lt;code&gt;helm install&lt;/code&gt; 部署 Vistio。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ helm install helm/vistio -f helm/vistio/values-with-ingress.yaml --name vistio --namespace default
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get pod

vistio-api-0                      1/1       Running   0          2m
vistio-web-5c44b7f76d-hmjdc       1/1       Running   0          2m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-3-验证和暴露-vistio-web-api-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;3. 验证和暴露 Vistio Web/API&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;暴露-vistio-web-api&#34;&gt;暴露 Vistio Web/API&lt;/h4&gt;

&lt;p&gt;为 Service vistio-api 和 vistio-web 创建 &lt;code&gt;Ingress&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;$ cat ingress.yaml

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: vistio-web
  namespace: default
spec:
  rules:
  - host: vistio-web.istio.io
    http:
      paths:
      - path: /
        backend:
          serviceName: vistio-web
          servicePort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: vistio-api
  namespace: default
spec:
  rules:
  - host: vistio-api.istio.io
    http:
      paths:
      - path: /
        backend:
          serviceName: vistio-api
          servicePort: 9091
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl create -f ingress.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在你的本地电脑上添加两条 hosts：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$Ingree_host vistio-web.istio.io
$Ingree_host vistio-api.istio.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 &lt;code&gt;$Ingree_host&lt;/code&gt; 替换为 Ingress Controller 运行节点的 IP。&lt;/p&gt;

&lt;h4 id=&#34;验证-visito-api&#34;&gt;验证 visito-api&lt;/h4&gt;

&lt;p&gt;vistio-web 调用 vistio-api 来渲染服务网格。访问 &lt;code&gt;http://vistio-api.istio.io/graph&lt;/code&gt; 您应该会看到类似下列的输出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/LkvzHsN0VzZSOD_wy7sCgQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;访问-vistio&#34;&gt;访问 Vistio&lt;/h4&gt;

&lt;p&gt;如果一切都已经启动并准备就绪，您就可以访问 Vistio UI，开始探索服务网格网络，访问&lt;code&gt;http://vistio-web.istio.io&lt;/code&gt; 您将会看到类似下图的输出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/vistio-web.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-4-探索-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;4. 探索&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;在全局范围内，您将看到Istio网格内所有请求的总和，如果你点击 &lt;code&gt;istio-mesh&lt;/code&gt; 气泡，就能查看你的网状网络。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/vistio-mesh1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在你的 Istio 网格中，您可以使用许多可视化工具来帮助您查明故障的应用程序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/WM6lx-4bms7YBO-EHs_a2g.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;使用屏幕右上方的过滤器可以快速过滤出错误率较高的应用程序。通过高级配置，当错误率超过特定值时，也可以触发警报。警报将显示给定应用程序的当前错误率趋势。&lt;/p&gt;

&lt;h3 id=&#34;p-id-h2-5-问题排查-p&#34;&gt;&lt;p id=&#34;h2&#34;&gt;5. 问题排查&lt;/p&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;访问 &lt;code&gt;http://vistio-api.istio.io/graph&lt;/code&gt;，如果你从 vistio-api 中看到以下输出，表示某些功能无法正常工作。正确的输出显示在教程上面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/TcFuNvCvk5C53rO4vXLkw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;检查 vistio-api 日志中是否有错误——在大多数情况下，vistio-api 将记录与 Prometheus 通信时遇到的任何问题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl logs -f $(kubectl get pod -l app=vistio-api -o go-template=&#39;{{range .items}}{{.metadata.name}}{{end}}&#39;) -c vistio-api
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;验证 Prometheus 查询——vistio-api 使用以下查询检索其数据。您应该确保 Prometheus 内部的数据都存在。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Global Level Query
sum(rate(istio_request_bytes_count{source_workload=&amp;quot;istio-ingressgateway&amp;quot;}[1m])) by (response_code)
# Cluster Level Query
sum(rate(istio_request_bytes_count[1m])) by (source_app,destination_service,response_code)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;提交 Issue——如果遇到问题无法解决请提交 Issue：&lt;a href=&#34;https://github.com/nmnellis/vistio/issues&#34; target=&#34;_blank&#34;&gt;https://github.com/nmnellis/vistio/issues&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;http://o7z41ciog.bkt.clouddn.com/qrcode_for_wechat_big.jpg&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;style&gt;
#h2{
    margin-bottom:2em;
    margin-right: 5px;
    padding: 8px 15px;
    letter-spacing: 2px;
    background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181));
    background-color: rgb(63, 81, 181);
    color: rgb(255, 255, 255);
    border-left: 10px solid rgb(51, 51, 51);
    border-radius:5px;
    text-shadow: rgb(102, 102, 102) 1px 1px 1px;
    box-shadow: rgb(102, 102, 102) 1px 1px 2px;
}
#note {
    font-size: 1.5rem;
    font-style: italic;
    padding: 0 1rem;
    margin: 2.5rem 0;
    position: relative;
    background-color: #fafeff;
    border-top: 1px dotted #9954bb;
    border-bottom: 1px dotted #9954bb;
}
#note-title {
    padding: 0.2rem 0.5rem;
    background: #9954bb;
    color: #FFF;
    position: absolute;
    left: 0;
    top: 0.25rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    border-radius: 4px;
    -webkit-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -moz-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -ms-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    -o-transform: rotate(-5deg) translateX(-10px) translateY(-25px);
    transform: rotate(-5deg) translateX(-10px) translateY(-25px);
}
#inline-yellow {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #f0ad4e;
}
#inline-green {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #5cb85c;
}
#inline-blue {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #2780e3;
}
#inline-purple {
display:inline;
padding:.2em .6em .3em;
font-size:80%;
font-weight:bold;
line-height:1;
color:#fff;
text-align:center;
white-space:nowrap;
vertical-align:baseline;
border-radius:0;
background-color: #9954bb;
}
#div-border-left-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #df3e3e;
}
#div-border-left-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #f0ad4e;
}
#div-border-left-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #5cb85c;
}
#div-border-left-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #2780e3;
}
#div-border-left-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-left-width: 5px;
border-radius: 3px;
border-left-color: #9954bb;
}
#div-border-right-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #df3e3e;
}
#div-border-right-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #f0ad4e;
}
#div-border-right-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #5cb85c;
}
#div-border-right-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #2780e3;
}
#div-border-right-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-right-width: 5px;
border-radius: 3px;
border-right-color: #9954bb;
}
#div-border-top-red {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #df3e3e;
}
#div-border-top-yellow {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #f0ad4e;
}
#div-border-top-green {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #5cb85c;
}
#div-border-top-blue {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #2780e3;
}
#div-border-top-purple {
display: block;
padding: 10px;
margin: 10px 0;
border: 1px solid #ccc;
border-top-width: 5px;
border-radius: 3px;
border-top-color: #9954bb;
}
&lt;/style&gt;</description>
    </item>
    
  </channel>
</rss>
