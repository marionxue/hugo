<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Ryan Yang</title>
    <link>https://www.yangcs.net/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on Ryan Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 30 Jan 2019 18:45:42 +0800</lastBuildDate>
    
	<atom:link href="https://www.yangcs.net/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>通过集群成员变更来看 etcd 的分布式一致性</title>
      <link>https://www.yangcs.net/posts/etcd-server-learner/</link>
      <pubDate>Wed, 30 Jan 2019 18:45:42 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/etcd-server-learner/</guid>
      <description>集群成员变更一直是 etcd 最棘手的问题之一，在变更过程中会遇到各种各样的挑战，我们稍后一一来看。为了把问题描述清楚，首先需要了解 etcd 内部的 raft 实现。 1.</description>
    </item>
    
    <item>
      <title>etcd 集群大小迷思</title>
      <link>https://www.yangcs.net/posts/etcd-cluster-number/</link>
      <pubDate>Wed, 30 Jan 2019 13:13:56 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/etcd-cluster-number/</guid>
      <description>etcd 使用 raft 协议保证各个节点之间的状态一致。根据 raft 算法原理，节点数目越多，会降低集群的写性能。这是因为每一次写操作，需要集群中大多数节点将日志落</description>
    </item>
    
    <item>
      <title>熔断与异常检测在 Istio 中的应用</title>
      <link>https://www.yangcs.net/posts/circuit_breaking-and-outlier-detection-in-istio/</link>
      <pubDate>Fri, 28 Dec 2018 17:23:43 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/circuit_breaking-and-outlier-detection-in-istio/</guid>
      <description>在微服务领域，各个服务需要在网络上执行大量的调用。而网络是很脆弱的，如果某个服务繁忙或者无法响应请求，将有可能引发集群的大规模级联故障，从而</description>
    </item>
    
    <item>
      <title>优化生产环境中的 Kubernetes 资源分配</title>
      <link>https://www.yangcs.net/posts/optimizing-kubernetes-resource-allocation-production/</link>
      <pubDate>Tue, 18 Dec 2018 16:15:12 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/optimizing-kubernetes-resource-allocation-production/</guid>
      <description>原文链接：Optimizing Kubernetes resource allocation in production 我和 Kubernetes 的初次接触就涉及到将应用容器化并部署到生产环境集群中，当时我的工作重点是把 buffer 吞吐量最高（低风险</description>
    </item>
    
    <item>
      <title>Kubernetes 设计与开发原则</title>
      <link>https://www.yangcs.net/posts/kubernetes-design-and-development-explained/</link>
      <pubDate>Tue, 04 Dec 2018 17:35:59 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-design-and-development-explained/</guid>
      <description>原文地址：Kubernetes Design and Development Explained 本文是 8 月 29 日至 31 日在温哥华举行的开源峰会上作者演讲内容的一部分，详细内容请查看下文。 Kubernetes 正迅速成为在分</description>
    </item>
    
    <item>
      <title>Istio 的高级边缘流量控制（二）</title>
      <link>https://www.yangcs.net/posts/egress-gateway-2/</link>
      <pubDate>Wed, 28 Nov 2018 18:19:56 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/egress-gateway-2/</guid>
      <description>上一节我演示了如何通过 Egress Gateway 引导 Istio 的出口 HTTP 流量，但到 443 端口的 HTTPS 流量没有通过 Egress Gateway，而是直接转到 edition.cnn.com 。Istio 出口流量的 TLS 演示了如何在</description>
    </item>
    
    <item>
      <title>KubeRBS 助力 Kubernetes 自动回滚，让你晚上睡得更香</title>
      <link>https://www.yangcs.net/posts/kuberbs-for-automatic-kubernetes-rollbacks-so-you-can-sleep-better-at-night/</link>
      <pubDate>Wed, 28 Nov 2018 11:43:54 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kuberbs-for-automatic-kubernetes-rollbacks-so-you-can-sleep-better-at-night/</guid>
      <description>随着越来越多的企业开始大量使用 Kubernetes，持续交付越来越趋向于标准化，软件版本的更新也越来越趋向于自动化。但你有没有想过，如果新发</description>
    </item>
    
    <item>
      <title>Istio 的高级边缘流量控制（一）</title>
      <link>https://www.yangcs.net/posts/egress-gateway-1/</link>
      <pubDate>Mon, 26 Nov 2018 14:43:51 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/egress-gateway-1/</guid>
      <description>在上一篇文章 Istio 出口流量的 TLS 中，我演示了如何在网格内部直接通过 HTTP 协议访问外部加密服务，并揭示了其背后 Envoy 的配置逻辑。 本文将会通过 Egress Gateway 来引导 Istio 的出</description>
    </item>
    
    <item>
      <title>在服务网格内部调用外部 TCP 服务</title>
      <link>https://www.yangcs.net/posts/egress-tcp/</link>
      <pubDate>Fri, 23 Nov 2018 14:18:48 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/egress-tcp/</guid>
      <description>原文地址：使用外部 TCP 服务 英文作者：VADIM EISENBERG 修订：杨传胜 本篇博客于 2018 年 7 月 23 日更新。新版本使用了 Istio 1.0，并使用了新的 v1alpha3 流量管理 API。如</description>
    </item>
    
    <item>
      <title>在服务网格内部调用外部 Web 服务</title>
      <link>https://www.yangcs.net/posts/egress-https/</link>
      <pubDate>Wed, 21 Nov 2018 17:09:25 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/egress-https/</guid>
      <description>原文地址：使用外部 Web 服务 英文作者：VADIM EISENBERG 修订：杨传胜 此博客文章于 2018 年 8 月 9 日更新。新版本使用了 Istio 1.0，并使用了新的 v1alpha3 流量管理 API。</description>
    </item>
    
    <item>
      <title>深入理解 Kubernetes API Server（一）</title>
      <link>https://www.yangcs.net/posts/kubernetes-api-server-part-1/</link>
      <pubDate>Mon, 19 Nov 2018 13:42:03 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-api-server-part-1/</guid>
      <description>原文地址：Kubernetes API Server, Part I 作者：Andrew Chen，Dominik Tornow 译者：杨传胜 概念架构 Kubernetes 是一个用于在一组节点（通常称之为集群</description>
    </item>
    
    <item>
      <title>Istio 出口流量的 TLS</title>
      <link>https://www.yangcs.net/posts/egress-tls-origination/</link>
      <pubDate>Fri, 16 Nov 2018 15:56:49 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/egress-tls-origination/</guid>
      <description>本文主要内容来自 Istio 官方文档，并对其进行了大量扩展和补充。 控制出口流量任务演示了如何从网格内部的应用程序访问 Kubernetes 集群外部的 HTTP 和 HTTPS 服务, 如该主题中</description>
    </item>
    
    <item>
      <title>深入理解 Kubernetes 资源限制：CPU</title>
      <link>https://www.yangcs.net/posts/understanding-resource-limits-in-kubernetes-cpu-time/</link>
      <pubDate>Sat, 10 Nov 2018 13:32:30 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/understanding-resource-limits-in-kubernetes-cpu-time/</guid>
      <description>原文地址：Understanding resource limits in kubernetes: cpu time 作者：Mark Betz 译者：杨传胜 在关于 Kubernetes 资源限制的系列文章的第一篇文章中，我讨论了如何使用 ResourceRequirements 对象</description>
    </item>
    
    <item>
      <title>初试 Kubernetes 集群中使用 Contour 反向代理</title>
      <link>https://www.yangcs.net/posts/use-envoy-as-a-kubernetes-ingress/</link>
      <pubDate>Fri, 28 Sep 2018 16:38:15 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/use-envoy-as-a-kubernetes-ingress/</guid>
      <description>在 Kubernetes 中运行大规模以 Web 为中心的工作负载，最关键的需求之一就是在 L7 层实现高效流畅的入口流量管理。自从第一批 Kubernetes Ingress Controller 开发完成以来，Envoy（由 Matt Klein</description>
    </item>
    
    <item>
      <title>Kubernetes 准入控制介绍</title>
      <link>https://www.yangcs.net/posts/kubernetes-extensible-admission/</link>
      <pubDate>Sat, 22 Sep 2018 11:17:11 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-extensible-admission/</guid>
      <description>1. 什么是准入控制 准入控制（Admission Controller）是 Kubernetes API Server 用于拦截请求的一种手段。Admission 可以做到对请求的资源对象</description>
    </item>
    
    <item>
      <title>Kubernetes DNS 高阶指南</title>
      <link>https://www.yangcs.net/posts/kubernetes-dns/</link>
      <pubDate>Mon, 27 Aug 2018 18:11:52 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-dns/</guid>
      <description>DNS 是 Kubernetes 的核心功能之一，Kubernetes 通过 kube-dns 或 CoreDNS 作为集群的必备扩展来提供命名服务，通过 DNS 扩展，每一个 Service 都会产生一个独一无二的 FQDN（F</description>
    </item>
    
    <item>
      <title>控制 Egress 流量</title>
      <link>https://www.yangcs.net/posts/control-egress-traffic/</link>
      <pubDate>Thu, 16 Aug 2018 13:40:27 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/control-egress-traffic/</guid>
      <description>本文主要内容来自 Istio 官方文档，并对其进行了大量扩展和补充。 缺省情况下，Istio 服务网格内的 Pod，由于其 iptables 将所有外发流量都透明的转发给了 Si</description>
    </item>
    
    <item>
      <title>请求都去哪了？（续）</title>
      <link>https://www.yangcs.net/posts/where-is-the-request-2/</link>
      <pubDate>Mon, 13 Aug 2018 16:30:30 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/where-is-the-request-2/</guid>
      <description>书接前文，上文我们通过跟踪集群外通过 ingressgateway 发起的请求来探寻流量在 Istio 服务网格之间的流动方向，先部署 bookinfo 示例应用，然后创建一个监听在 ingressgateway 上的 GateWay 和 Virt</description>
    </item>
    
    <item>
      <title>请求都去哪了？</title>
      <link>https://www.yangcs.net/posts/where-is-the-request-1/</link>
      <pubDate>Wed, 08 Aug 2018 16:56:31 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/where-is-the-request-1/</guid>
      <description>通过前几篇文章的学习与实践，我们对 Gateway、VirtualService 和 Destinationrule 的概念和原理有了初步的认知，本篇将对这几个对象资源的配置文</description>
    </item>
    
    <item>
      <title>Kubernetes 资源管理概述</title>
      <link>https://www.yangcs.net/posts/kubernetes-resource-management/</link>
      <pubDate>Fri, 03 Aug 2018 17:34:19 +0800</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-resource-management/</guid>
      <description>本文转载自 Cizixs 的博客。 1. 什么是资源？ 在 kubernetes 中，有两个基础但是非常重要的概念：node 和 pod。node 翻译成节点，是对集群资源的抽象；pod 是对</description>
    </item>
    
    <item>
      <title>使用自定义指标进行弹性伸缩</title>
      <link>https://www.yangcs.net/posts/custom-metrics-hpa/</link>
      <pubDate>Tue, 19 Jun 2018 09:02:52 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/custom-metrics-hpa/</guid>
      <description>从 Kubernetes 1.8 开始，资源使用指标（如容器 CPU 和内存使用率）可以通过 Metrics API 在 Kubernetes 中获取。 这些指标可以直接被用户访问(例如通过使用 kubectl top 命令)，或由集群中的控制</description>
    </item>
    
    <item>
      <title>Kubernetes API 扩展</title>
      <link>https://www.yangcs.net/posts/api-aggregation/</link>
      <pubDate>Tue, 19 Jun 2018 06:15:06 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/api-aggregation/</guid>
      <description>Aggregated（聚合的）API server 是为了将原来的 API server 这个巨石（monolithic）应用给拆分开，为了方便用户开发自己的 API server 集成进来，而</description>
    </item>
    
    <item>
      <title> 修复 Service Endpoint 更新的延迟</title>
      <link>https://www.yangcs.net/posts/kubernetes-fixing-delayed-service-endpoint-updates/</link>
      <pubDate>Fri, 15 Jun 2018 14:02:11 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-fixing-delayed-service-endpoint-updates/</guid>
      <description>几个月前，我在更新 Kubernetes 集群中的 Deployment 时发现了一个很奇怪的连接超时现象，在更新 Deployment 之后的 30 秒到两分钟左右，所有与以该 Deployment 作为服务后端的 Service 的连接都会超时或</description>
    </item>
    
    <item>
      <title>Kubernetes 的奇技淫巧</title>
      <link>https://www.yangcs.net/posts/kubernetes-fucking-trick/</link>
      <pubDate>Mon, 11 Jun 2018 04:35:48 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/kubernetes-fucking-trick/</guid>
      <description>Kubernetes 作为云原生时代的“操作系统”，熟悉和使用它是每名用户（User）的必备技能。如果你正在 Kubernetes 上工作，你需要正确的工具和技巧来确保 Kubernetes 集群的高可用</description>
    </item>
    
    <item>
      <title>kubectl run 背后到底发生了什么？</title>
      <link>https://www.yangcs.net/posts/what-happens-when-k8s/</link>
      <pubDate>Fri, 01 Jun 2018 11:36:45 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/what-happens-when-k8s/</guid>
      <description>想象一下，如果我想将 nginx 部署到 Kubernetes 集群，我可能会在终端中输入类似这样的命令： $ kubectl run --image=nginx --replicas=3 然后回车。几秒钟后，你就会看到三个 nginx pod 分布在所有的工作节点</description>
    </item>
    
    <item>
      <title>走进 Descheduler</title>
      <link>https://www.yangcs.net/posts/introduce-kubernetes-descheduler/</link>
      <pubDate>Wed, 23 May 2018 10:23:29 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/introduce-kubernetes-descheduler/</guid>
      <description>kube-scheduler 是 Kubernetes 中负责调度的组件，它本身的调度功能已经很强大了。但由于 Kubernetes 集群非常活跃，它的状态会随时间而改变，由于各种原因，你可能需要将已经运行的 Pod 移</description>
    </item>
    
    <item>
      <title>Pod 的生命周期管理</title>
      <link>https://www.yangcs.net/posts/pods-life/</link>
      <pubDate>Thu, 03 May 2018 12:08:01 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/pods-life/</guid>
      <description>本文我们将从实践者的角度仔细研究整个pod生命周期，包括如何影响启动和关闭行为，并通过实践来理解对应用程序健康状况的检查。 1. Pod 的生命周期 Pod phase</description>
    </item>
    
    <item>
      <title>Kube-router 实战</title>
      <link>https://www.yangcs.net/posts/kube-router/</link>
      <pubDate>Fri, 20 Apr 2018 04:36:40 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/kube-router/</guid>
      <description>Kube-router 是一个挺有想法的项目，兼备了 calico 和 kube-proxy 的功能，是基于 Kubernetes 网络设计的一个集负载均衡器、防火墙和容器网络的综合方案。 1. 体系架构 Kube-router 是围绕 观察者 和 控制器</description>
    </item>
    
    <item>
      <title>CRI-O 简介</title>
      <link>https://www.yangcs.net/posts/cri-o/</link>
      <pubDate>Tue, 03 Apr 2018 08:11:38 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/cri-o/</guid>
      <description>上一篇 https://www.yangcs.net/posts/container-runtime/ 介绍了什么是容器运行时，并列出了不同的容器运行时。本篇重点介绍其中的一种容器运行时 CRI-O。 1. CRI-O 的诞生 当容器运行时（Contain</description>
    </item>
    
    <item>
      <title>Kubernetes 中的容器运行时</title>
      <link>https://www.yangcs.net/posts/container-runtime/</link>
      <pubDate>Tue, 03 Apr 2018 06:50:43 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/container-runtime/</guid>
      <description>容器运行时（Container Runtime）是 Kubernetes 最重要的组件之一，负责真正管理镜像和容器的生命周期。Kubelet 通过 Container Runtime Interface (CRI) 与容器运行时</description>
    </item>
    
    <item>
      <title>Kubernetes 使用集群联邦实现多集群管理</title>
      <link>https://www.yangcs.net/posts/federation/</link>
      <pubDate>Thu, 22 Mar 2018 09:36:27 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/federation/</guid>
      <description>在云计算环境中，服务的作用距离范围从近到远一般可以有： 同主机（Host，Node） 跨主机同可用区（Available Zone） 跨可用区同地区</description>
    </item>
    
    <item>
      <title>Kubernetes 网络扩展</title>
      <link>https://www.yangcs.net/posts/k8s-network-expand/</link>
      <pubDate>Sun, 11 Feb 2018 10:40:33 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/k8s-network-expand/</guid>
      <description>1. Kubernetes 中服务暴露的方式 k8s 的服务暴露分为以下几种情况： hostNetwork hostPort NodePort LoadBalancer Ingress 说是暴露 Pod 其实跟暴露 Service 是一回事，因为 Pod 就是 Service 的 backend。 HostNetwork 这是一种直接定义</description>
    </item>
    
    <item>
      <title>calico Router reflection(RR) 模式介绍及部署</title>
      <link>https://www.yangcs.net/posts/calico-rr/</link>
      <pubDate>Thu, 01 Feb 2018 11:03:49 +0000</pubDate>
      
      <guid>https://www.yangcs.net/posts/calico-rr/</guid>
      <description>1. 名词解释 endpoint：接入到网络中的设备称为 endpoint ❤️ AS：网络自治系统，一个完全自治的网络，通过 BGP 协议与其它 AS 交换路由信息 ibgp：AS</description>
    </item>
    
  </channel>
</rss>